
Project_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008834  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab0  08008ab0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab8  08008ab8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000010  08008ad0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08008ad0  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196cb  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e29  00000000  00000000  0003974e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e8  00000000  00000000  0003dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba0a  00000000  00000000  0003ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c880  00000000  00000000  0006a81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f069  00000000  00000000  0008709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061bc  00000000  00000000  00196104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0019c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080089d8 	.word	0x080089d8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	080089d8 	.word	0x080089d8

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <lcd_send_cmd>:
	data_t[0] = 0x11;
	HAL_I2C_Master_Transmit (&hsmbus2, SLAVE_ADDRESS_CAM_W,(uint8_t *) data_t, 2, 100);
}

void lcd_send_cmd (char cmd) //everything needs to start with FE then the comand. Dont know why its a char
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af02      	add	r7, sp, #8
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[2];
	data_t[0] = 0xFE;
 8000526:	23fe      	movs	r3, #254	; 0xfe
 8000528:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 2, 100);
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2302      	movs	r3, #2
 8000538:	2150      	movs	r1, #80	; 0x50
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <lcd_send_cmd+0x2c>)
 800053c:	f001 ff94 	bl	8002468 <HAL_I2C_Master_Transmit>


}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000002c 	.word	0x2000002c

0800054c <lcd_send_cmd_param>:

void lcd_send_cmd_param (char cmd, char param) //everything needs to start with FE then the comand. Dont know why its a char
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t data_t[3];
	data_t[0] = 0xFE;
 800055c:	23fe      	movs	r3, #254	; 0xfe
 800055e:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	737b      	strb	r3, [r7, #13]
	data_t[2] = param;
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 3, 100);
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2303      	movs	r3, #3
 8000572:	2150      	movs	r1, #80	; 0x50
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <lcd_send_cmd_param+0x38>)
 8000576:	f001 ff77 	bl	8002468 <HAL_I2C_Master_Transmit>


}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c

08000588 <lcd_send_data>:

void lcd_send_data (char data_in)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	//data_t[1] = 0xFE;
	data_t[0] = data_in;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8000596:	f107 020c 	add.w	r2, r7, #12
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2150      	movs	r1, #80	; 0x50
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <lcd_send_data+0x28>)
 80005a4:	f001 ff60 	bl	8002468 <HAL_I2C_Master_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000002c 	.word	0x2000002c

080005b4 <lcd_init>:


void lcd_init (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x41); //turn on display
 80005b8:	2041      	movs	r0, #65	; 0x41
 80005ba:	f7ff ffaf 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x51); //clear display
 80005be:	2051      	movs	r0, #81	; 0x51
 80005c0:	f7ff ffac 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x46); //home the curser
 80005c4:	2046      	movs	r0, #70	; 0x46
 80005c6:	f7ff ffa9 	bl	800051c <lcd_send_cmd>

	//write password
	HAL_Delay(200);
 80005ca:	20c8      	movs	r0, #200	; 0xc8
 80005cc:	f001 fafe 	bl	8001bcc <HAL_Delay>
	lcd_send_string("Password: ");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <lcd_init+0x34>)
 80005d2:	f000 f8d7 	bl	8000784 <lcd_send_string>

	lcd_send_cmd (0x47); //turn on underlying cursur
 80005d6:	2047      	movs	r0, #71	; 0x47
 80005d8:	f7ff ffa0 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x4B);
 80005dc:	204b      	movs	r0, #75	; 0x4b
 80005de:	f7ff ff9d 	bl	800051c <lcd_send_cmd>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080089f0 	.word	0x080089f0

080005ec <close_door>:

void close_door (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//close door
		lcd_send_string("CLOSING");
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <close_door+0x3c>)
 80005f2:	f000 f8c7 	bl	8000784 <lcd_send_string>
		*tim_4_ccr2 = 100;
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <close_door+0x40>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2264      	movs	r2, #100	; 0x64
 80005fc:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f001 fae3 	bl	8001bcc <HAL_Delay>
		lcd_send_cmd (0x51); //clear display
 8000606:	2051      	movs	r0, #81	; 0x51
 8000608:	f7ff ff88 	bl	800051c <lcd_send_cmd>
		lcd_send_cmd (0x46); //home the curser
 800060c:	2046      	movs	r0, #70	; 0x46
 800060e:	f7ff ff85 	bl	800051c <lcd_send_cmd>
		lcd_send_string("Password: ");
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <close_door+0x44>)
 8000614:	f000 f8b6 	bl	8000784 <lcd_send_string>

		lcd_send_cmd (0x47); //turn on underlying cursur
 8000618:	2047      	movs	r0, #71	; 0x47
 800061a:	f7ff ff7f 	bl	800051c <lcd_send_cmd>
		lcd_send_cmd (0x4B);
 800061e:	204b      	movs	r0, #75	; 0x4b
 8000620:	f7ff ff7c 	bl	800051c <lcd_send_cmd>
		//open = false;

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	080089fc 	.word	0x080089fc
 800062c:	20000000 	.word	0x20000000
 8000630:	080089f0 	.word	0x080089f0

08000634 <cam_take_pic>:

void cam_take_pic(void){
 8000634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000638:	b089      	sub	sp, #36	; 0x24
 800063a:	af02      	add	r7, sp, #8
 800063c:	466b      	mov	r3, sp
 800063e:	461e      	mov	r6, r3
	uint32_t IMAGE_SIZE = (60 * 80 * 3);
 8000640:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 8000644:	617b      	str	r3, [r7, #20]
//	data_t[0] = 0x12;//system reset
//	data_t[1] = 0x80;
//	HAL_I2C_Master_Transmit (&hsmbus2, SLAVE_ADDRESS_CAM_W,(uint8_t *) data_t, 2, 100);


	data_t[0] = 0xE0;
 8000646:	23e0      	movs	r3, #224	; 0xe0
 8000648:	723b      	strb	r3, [r7, #8]
	data_t[1] = 0x10;
 800064a:	2310      	movs	r3, #16
 800064c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit (&hsmbus2, SLAVE_ADDRESS_CAM_W,(uint8_t *) data_t, 2, 100);
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2160      	movs	r1, #96	; 0x60
 800065a:	4829      	ldr	r0, [pc, #164]	; (8000700 <cam_take_pic+0xcc>)
 800065c:	f001 ff04 	bl	8002468 <HAL_I2C_Master_Transmit>

	data_t[0] = 0xDA;
 8000660:	23da      	movs	r3, #218	; 0xda
 8000662:	723b      	strb	r3, [r7, #8]
	data_t[1] = 0x10;
 8000664:	2310      	movs	r3, #16
 8000666:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit (&hsmbus2, SLAVE_ADDRESS_CAM_W,(uint8_t *) data_t, 2, 100);
 8000668:	f107 0208 	add.w	r2, r7, #8
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2302      	movs	r3, #2
 8000672:	2160      	movs	r1, #96	; 0x60
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <cam_take_pic+0xcc>)
 8000676:	f001 fef7 	bl	8002468 <HAL_I2C_Master_Transmit>

//	data_t[0] = 0x0C;
//	data_t[1] = 0x01;
//	HAL_I2C_Master_Transmit (&hsmbus2, SLAVE_ADDRESS_CAM_W,(uint8_t *) data_t, 2, 100);

	uint8_t command = 0x84;
 800067a:	2384      	movs	r3, #132	; 0x84
 800067c:	71fb      	strb	r3, [r7, #7]

	// Send command to capture image
	//HAL_GPIO_WritePin(CAMERA_CS_PORT, CAMERA_CS_PIN, GPIO_PIN_RESET); // Activate camera CS
	HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // Send command over SPI
 800067e:	1df9      	adds	r1, r7, #7
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2201      	movs	r2, #1
 8000686:	481f      	ldr	r0, [pc, #124]	; (8000704 <cam_take_pic+0xd0>)
 8000688:	f004 f920 	bl	80048cc <HAL_SPI_Transmit>
    //HAL_GPIO_WritePin(CAMERA_CS_PORT, CAMERA_CS_PIN, GPIO_PIN_SET); // Deactivate camera CS

    // Wait for image capture (adjust the delay as needed)
    HAL_Delay(500);
 800068c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000690:	f001 fa9c 	bl	8001bcc <HAL_Delay>

    // Receive image data over SPI
    uint8_t image_data[IMAGE_SIZE]; // Define an array to store image data
 8000694:	6979      	ldr	r1, [r7, #20]
 8000696:	460b      	mov	r3, r1
 8000698:	3b01      	subs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	2300      	movs	r3, #0
 800069e:	4688      	mov	r8, r1
 80006a0:	4699      	mov	r9, r3
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006b6:	2300      	movs	r3, #0
 80006b8:	460c      	mov	r4, r1
 80006ba:	461d      	mov	r5, r3
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	00eb      	lsls	r3, r5, #3
 80006c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006ca:	00e2      	lsls	r2, r4, #3
 80006cc:	1dcb      	adds	r3, r1, #7
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	ebad 0d03 	sub.w	sp, sp, r3
 80006d6:	ab02      	add	r3, sp, #8
 80006d8:	3300      	adds	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
    //HAL_GPIO_WritePin(CAMERA_CS_PORT, CAMERA_CS_PIN, GPIO_PIN_RESET); // Activate camera CS
    HAL_SPI_Receive(&hspi1, image_data, IMAGE_SIZE, HAL_MAX_DELAY); // Receive image data over SPI
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <cam_take_pic+0xd0>)
 80006e8:	f004 fa65 	bl	8004bb6 <HAL_SPI_Receive>
    //HAL_GPIO_WritePin(CAMERA_CS_PORT, CAMERA_CS_PIN, GPIO_PIN_SET);

    HAL_Delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f001 fa6c 	bl	8001bcc <HAL_Delay>
 80006f4:	46b5      	mov	sp, r6
//
//	HAL_I2C_Master_Receive(&hsmbus2, SLAVE_ADDRESS_CAM_R, image_data, sizeof(image_data), HAL_MAX_DELAY);
//
//	HAL_Delay(500);

}
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000700:	20000080 	.word	0x20000080
 8000704:	200000d0 	.word	0x200000d0

08000708 <lcd_correct_pass>:

void lcd_correct_pass (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0


	//write correct
	cam_take_pic();
 800070c:	f7ff ff92 	bl	8000634 <cam_take_pic>
	lcd_send_cmd_param(0x45, 0x40);
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	2045      	movs	r0, #69	; 0x45
 8000714:	f7ff ff1a 	bl	800054c <lcd_send_cmd_param>
	lcd_send_string("Correct$$$");
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <lcd_correct_pass+0x2c>)
 800071a:	f000 f833 	bl	8000784 <lcd_send_string>

	//open lock funciton
	*tim_4_ccr2 = 240;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <lcd_correct_pass+0x30>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	22f0      	movs	r2, #240	; 0xf0
 8000724:	601a      	str	r2, [r3, #0]
	HAL_Delay(3000);
 8000726:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800072a:	f001 fa4f 	bl	8001bcc <HAL_Delay>




}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08008a04 	.word	0x08008a04
 8000738:	20000000 	.word	0x20000000

0800073c <lcd_incorrect_pass>:

void lcd_incorrect_pass (void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	//write correct
		lcd_send_cmd_param(0x45, 0x40);
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	2045      	movs	r0, #69	; 0x45
 8000744:	f7ff ff02 	bl	800054c <lcd_send_cmd_param>
		lcd_send_string("Incorrect :(");
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <lcd_incorrect_pass+0x20>)
 800074a:	f000 f81b 	bl	8000784 <lcd_send_string>

		//open lock funciton
		HAL_Delay(2000);
 800074e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000752:	f001 fa3b 	bl	8001bcc <HAL_Delay>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08008a10 	.word	0x08008a10

08000760 <lcd_nice>:

void lcd_nice(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	lcd_send_cmd_param(0x45, 0x40);
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	2045      	movs	r0, #69	; 0x45
 8000768:	f7ff fef0 	bl	800054c <lcd_send_cmd_param>
	lcd_send_string("Nice! :D");
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <lcd_nice+0x20>)
 800076e:	f000 f809 	bl	8000784 <lcd_send_string>
	HAL_Delay(2000);
 8000772:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000776:	f001 fa29 	bl	8001bcc <HAL_Delay>


}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08008a20 	.word	0x08008a20

08000784 <lcd_send_string>:

void lcd_send_string (char *str) //just going to do it manually
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800078c:	e006      	b.n	800079c <lcd_send_string+0x18>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fef6 	bl	8000588 <lcd_send_data>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f4      	bne.n	800078e <lcd_send_string+0xa>
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t key;

char read_keypad (void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 0);  //Pull the R1 low
 80007b2:	2200      	movs	r2, #0
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 fda1 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 80007be:	2201      	movs	r2, #1
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f001 fd9b 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 80007ca:	2201      	movs	r2, #1
 80007cc:	2120      	movs	r1, #32
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f001 fd95 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 fd8f 	bl	8002300 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80007e2:	2108      	movs	r1, #8
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f001 fd72 	bl	80022d0 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10d      	bne.n	800080e <read_keypad+0x60>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80007f2:	bf00      	nop
 80007f4:	2108      	movs	r1, #8
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f001 fd69 	bl	80022d0 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f7      	beq.n	80007f4 <read_keypad+0x46>
		lcd_send_data(0x31); // i
 8000804:	2031      	movs	r0, #49	; 0x31
 8000806:	f7ff febf 	bl	8000588 <lcd_send_data>
		return '1';
 800080a:	2331      	movs	r3, #49	; 0x31
 800080c:	e18c      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800080e:	2104      	movs	r1, #4
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 fd5c 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10d      	bne.n	800083a <read_keypad+0x8c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 800081e:	bf00      	nop
 8000820:	2104      	movs	r1, #4
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f001 fd53 	bl	80022d0 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0f7      	beq.n	8000820 <read_keypad+0x72>
		lcd_send_data(0x32); // i
 8000830:	2032      	movs	r0, #50	; 0x32
 8000832:	f7ff fea9 	bl	8000588 <lcd_send_data>
		return '2';
 8000836:	2332      	movs	r3, #50	; 0x32
 8000838:	e176      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800083a:	2102      	movs	r1, #2
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f001 fd46 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10d      	bne.n	8000866 <read_keypad+0xb8>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 800084a:	bf00      	nop
 800084c:	2102      	movs	r1, #2
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f001 fd3d 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f7      	beq.n	800084c <read_keypad+0x9e>
		lcd_send_data(0x33); // i
 800085c:	2033      	movs	r0, #51	; 0x33
 800085e:	f7ff fe93 	bl	8000588 <lcd_send_data>
		return '3';
 8000862:	2333      	movs	r3, #51	; 0x33
 8000864:	e160      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000866:	2101      	movs	r1, #1
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fd30 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10d      	bne.n	8000892 <read_keypad+0xe4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000876:	bf00      	nop
 8000878:	2101      	movs	r1, #1
 800087a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087e:	f001 fd27 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f7      	beq.n	8000878 <read_keypad+0xca>
		lcd_send_data(0x41); // i
 8000888:	2041      	movs	r0, #65	; 0x41
 800088a:	f7ff fe7d 	bl	8000588 <lcd_send_data>
		return 'A';
 800088e:	2341      	movs	r3, #65	; 0x41
 8000890:	e14a      	b.n	8000b28 <read_keypad+0x37a>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000892:	2201      	movs	r2, #1
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f001 fd31 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 0);  // Pull the R2 High
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f001 fd2b 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f001 fd25 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fd1f 	bl	8002300 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80008c2:	2108      	movs	r1, #8
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f001 fd02 	bl	80022d0 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10d      	bne.n	80008ee <read_keypad+0x140>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80008d2:	bf00      	nop
 80008d4:	2108      	movs	r1, #8
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f001 fcf9 	bl	80022d0 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f7      	beq.n	80008d4 <read_keypad+0x126>
		lcd_send_data(0x34); // i
 80008e4:	2034      	movs	r0, #52	; 0x34
 80008e6:	f7ff fe4f 	bl	8000588 <lcd_send_data>
		return '4';
 80008ea:	2334      	movs	r3, #52	; 0x34
 80008ec:	e11c      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80008ee:	2104      	movs	r1, #4
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f001 fcec 	bl	80022d0 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10d      	bne.n	800091a <read_keypad+0x16c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80008fe:	bf00      	nop
 8000900:	2104      	movs	r1, #4
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 fce3 	bl	80022d0 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f7      	beq.n	8000900 <read_keypad+0x152>
		lcd_send_data(0x35); // i
 8000910:	2035      	movs	r0, #53	; 0x35
 8000912:	f7ff fe39 	bl	8000588 <lcd_send_data>
		return '5';
 8000916:	2335      	movs	r3, #53	; 0x35
 8000918:	e106      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800091a:	2102      	movs	r1, #2
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f001 fcd6 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10d      	bne.n	8000946 <read_keypad+0x198>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 800092a:	bf00      	nop
 800092c:	2102      	movs	r1, #2
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 fccd 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f7      	beq.n	800092c <read_keypad+0x17e>
		lcd_send_data(0x36); // i
 800093c:	2036      	movs	r0, #54	; 0x36
 800093e:	f7ff fe23 	bl	8000588 <lcd_send_data>
		return '6';
 8000942:	2336      	movs	r3, #54	; 0x36
 8000944:	e0f0      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000946:	2101      	movs	r1, #1
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 fcc0 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10d      	bne.n	8000972 <read_keypad+0x1c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000956:	bf00      	nop
 8000958:	2101      	movs	r1, #1
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f001 fcb7 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f7      	beq.n	8000958 <read_keypad+0x1aa>
		lcd_send_data(0x42); // i
 8000968:	2042      	movs	r0, #66	; 0x42
 800096a:	f7ff fe0d 	bl	8000588 <lcd_send_data>
		return 'B';
 800096e:	2342      	movs	r3, #66	; 0x42
 8000970:	e0da      	b.n	8000b28 <read_keypad+0x37a>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000972:	2201      	movs	r2, #1
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f001 fcc1 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 800097e:	2201      	movs	r2, #1
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f001 fcbb 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 0);  // Pull the R3 High
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f001 fcb5 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 8000996:	2201      	movs	r2, #1
 8000998:	2110      	movs	r1, #16
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fcaf 	bl	8002300 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80009a2:	2108      	movs	r1, #8
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f001 fc92 	bl	80022d0 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <read_keypad+0x220>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80009b2:	bf00      	nop
 80009b4:	2108      	movs	r1, #8
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f001 fc89 	bl	80022d0 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d0f7      	beq.n	80009b4 <read_keypad+0x206>
		lcd_send_data(0x37); // i
 80009c4:	2037      	movs	r0, #55	; 0x37
 80009c6:	f7ff fddf 	bl	8000588 <lcd_send_data>
		return '7';
 80009ca:	2337      	movs	r3, #55	; 0x37
 80009cc:	e0ac      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80009ce:	2104      	movs	r1, #4
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fc7c 	bl	80022d0 <HAL_GPIO_ReadPin>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10d      	bne.n	80009fa <read_keypad+0x24c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80009de:	bf00      	nop
 80009e0:	2104      	movs	r1, #4
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 fc73 	bl	80022d0 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f7      	beq.n	80009e0 <read_keypad+0x232>
		lcd_send_data(0x38); // i
 80009f0:	2038      	movs	r0, #56	; 0x38
 80009f2:	f7ff fdc9 	bl	8000588 <lcd_send_data>
		return '8';
 80009f6:	2338      	movs	r3, #56	; 0x38
 80009f8:	e096      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80009fa:	2102      	movs	r1, #2
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f001 fc66 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10d      	bne.n	8000a26 <read_keypad+0x278>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000a0a:	bf00      	nop
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f001 fc5d 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f7      	beq.n	8000a0c <read_keypad+0x25e>
		lcd_send_data(0x39); // i
 8000a1c:	2039      	movs	r0, #57	; 0x39
 8000a1e:	f7ff fdb3 	bl	8000588 <lcd_send_data>
		return '9';
 8000a22:	2339      	movs	r3, #57	; 0x39
 8000a24:	e080      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000a26:	2101      	movs	r1, #1
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 fc50 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10a      	bne.n	8000a4c <read_keypad+0x29e>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000a36:	bf00      	nop
 8000a38:	2101      	movs	r1, #1
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f001 fc47 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f7      	beq.n	8000a38 <read_keypad+0x28a>
		return 'C';
 8000a48:	2343      	movs	r3, #67	; 0x43
 8000a4a:	e06d      	b.n	8000b28 <read_keypad+0x37a>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f001 fc54 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 fc4e 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f001 fc48 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 0);  // Pull the R4 High
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f001 fc42 	bl	8002300 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f001 fc25 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10a      	bne.n	8000aa2 <read_keypad+0x2f4>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000a8c:	bf00      	nop
 8000a8e:	2108      	movs	r1, #8
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 fc1c 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f7      	beq.n	8000a8e <read_keypad+0x2e0>
		return '*';
 8000a9e:	232a      	movs	r3, #42	; 0x2a
 8000aa0:	e042      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 fc12 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10d      	bne.n	8000ace <read_keypad+0x320>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000ab2:	bf00      	nop
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f001 fc09 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f7      	beq.n	8000ab4 <read_keypad+0x306>
		lcd_send_data(0x30); // i
 8000ac4:	2030      	movs	r0, #48	; 0x30
 8000ac6:	f7ff fd5f 	bl	8000588 <lcd_send_data>
		return '0';
 8000aca:	2330      	movs	r3, #48	; 0x30
 8000acc:	e02c      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000ace:	2102      	movs	r1, #2
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f001 fbfc 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10d      	bne.n	8000afa <read_keypad+0x34c>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000ade:	bf00      	nop
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f001 fbf3 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f7      	beq.n	8000ae0 <read_keypad+0x332>
		lcd_send_data(0x23); // i
 8000af0:	2023      	movs	r0, #35	; 0x23
 8000af2:	f7ff fd49 	bl	8000588 <lcd_send_data>
		return '#';
 8000af6:	2323      	movs	r3, #35	; 0x23
 8000af8:	e016      	b.n	8000b28 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000afa:	2101      	movs	r1, #1
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f001 fbe6 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10d      	bne.n	8000b26 <read_keypad+0x378>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000b0a:	bf00      	nop
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f001 fbdd 	bl	80022d0 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f7      	beq.n	8000b0c <read_keypad+0x35e>
		lcd_send_data(0x44); // i
 8000b1c:	2044      	movs	r0, #68	; 0x44
 8000b1e:	f7ff fd33 	bl	8000588 <lcd_send_data>
		return 'D';
 8000b22:	2344      	movs	r3, #68	; 0x44
 8000b24:	e000      	b.n	8000b28 <read_keypad+0x37a>
	}

	return 0; // if returned, 0, we got an error
 8000b26:	2300      	movs	r3, #0

}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxCpltCallback>:
	};
	HAL_UART_Transmit(XBEE_ADDR, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if (huart == &huart3) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_UART_RxCpltCallback+0x48>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d116      	bne.n	8000b6a <HAL_UART_RxCpltCallback+0x3e>
	  // handle received message
	  uint8_t data[2] = {xbee_buff[8], xbee_buff[9]};
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b3e:	7a1b      	ldrb	r3, [r3, #8]
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b44:	7a5b      	ldrb	r3, [r3, #9]
 8000b46:	737b      	strb	r3, [r7, #13]

	  if (data[0] == UNLOCK_DOOR) {
 8000b48:	7b3b      	ldrb	r3, [r7, #12]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d103      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x2a>
		  lcd_correct_pass();
 8000b4e:	f7ff fddb 	bl	8000708 <lcd_correct_pass>
		  lcd_init();
 8000b52:	f7ff fd2f 	bl	80005b4 <lcd_init>
	  }
	  if (data[0] == LOCK_DOOR) {
 8000b56:	7b3b      	ldrb	r3, [r7, #12]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <HAL_UART_RxCpltCallback+0x34>
		  close_door();
 8000b5c:	f7ff fd46 	bl	80005ec <close_door>
	  }

	  HAL_UART_Receive_IT(&huart3, xbee_buff, 11);
 8000b60:	220b      	movs	r2, #11
 8000b62:	4905      	ldr	r1, [pc, #20]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <HAL_UART_RxCpltCallback+0x48>)
 8000b66:	f005 febb 	bl	80068e0 <HAL_UART_Receive_IT>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200001cc 	.word	0x200001cc
 8000b78:	20000260 	.word	0x20000260

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b82:	f000 ffae 	bl	8001ae2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b86:	f000 f8bb 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8a:	f000 fafb 	bl	8001184 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b8e:	f000 f8fd 	bl	8000d8c <MX_I2C1_Init>
  MX_TIM4_Init();
 8000b92:	f000 fa2f 	bl	8000ff4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000b96:	f000 f9b7 	bl	8000f08 <MX_TIM2_Init>
  MX_I2C2_SMBUS_Init();
 8000b9a:	f000 f935 	bl	8000e08 <MX_I2C2_SMBUS_Init>
  MX_SPI1_Init();
 8000b9e:	f000 f975 	bl	8000e8c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ba2:	f000 fa9f 	bl	80010e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000ba6:	f7ff fd05 	bl	80005b4 <lcd_init>
  HAL_Delay(2000);
 8000baa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bae:	f001 f80d 	bl	8001bcc <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, xbee_buff, 11);
 8000bb2:	220b      	movs	r2, #11
 8000bb4:	494d      	ldr	r1, [pc, #308]	; (8000cec <main+0x170>)
 8000bb6:	484e      	ldr	r0, [pc, #312]	; (8000cf0 <main+0x174>)
 8000bb8:	f005 fe92 	bl	80068e0 <HAL_UART_Receive_IT>
  //cam_setup();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char real_password[8] = "D";
 8000bbc:	2344      	movs	r3, #68	; 0x44
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
char nice[] = "69420";
 8000bc4:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <main+0x178>)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	6018      	str	r0, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	8019      	strh	r1, [r3, #0]
char pass[11] = "\0";
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	f8c3 2003 	str.w	r2, [r3, #3]
int index = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24


HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4843      	ldr	r0, [pc, #268]	; (8000cf8 <main+0x17c>)
 8000bec:	f004 fe12 	bl	8005814 <HAL_TIM_PWM_Start>
*tim_4_ccr2 &= 0xffff;
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <main+0x180>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <main+0x180>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	601a      	str	r2, [r3, #0]
*tim_4_ccr2 |= 100;
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <main+0x180>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <main+0x180>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8000c0c:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 // Initialize an empty password of size 10 because of Null
	    char key = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 8000c14:	e004      	b.n	8000c20 <main+0xa4>
	    	key = read_keypad ();
 8000c16:	f7ff fdca 	bl	80007ae <read_keypad>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 8000c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f6      	beq.n	8000c16 <main+0x9a>
	    }
		if (key != 'C' && key != '*' && strlen(pass) < 10) {
 8000c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c2c:	2b43      	cmp	r3, #67	; 0x43
 8000c2e:	d018      	beq.n	8000c62 <main+0xe6>
 8000c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c34:	2b2a      	cmp	r3, #42	; 0x2a
 8000c36:	d014      	beq.n	8000c62 <main+0xe6>
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fae8 	bl	8000210 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b09      	cmp	r3, #9
 8000c44:	d80d      	bhi.n	8000c62 <main+0xe6>
		    // Append the key to the string
			pass[index++] = key;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8000c4c:	3328      	adds	r3, #40	; 0x28
 8000c4e:	443b      	add	r3, r7
 8000c50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c54:	f803 2c24 	strb.w	r2, [r3, #-36]
			pass[index] = '\0';
 8000c58:	1d3a      	adds	r2, r7, #4
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
		}
		if (key == 'C'){
 8000c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c66:	2b43      	cmp	r3, #67	; 0x43
 8000c68:	d109      	bne.n	8000c7e <main+0x102>
			pass[0] = '\0';
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
			*tim_4_ccr2 = 100;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <main+0x180>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2264      	movs	r2, #100	; 0x64
 8000c78:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000c7a:	f7ff fc9b 	bl	80005b4 <lcd_init>
  	  	  }
		if (key == '*'){
 8000c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c82:	2b2a      	cmp	r3, #42	; 0x2a
 8000c84:	d121      	bne.n	8000cca <main+0x14e>
			if (!strcmp(pass, nice)){
 8000c86:	f107 0210 	add.w	r2, r7, #16
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fab4 	bl	80001fc <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <main+0x124>
				lcd_nice();
 8000c9a:	f7ff fd61 	bl	8000760 <lcd_nice>
 8000c9e:	e00e      	b.n	8000cbe <main+0x142>
			}
			else if (!strcmp(pass, real_password)) {
 8000ca0:	f107 0218 	add.w	r2, r7, #24
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff faa7 	bl	80001fc <strcmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <main+0x13e>
			     lcd_correct_pass();
 8000cb4:	f7ff fd28 	bl	8000708 <lcd_correct_pass>
 8000cb8:	e001      	b.n	8000cbe <main+0x142>
			} else {
			     lcd_incorrect_pass();
 8000cba:	f7ff fd3f 	bl	800073c <lcd_incorrect_pass>
			}
			pass[0] = '\0';
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 8000cc6:	f7ff fc75 	bl	80005b4 <lcd_init>
		}
		if (strlen(pass) >= 10){
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fa9f 	bl	8000210 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	d99a      	bls.n	8000c0e <main+0x92>
			lcd_incorrect_pass();
 8000cd8:	f7ff fd30 	bl	800073c <lcd_incorrect_pass>
			pass[0] = '\0';
 8000cdc:	2300      	movs	r3, #0
 8000cde:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 8000ce4:	f7ff fc66 	bl	80005b4 <lcd_init>
  {
 8000ce8:	e791      	b.n	8000c0e <main+0x92>
 8000cea:	bf00      	nop
 8000cec:	20000260 	.word	0x20000260
 8000cf0:	200001cc 	.word	0x200001cc
 8000cf4:	08008a38 	.word	0x08008a38
 8000cf8:	20000180 	.word	0x20000180
 8000cfc:	20000000 	.word	0x20000000

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b096      	sub	sp, #88	; 0x58
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2244      	movs	r2, #68	; 0x44
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 fe36 	bl	8008980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d26:	f001 ff7f 	bl	8002c28 <HAL_PWREx_ControlVoltageScaling>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d30:	f000 fc08 	bl	8001544 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d34:	2310      	movs	r3, #16
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 f81f 	bl	8002d90 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d58:	f000 fbf4 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fc25 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d80:	f000 fbe0 	bl	8001544 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_I2C1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E50;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000d98:	f44f 6265 	mov.w	r2, #3664	; 0xe50
 8000d9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dca:	f001 fab1 	bl	8002330 <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f000 fbb6 	bl	8001544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000ddc:	f001 fe6c 	bl	8002ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000de6:	f000 fbad 	bl	8001544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dee:	f001 feae 	bl	8002b4e <HAL_I2CEx_ConfigDigitalFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 fba4 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000002c 	.word	0x2000002c
 8000e04:	40005400 	.word	0x40005400

08000e08 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <MX_I2C2_SMBUS_Init+0x80>)
 8000e10:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00000E14;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e14:	f640 6214 	movw	r2, #3604	; 0xe14
 8000e18:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008030;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e58:	f248 0230 	movw	r2, #32816	; 0x8030
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e60:	f003 fb86 	bl	8004570 <HAL_SMBUS_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C2_SMBUS_Init+0x66>
  {
    Error_Handler();
 8000e6a:	f000 fb6b 	bl	8001544 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_I2C2_SMBUS_Init+0x7c>)
 8000e70:	f003 fc36 	bl	80046e0 <HAL_SMBUS_EnableAlert_IT>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C2_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000e7a:	f000 fb63 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000080 	.word	0x20000080
 8000e88:	40005800 	.word	0x40005800

08000e8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_SPI1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ea6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ebe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_SPI1_Init+0x74>)
 8000eec:	f003 fc4b 	bl	8004786 <HAL_SPI_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fb25 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000d0 	.word	0x200000d0
 8000f04:	40013000 	.word	0x40013000

08000f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	615a      	str	r2, [r3, #20]
 8000f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f44:	2227      	movs	r2, #39	; 0x27
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f62:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f64:	f004 fb3c 	bl	80055e0 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f6e:	f000 fae9 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f80:	f004 fedc 	bl	8005d3c <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f8a:	f000 fadb 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000f90:	f004 fb7d 	bl	800568e <HAL_TIM_OC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f9a:	f000 fad3 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000fae:	f005 fbbf 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fb8:	f000 fac4 	bl	8001544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 8000fc0:	2396      	movs	r3, #150	; 0x96
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000fd4:	f004 fd24 	bl	8005a20 <HAL_TIM_OC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fde:	f000 fab1 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <MX_TIM2_Init+0xe8>)
 8000fe4:	f000 fc4e 	bl	8001884 <HAL_TIM_MspPostInit>

}
 8000fe8:	bf00      	nop
 8000fea:	3738      	adds	r7, #56	; 0x38
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000134 	.word	0x20000134

08000ff4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <MX_TIM4_Init+0xe8>)
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <MX_TIM4_Init+0xec>)
 800102a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_TIM4_Init+0xe8>)
 800102e:	2227      	movs	r2, #39	; 0x27
 8001030:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <MX_TIM4_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_TIM4_Init+0xe8>)
 800103a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800103e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_TIM4_Init+0xe8>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_TIM4_Init+0xe8>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800104c:	4823      	ldr	r0, [pc, #140]	; (80010dc <MX_TIM4_Init+0xe8>)
 800104e:	f004 fac7 	bl	80055e0 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001058:	f000 fa74 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001066:	4619      	mov	r1, r3
 8001068:	481c      	ldr	r0, [pc, #112]	; (80010dc <MX_TIM4_Init+0xe8>)
 800106a:	f004 fe67 	bl	8005d3c <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001074:	f000 fa66 	bl	8001544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <MX_TIM4_Init+0xe8>)
 800107a:	f004 fb69 	bl	8005750 <HAL_TIM_PWM_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001084:	f000 fa5e 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <MX_TIM4_Init+0xe8>)
 8001098:	f005 fb4a 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80010a2:	f000 fa4f 	bl	8001544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	; 0x60
 80010a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 80010aa:	2396      	movs	r3, #150	; 0x96
 80010ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	; (80010dc <MX_TIM4_Init+0xe8>)
 80010be:	f004 fd29 	bl	8005b14 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80010c8:	f000 fa3c 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <MX_TIM4_Init+0xe8>)
 80010ce:	f000 fbd9 	bl	8001884 <HAL_TIM_MspPostInit>

}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	; 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000180 	.word	0x20000180
 80010e0:	40000800 	.word	0x40000800

080010e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_USART3_UART_Init+0x98>)
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <MX_USART3_UART_Init+0x9c>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010ee:	4b23      	ldr	r3, [pc, #140]	; (800117c <MX_USART3_UART_Init+0x98>)
 80010f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_USART3_UART_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_USART3_UART_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_USART3_UART_Init+0x98>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_USART3_UART_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001128:	2208      	movs	r2, #8
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_USART3_UART_Init+0x98>)
 800112e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001136:	f005 fb83 	bl	8006840 <HAL_UART_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 8001140:	f000 fa00 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_USART3_UART_Init+0x98>)
 8001148:	f007 fb4f 	bl	80087ea <HAL_UARTEx_SetTxFifoThreshold>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART3_UART_Init+0x72>
  {
    Error_Handler();
 8001152:	f000 f9f7 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <MX_USART3_UART_Init+0x98>)
 800115a:	f007 fb84 	bl	8008866 <HAL_UARTEx_SetRxFifoThreshold>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART3_UART_Init+0x84>
  {
    Error_Handler();
 8001164:	f000 f9ee 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_USART3_UART_Init+0x98>)
 800116a:	f007 fb05 	bl	8008778 <HAL_UARTEx_DisableFifoMode>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART3_UART_Init+0x94>
  {
    Error_Handler();
 8001174:	f000 f9e6 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001cc 	.word	0x200001cc
 8001180:	40004800 	.word	0x40004800

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4bb3      	ldr	r3, [pc, #716]	; (8001468 <MX_GPIO_Init+0x2e4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4ab2      	ldr	r2, [pc, #712]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4bb0      	ldr	r3, [pc, #704]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4bad      	ldr	r3, [pc, #692]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4aac      	ldr	r2, [pc, #688]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4baa      	ldr	r3, [pc, #680]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	4ba7      	ldr	r3, [pc, #668]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4aa6      	ldr	r2, [pc, #664]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4ba4      	ldr	r3, [pc, #656]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4ba1      	ldr	r3, [pc, #644]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4aa0      	ldr	r2, [pc, #640]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b9e      	ldr	r3, [pc, #632]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b9b      	ldr	r3, [pc, #620]	; (8001468 <MX_GPIO_Init+0x2e4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a9a      	ldr	r2, [pc, #616]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b98      	ldr	r3, [pc, #608]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a94      	ldr	r2, [pc, #592]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b92      	ldr	r3, [pc, #584]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <MX_GPIO_Init+0x2e4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a8e      	ldr	r2, [pc, #568]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a88      	ldr	r2, [pc, #544]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b86      	ldr	r3, [pc, #536]	; (8001468 <MX_GPIO_Init+0x2e4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800125a:	f001 fd89 	bl	8002d70 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f001 f84a 	bl	8002300 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126c:	230c      	movs	r3, #12
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800127c:	230d      	movs	r3, #13
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4879      	ldr	r0, [pc, #484]	; (800146c <MX_GPIO_Init+0x2e8>)
 8001288:	f000 fe90 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800129c:	230d      	movs	r3, #13
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4872      	ldr	r0, [pc, #456]	; (8001470 <MX_GPIO_Init+0x2ec>)
 80012a8:	f000 fe80 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012ac:	233f      	movs	r3, #63	; 0x3f
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012b0:	230b      	movs	r3, #11
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	486d      	ldr	r0, [pc, #436]	; (8001474 <MX_GPIO_Init+0x2f0>)
 80012c0:	f000 fe74 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012c4:	230f      	movs	r3, #15
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f000 fe67 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012de:	23f0      	movs	r3, #240	; 0xf0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e2:	2311      	movs	r3, #17
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fe58 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800130c:	2302      	movs	r3, #2
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4858      	ldr	r0, [pc, #352]	; (8001478 <MX_GPIO_Init+0x2f4>)
 8001318:	f000 fe48 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131c:	2302      	movs	r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001320:	230b      	movs	r3, #11
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4852      	ldr	r0, [pc, #328]	; (8001478 <MX_GPIO_Init+0x2f4>)
 8001330:	f000 fe3c 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001334:	2344      	movs	r3, #68	; 0x44
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001338:	2303      	movs	r3, #3
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	484c      	ldr	r0, [pc, #304]	; (8001478 <MX_GPIO_Init+0x2f4>)
 8001348:	f000 fe30 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800134c:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800135e:	2301      	movs	r3, #1
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4840      	ldr	r0, [pc, #256]	; (800146c <MX_GPIO_Init+0x2e8>)
 800136a:	f000 fe1f 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800136e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001380:	230d      	movs	r3, #13
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	483b      	ldr	r0, [pc, #236]	; (8001478 <MX_GPIO_Init+0x2f4>)
 800138c:	f000 fe0e 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80013a2:	230e      	movs	r3, #14
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <MX_GPIO_Init+0x2f4>)
 80013ae:	f000 fdfd 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013c4:	2308      	movs	r3, #8
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	482b      	ldr	r0, [pc, #172]	; (800147c <MX_GPIO_Init+0x2f8>)
 80013d0:	f000 fdec 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80013e4:	230d      	movs	r3, #13
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4821      	ldr	r0, [pc, #132]	; (8001474 <MX_GPIO_Init+0x2f0>)
 80013f0:	f000 fddc 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001404:	2302      	movs	r3, #2
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4819      	ldr	r0, [pc, #100]	; (8001474 <MX_GPIO_Init+0x2f0>)
 8001410:	f000 fdcc 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001414:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001426:	230c      	movs	r3, #12
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <MX_GPIO_Init+0x2f0>)
 8001432:	f000 fdbb 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f000 fdab 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001464:	e00c      	b.n	8001480 <MX_GPIO_Init+0x2fc>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	48001000 	.word	0x48001000
 8001470:	48001400 	.word	0x48001400
 8001474:	48000800 	.word	0x48000800
 8001478:	48000400 	.word	0x48000400
 800147c:	48001800 	.word	0x48001800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f000 fd8f 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a0:	230a      	movs	r3, #10
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f000 fd7d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014c2:	2309      	movs	r3, #9
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <MX_GPIO_Init+0x3b8>)
 80014ce:	f000 fd6d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014e2:	230c      	movs	r3, #12
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0x3b8>)
 80014ee:	f000 fd5d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014f2:	2378      	movs	r3, #120	; 0x78
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <MX_GPIO_Init+0x3b8>)
 800150e:	f000 fd4d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001512:	2338      	movs	r3, #56	; 0x38
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001522:	2306      	movs	r3, #6
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_GPIO_Init+0x3bc>)
 800152e:	f000 fd3d 	bl	8001fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	48000c00 	.word	0x48000c00
 8001540:	48000400 	.word	0x48000400

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x44>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x44>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6613      	str	r3, [r2, #96]	; 0x60
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x44>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0ae      	sub	sp, #184	; 0xb8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2294      	movs	r2, #148	; 0x94
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 f9df 	bl	8008980 <memset>
  if(hi2c->Instance==I2C1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <HAL_I2C_MspInit+0xb0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d13b      	bne.n	8001644 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fab1 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015e4:	f7ff ffae 	bl	8001544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161a:	2304      	movs	r3, #4
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_I2C_MspInit+0xb8>)
 8001628:	f000 fcc0 	bl	8001fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001636:	6593      	str	r3, [r2, #88]	; 0x58
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_I2C_MspInit+0xb4>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	37b8      	adds	r7, #184	; 0xb8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400

08001658 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0ae      	sub	sp, #184	; 0xb8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2294      	movs	r2, #148	; 0x94
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f007 f981 	bl	8008980 <memset>
  if(hsmbus->Instance==I2C2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_SMBUS_MspInit+0xb0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13a      	bne.n	80016fe <HAL_SMBUS_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fa53 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff ff50 	bl	8001544 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016aa:	f043 0320 	orr.w	r3, r3, #32
 80016ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <HAL_SMBUS_MspInit+0xb8>)
 80016e2:	f000 fc63 	bl	8001fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_SMBUS_MspInit+0xb4>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37b8      	adds	r7, #184	; 0xb8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40005800 	.word	0x40005800
 800170c:	40021000 	.word	0x40021000
 8001710:	48001400 	.word	0x48001400

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_SPI_MspInit+0x7c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d128      	bne.n	8001788 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_SPI_MspInit+0x80>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_SPI_MspInit+0x80>)
 800173c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001740:	6613      	str	r3, [r2, #96]	; 0x60
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_SPI_MspInit+0x80>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_SPI_MspInit+0x80>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_SPI_MspInit+0x80>)
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_SPI_MspInit+0x80>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001766:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001778:	2305      	movs	r3, #5
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_SPI_MspInit+0x84>)
 8001784:	f000 fc12 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013000 	.word	0x40013000
 8001794:	40021000 	.word	0x40021000
 8001798:	48001000 	.word	0x48001000

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d10c      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017d6:	e049      	b.n	800186c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_TIM_Base_MspInit+0xdc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d144      	bne.n	800186c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800182a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800183c:	2302      	movs	r3, #2
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <HAL_TIM_Base_MspInit+0xe0>)
 8001848:	f000 fbb0 	bl	8001fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800185c:	2302      	movs	r3, #2
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <HAL_TIM_Base_MspInit+0xe4>)
 8001868:	f000 fba0 	bl	8001fac <HAL_GPIO_Init>
}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40000800 	.word	0x40000800
 800187c:	48000c00 	.word	0x48000c00
 8001880:	48001000 	.word	0x48001000

08001884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a4:	d11d      	bne.n	80018e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <HAL_TIM_MspPostInit+0xac>)
 80018dc:	f000 fb66 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018e0:	e020      	b.n	8001924 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d11b      	bne.n	8001924 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_TIM_MspPostInit+0xa8>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001914:	2302      	movs	r3, #2
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <HAL_TIM_MspPostInit+0xac>)
 8001920:	f000 fb44 	bl	8001fac <HAL_GPIO_Init>
}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400
 8001934:	40000800 	.word	0x40000800

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ae      	sub	sp, #184	; 0xb8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2294      	movs	r2, #148	; 0x94
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f007 f811 	bl	8008980 <memset>
  if(huart->Instance==USART3)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_UART_MspInit+0xc0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d143      	bne.n	80019f0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001968:	2304      	movs	r3, #4
 800196a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f002 f8e3 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001980:	f7ff fde0 	bl	8001544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_UART_MspInit+0xc4>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <HAL_UART_MspInit+0xc4>)
 800198a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198e:	6593      	str	r3, [r2, #88]	; 0x58
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xc4>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_UART_MspInit+0xc4>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_UART_MspInit+0xc4>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_UART_MspInit+0xc4>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ce:	2307      	movs	r3, #7
 80019d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d8:	4619      	mov	r1, r3
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_UART_MspInit+0xc8>)
 80019dc:	f000 fae6 	bl	8001fac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2105      	movs	r1, #5
 80019e4:	2027      	movs	r0, #39	; 0x27
 80019e6:	f000 f9f0 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ea:	2027      	movs	r0, #39	; 0x27
 80019ec:	f000 fa09 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	37b8      	adds	r7, #184	; 0xb8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40004800 	.word	0x40004800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000c00 	.word	0x48000c00

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 f89c 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <USART3_IRQHandler+0x10>)
 8001a5e:	f004 ff8b 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001cc 	.word	0x200001cc

08001a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a94:	f7ff ffea 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <LoopForever+0xe>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	; (8001adc <LoopForever+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f006 ff67 	bl	8008990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac2:	f7ff f85b 	bl	8000b7c <main>

08001ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ac6:	e7fe      	b.n	8001ac6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ad4:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 8001ad8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001adc:	200002c8 	.word	0x200002c8

08001ae0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC1_IRQHandler>

08001ae2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f961 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f80e 	bl	8001b14 <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	e001      	b.n	8001b08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b04:	f7ff fd26 	bl	8001554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_InitTick+0x6c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d023      	beq.n	8001b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_InitTick+0x70>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_InitTick+0x6c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f96d 	bl	8001e1e <HAL_SYSTICK_Config>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d809      	bhi.n	8001b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f937 	bl	8001dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_InitTick+0x74>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e004      	b.n	8001b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e001      	b.n	8001b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000004 	.word	0x20000004
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	200002c4 	.word	0x200002c4

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200002c4 	.word	0x200002c4

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff3e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff31 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d008      	beq.n	8001e60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e040      	b.n	8001ee2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020e 	bic.w	r2, r2, #14
 8001e6e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e7e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f003 021c 	and.w	r2, r3, #28
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ece:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d005      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e047      	b.n	8001fa2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f003 021c 	and.w	r2, r3, #28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f80:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
    }
  }
  return status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	e166      	b.n	800228a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8158 	beq.w	8002284 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x40>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	6939      	ldr	r1, [r7, #16]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80b2 	beq.w	8002284 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6613      	str	r3, [r2, #96]	; 0x60
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002138:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_GPIO_Init+0x300>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002162:	d02b      	beq.n	80021bc <HAL_GPIO_Init+0x210>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d025      	beq.n	80021b8 <HAL_GPIO_Init+0x20c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x308>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d01f      	beq.n	80021b4 <HAL_GPIO_Init+0x208>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d019      	beq.n	80021b0 <HAL_GPIO_Init+0x204>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x310>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_GPIO_Init+0x200>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x314>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_GPIO_Init+0x1fc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x318>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x1f8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x31c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_Init+0x1f4>
 800219c:	2307      	movs	r3, #7
 800219e:	e00e      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a0:	2308      	movs	r3, #8
 80021a2:	e00c      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a4:	2306      	movs	r3, #6
 80021a6:	e00a      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a8:	2305      	movs	r3, #5
 80021aa:	e008      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e006      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e004      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021bc:	2300      	movs	r3, #0
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	f002 0203 	and.w	r2, r2, #3
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	4093      	lsls	r3, r2
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ce:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_GPIO_Init+0x300>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_GPIO_Init+0x320>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002200:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <HAL_GPIO_Init+0x320>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_GPIO_Init+0x320>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f ae91 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	48000c00 	.word	0x48000c00
 80022bc:	48001000 	.word	0x48001000
 80022c0:	48001400 	.word	0x48001400
 80022c4:	48001800 	.word	0x48001800
 80022c8:	48001c00 	.word	0x48001c00
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800231c:	e002      	b.n	8002324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e08d      	b.n	800245e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff f920 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	e006      	b.n	80023b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d108      	bne.n	80023d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	e007      	b.n	80023e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	461a      	mov	r2, r3
 8002474:	460b      	mov	r3, r1
 8002476:	817b      	strh	r3, [r7, #10]
 8002478:	4613      	mov	r3, r2
 800247a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 80fd 	bne.w	8002684 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_I2C_Master_Transmit+0x30>
 8002494:	2302      	movs	r3, #2
 8002496:	e0f6      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a0:	f7ff fb88 	bl	8001bb4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2319      	movs	r3, #25
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f914 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0e1      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2210      	movs	r2, #16
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2bff      	cmp	r3, #255	; 0xff
 80024f2:	d906      	bls.n	8002502 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22ff      	movs	r2, #255	; 0xff
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80024fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e007      	b.n	8002512 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800250c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002510:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_I2C_Master_Transmit+0x228>)
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fa79 	bl	8002a54 <I2C_TransferConfig>
 8002562:	e066      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	b2da      	uxtb	r2, r3
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_I2C_Master_Transmit+0x228>)
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fa6e 	bl	8002a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002578:	e05b      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f8fd 	bl	800277e <I2C_WaitOnTXISFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07b      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d034      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x1ca>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d130      	bne.n	8002632 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f880 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e04d      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2bff      	cmp	r3, #255	; 0xff
 80025f2:	d90e      	bls.n	8002612 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fa22 	bl	8002a54 <I2C_TransferConfig>
 8002610:	e00f      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	b2da      	uxtb	r2, r3
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	2300      	movs	r3, #0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fa11 	bl	8002a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d19e      	bne.n	800257a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	6a39      	ldr	r1, [r7, #32]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8e3 	bl	800280c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e01a      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2220      	movs	r2, #32
 8002656:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_I2C_Master_Transmit+0x22c>)
 8002664:	400b      	ands	r3, r1
 8002666:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	80002000 	.word	0x80002000
 8002694:	fe00e800 	.word	0xfe00e800

08002698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d007      	beq.n	80026d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	619a      	str	r2, [r3, #24]
  }
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e031      	b.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d02d      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7ff fa5b 	bl	8001bb4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d122      	bne.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	429a      	cmp	r2, r3
 800272c:	d113      	bne.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	429a      	cmp	r2, r3
 8002772:	d0be      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800278a:	e033      	b.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f87f 	bl	8002894 <I2C_IsErrorOccurred>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e031      	b.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d025      	beq.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a8:	f7ff fa04 	bl	8001bb4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d302      	bcc.n	80027be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d11a      	bne.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d013      	beq.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d1c4      	bne.n	800278c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002818:	e02f      	b.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f838 	bl	8002894 <I2C_IsErrorOccurred>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e02d      	b.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff f9c1 	bl	8001bb4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11a      	bne.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d013      	beq.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b20      	cmp	r3, #32
 8002886:	d1c8      	bne.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d068      	beq.n	8002992 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028c8:	e049      	b.n	800295e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d045      	beq.n	800295e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7ff f96f 	bl	8001bb4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_IsErrorOccurred+0x54>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d13a      	bne.n	800295e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d121      	bne.n	8002950 <I2C_IsErrorOccurred+0xbc>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002912:	d01d      	beq.n	8002950 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	2b20      	cmp	r3, #32
 8002918:	d01a      	beq.n	8002950 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800292a:	f7ff f943 	bl	8001bb4 <HAL_GetTick>
 800292e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002930:	e00e      	b.n	8002950 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002932:	f7ff f93f 	bl	8001bb4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b19      	cmp	r3, #25
 800293e:	d907      	bls.n	8002950 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800294e:	e006      	b.n	800295e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d1e9      	bne.n	8002932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b20      	cmp	r3, #32
 800296a:	d003      	beq.n	8002974 <I2C_IsErrorOccurred+0xe0>
 800296c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0aa      	beq.n	80028ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01c      	beq.n	8002a42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fe45 	bl	8002698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <I2C_IsErrorOccurred+0x1bc>)
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	fe00e800 	.word	0xfe00e800

08002a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	4613      	mov	r3, r2
 8002a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a6c:	7a7b      	ldrb	r3, [r7, #9]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	0d5b      	lsrs	r3, r3, #21
 8002a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <I2C_TransferConfig+0x60>)
 8002a94:	430b      	orrs	r3, r1
 8002a96:	43db      	mvns	r3, r3
 8002a98:	ea02 0103 	and.w	r1, r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	03ff63ff 	.word	0x03ff63ff

08002ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d138      	bne.n	8002b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e032      	b.n	8002b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e000      	b.n	8002b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d139      	bne.n	8002bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e033      	b.n	8002bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2224      	movs	r2, #36	; 0x24
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d102      	bne.n	8002c00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bfe:	e00b      	b.n	8002c18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	d102      	bne.n	8002c16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	e000      	b.n	8002c18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40007000 	.word	0x40007000

08002c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d141      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c36:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d131      	bne.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5c:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7a:	e002      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d102      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f2      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d158      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e057      	b.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cae:	4a2d      	ldr	r2, [pc, #180]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cb8:	e04d      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d141      	bne.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d131      	bne.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ce8:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2232      	movs	r2, #50	; 0x32
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d06:	e002      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d102      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d112      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e011      	b.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d44:	e007      	b.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40007000 	.word	0x40007000
 8002d68:	20000004 	.word	0x20000004
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7e:	6053      	str	r3, [r2, #4]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f000 bc08 	b.w	80035b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da4:	4b96      	ldr	r3, [pc, #600]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dae:	4b94      	ldr	r3, [pc, #592]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80e4 	beq.w	8002f8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4c>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	f040 808b 	bne.w	8002eea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	f040 8087 	bne.w	8002eea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ddc:	4b88      	ldr	r3, [pc, #544]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x64>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e3df      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	4b81      	ldr	r3, [pc, #516]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_RCC_OscConfig+0x7e>
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	e005      	b.n	8002e1a <HAL_RCC_OscConfig+0x8a>
 8002e0e:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d223      	bcs.n	8002e66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fdcc 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e3c0      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e32:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a72      	ldr	r2, [pc, #456]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	496d      	ldr	r1, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e50:	4b6b      	ldr	r3, [pc, #428]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	4968      	ldr	r1, [pc, #416]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e025      	b.n	8002eb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e66:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4960      	ldr	r1, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e84:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	495b      	ldr	r1, [pc, #364]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd8c 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e380      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb2:	f000 fcc1 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b51      	ldr	r3, [pc, #324]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4950      	ldr	r1, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0x278>)
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fe1c 	bl	8001b14 <HAL_InitTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d052      	beq.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	e364      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d032      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efe:	f7fe fe59 	bl	8001bb4 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f06:	f7fe fe55 	bl	8001bb4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e34d      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a35      	ldr	r2, [pc, #212]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4930      	ldr	r1, [pc, #192]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	492b      	ldr	r1, [pc, #172]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	e01a      	b.n	8002f8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a28      	ldr	r2, [pc, #160]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fe26 	bl	8001bb4 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fe22 	bl	8001bb4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e31a      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1dc>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d073      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x21c>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d063      	beq.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d15f      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e2f7      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x24c>
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e025      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d114      	bne.n	8003010 <HAL_RCC_OscConfig+0x280>
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8003000:	40021000 	.word	0x40021000
 8003004:	08008a40 	.word	0x08008a40
 8003008:	20000004 	.word	0x20000004
 800300c:	20000008 	.word	0x20000008
 8003010:	4ba0      	ldr	r3, [pc, #640]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a9f      	ldr	r2, [pc, #636]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b9d      	ldr	r3, [pc, #628]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a9c      	ldr	r2, [pc, #624]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fdc0 	bl	8001bb4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fdbc 	bl	8001bb4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e2b4      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2a8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fdac 	bl	8001bb4 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe fda8 	bl	8001bb4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e2a0      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d0>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d060      	beq.n	8003150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x310>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d119      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d116      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x328>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e27d      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4973      	ldr	r1, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	e040      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d023      	beq.n	800311e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fd67 	bl	8001bb4 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fe fd63 	bl	8001bb4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e25b      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	495f      	ldr	r1, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e018      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe fd43 	bl	8001bb4 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003132:	f7fe fd3f 	bl	8001bb4 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e237      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd1e 	bl	8001bb4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fd1a 	bl	8001bb4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e212      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x3ec>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fd01 	bl	8001bb4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fcfd 	bl	8001bb4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1f5      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80a6 	beq.w	8003330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fe fcc4 	bl	8001bb4 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe fcc0 	bl	8001bb4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1b8      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x4d8>
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	e029      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d115      	bne.n	800329c <HAL_RCC_OscConfig+0x50c>
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	4b9d      	ldr	r3, [pc, #628]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	4a9c      	ldr	r2, [pc, #624]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ac:	4b99      	ldr	r3, [pc, #612]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a98      	ldr	r2, [pc, #608]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fc76 	bl	8001bb4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fc72 	bl	8001bb4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e168      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b8c      	ldr	r3, [pc, #560]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ed      	beq.n	80032cc <HAL_RCC_OscConfig+0x53c>
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fe fc5f 	bl	8001bb4 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe fc5b 	bl	8001bb4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e151      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003310:	4b80      	ldr	r3, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ed      	bne.n	80032fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a7a      	ldr	r2, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d03c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01c      	beq.n	800337e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003344:	4b73      	ldr	r3, [pc, #460]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334a:	4a72      	ldr	r2, [pc, #456]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fc2e 	bl	8001bb4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335c:	f7fe fc2a 	bl	8001bb4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e122      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336e:	4b69      	ldr	r3, [pc, #420]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ef      	beq.n	800335c <HAL_RCC_OscConfig+0x5cc>
 800337c:	e01b      	b.n	80033b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fe fc11 	bl	8001bb4 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003396:	f7fe fc0d 	bl	8001bb4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e105      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a8:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80033aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ef      	bne.n	8003396 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80f9 	beq.w	80035b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f040 80cf 	bne.w	8003568 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0203 	and.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d12c      	bne.n	8003438 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	3b01      	subs	r3, #1
 80033ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d123      	bne.n	8003438 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d11b      	bne.n	8003438 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d113      	bne.n	8003438 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d109      	bne.n	8003438 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	3b01      	subs	r3, #1
 8003432:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d071      	beq.n	800351c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d068      	beq.n	8003510 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800344a:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0ac      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2d      	ldr	r2, [pc, #180]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003464:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003466:	f7fe fba5 	bl	8001bb4 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fba1 	bl	8001bb4 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e099      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x788>)
 8003492:	4013      	ands	r3, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800349c:	3a01      	subs	r2, #1
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a6:	0212      	lsls	r2, r2, #8
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ae:	0852      	lsrs	r2, r2, #1
 80034b0:	3a01      	subs	r2, #1
 80034b2:	0552      	lsls	r2, r2, #21
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0652      	lsls	r2, r2, #25
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c6:	06d2      	lsls	r2, r2, #27
 80034c8:	430a      	orrs	r2, r1
 80034ca:	4912      	ldr	r1, [pc, #72]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e8:	f7fe fb64 	bl	8001bb4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe fb60 	bl	8001bb4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e058      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350e:	e050      	b.n	80035b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e04f      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
 8003514:	40021000 	.word	0x40021000
 8003518:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d144      	bne.n	80035b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a23      	ldr	r2, [pc, #140]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003540:	f7fe fb38 	bl	8001bb4 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fb34 	bl	8001bb4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e02c      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x7b8>
 8003566:	e024      	b.n	80035b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d01f      	beq.n	80035ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 8003574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe fb1b 	bl	8001bb4 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe fb17 	bl	8001bb4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e00f      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	4905      	ldr	r1, [pc, #20]	; (80035bc <HAL_RCC_OscConfig+0x82c>)
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_OscConfig+0x830>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60cb      	str	r3, [r1, #12]
 80035ac:	e001      	b.n	80035b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	feeefffc 	.word	0xfeeefffc

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e11d      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b90      	ldr	r3, [pc, #576]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d910      	bls.n	800360c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 020f 	bic.w	r2, r3, #15
 80035f2:	498b      	ldr	r1, [pc, #556]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e105      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003624:	429a      	cmp	r2, r3
 8003626:	d908      	bls.n	800363a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b7e      	ldr	r3, [pc, #504]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	497b      	ldr	r1, [pc, #492]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d079      	beq.n	800373a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d11e      	bne.n	800368c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	4b75      	ldr	r3, [pc, #468]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0dc      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800365e:	f000 fa09 	bl	8003a74 <RCC_GetSysClockFreqFromPLLSource>
 8003662:	4603      	mov	r3, r0
 8003664:	4a70      	ldr	r2, [pc, #448]	; (8003828 <HAL_RCC_ClockConfig+0x264>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d946      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800366a:	4b6e      	ldr	r3, [pc, #440]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d140      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003676:	4b6b      	ldr	r3, [pc, #428]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e035      	b.n	80036f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003694:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d115      	bne.n	80036cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b9      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ac:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0ad      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0a5      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80036cc:	f000 f8b4 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a55      	ldr	r2, [pc, #340]	; (8003828 <HAL_RCC_ClockConfig+0x264>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d90f      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036d8:	4b52      	ldr	r3, [pc, #328]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ec:	4a4d      	ldr	r2, [pc, #308]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f8:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 0203 	bic.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4947      	ldr	r1, [pc, #284]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370a:	f7fe fa53 	bl	8001bb4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003710:	e00a      	b.n	8003728 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003712:	f7fe fa4f 	bl	8001bb4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e077      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003728:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 020c 	and.w	r2, r3, #12
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	429a      	cmp	r2, r3
 8003738:	d1eb      	bne.n	8003712 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d105      	bne.n	800374c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003740:	4b38      	ldr	r3, [pc, #224]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a37      	ldr	r2, [pc, #220]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	429a      	cmp	r2, r3
 8003766:	d208      	bcs.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	492b      	ldr	r1, [pc, #172]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d210      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 020f 	bic.w	r2, r3, #15
 8003790:	4923      	ldr	r1, [pc, #140]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_ClockConfig+0x25c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e036      	b.n	8003818 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4910      	ldr	r1, [pc, #64]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e8:	f000 f826 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_RCC_ClockConfig+0x260>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	490c      	ldr	r1, [pc, #48]	; (800382c <HAL_RCC_ClockConfig+0x268>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x26c>)
 8003806:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCC_ClockConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe f981 	bl	8001b14 <HAL_InitTick>
 8003812:	4603      	mov	r3, r0
 8003814:	73fb      	strb	r3, [r7, #15]

  return status;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
 8003828:	04c4b400 	.word	0x04c4b400
 800382c:	08008a40 	.word	0x08008a40
 8003830:	20000004 	.word	0x20000004
 8003834:	20000008 	.word	0x20000008

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003850:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x34>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d121      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d11e      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800386c:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e005      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_GetSysClockFreq+0x110>)
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e004      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038bc:	4b23      	ldr	r3, [pc, #140]	; (800394c <HAL_RCC_GetSysClockFreq+0x114>)
 80038be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d134      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038c6:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d003      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0xa6>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d003      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0xac>
 80038dc:	e005      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038de:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <HAL_RCC_GetSysClockFreq+0x110>)
 80038e0:	617b      	str	r3, [r7, #20]
      break;
 80038e2:	e005      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_GetSysClockFreq+0x114>)
 80038e6:	617b      	str	r3, [r7, #20]
      break;
 80038e8:	e002      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	617b      	str	r3, [r7, #20]
      break;
 80038ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3301      	adds	r3, #1
 80038fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	fb03 f202 	mul.w	r2, r3, r2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_GetSysClockFreq+0x108>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	0e5b      	lsrs	r3, r3, #25
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	3301      	adds	r3, #1
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003930:	69bb      	ldr	r3, [r7, #24]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	08008a58 	.word	0x08008a58
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200

08003950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08008a50 	.word	0x08008a50

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003998:	f7ff ffda 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0adb      	lsrs	r3, r3, #11
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4904      	ldr	r1, [pc, #16]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08008a50 	.word	0x08008a50

080039c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d8:	f7ff f906 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 80039dc:	6178      	str	r0, [r7, #20]
 80039de:	e014      	b.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f8:	f7ff f8f6 	bl	8002be8 <HAL_PWREx_GetVoltageRange>
 80039fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a10:	d10b      	bne.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d913      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a1c:	d902      	bls.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1e:	2302      	movs	r3, #2
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e00d      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a24:	2301      	movs	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e00a      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a2e:	d902      	bls.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a30:	2302      	movs	r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e004      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d101      	bne.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 020f 	bic.w	r2, r3, #15
 8003a48:	4909      	ldr	r1, [pc, #36]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40022000 	.word	0x40022000

08003a74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d00b      	beq.n	8003aa2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d825      	bhi.n	8003adc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d008      	beq.n	8003aa8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d11f      	bne.n	8003adc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a9e:	613b      	str	r3, [r7, #16]
    break;
 8003aa0:	e01f      	b.n	8003ae2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003aa4:	613b      	str	r3, [r7, #16]
    break;
 8003aa6:	e01c      	b.n	8003ae2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e005      	b.n	8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad8:	613b      	str	r3, [r7, #16]
    break;
 8003ada:	e002      	b.n	8003ae2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
    break;
 8003ae0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	3301      	adds	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	fb03 f202 	mul.w	r2, r3, r2
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0e5b      	lsrs	r3, r3, #25
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b22:	683b      	ldr	r3, [r7, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	08008a58 	.word	0x08008a58

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d040      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d02a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d825      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d026      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b6c:	2b60      	cmp	r3, #96	; 0x60
 8003b6e:	d821      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d006      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d81d      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b80:	e018      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b82:	4b89      	ldr	r3, [pc, #548]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a88      	ldr	r2, [pc, #544]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8e:	e015      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb02 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba0:	e00c      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3320      	adds	r3, #32
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fbed 	bl	8004388 <RCCEx_PLLSAI2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb2:	e003      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc2:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	4975      	ldr	r1, [pc, #468]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bd8:	e001      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d047      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	d030      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d82a      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d02a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c04:	d824      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c10:	d81e      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c1c:	e018      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c1e:	4b62      	ldr	r3, [pc, #392]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a61      	ldr	r2, [pc, #388]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2a:	e015      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fab4 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3320      	adds	r3, #32
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fb9f 	bl	8004388 <RCCEx_PLLSAI2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	74fb      	strb	r3, [r7, #19]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c5e:	4b52      	ldr	r3, [pc, #328]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	494e      	ldr	r1, [pc, #312]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 809f 	beq.w	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	4a40      	ldr	r2, [pc, #256]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
 8003cae:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3a      	ldr	r2, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cca:	f7fd ff73 	bl	8001bb4 <HAL_GetTick>
 8003cce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fd ff6f 	bl	8001bb4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d902      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ef      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d15b      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d02:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01f      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d019      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd ff2e 	bl	8001bb4 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd ff2a 	bl	8001bb4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d902      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	74fb      	strb	r3, [r7, #19]
            break;
 8003d72:	e006      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ec      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	74bb      	strb	r3, [r7, #18]
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db4:	7c7b      	ldrb	r3, [r7, #17]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dba:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	4a9f      	ldr	r2, [pc, #636]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd2:	4b9a      	ldr	r3, [pc, #616]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f023 0203 	bic.w	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	4996      	ldr	r1, [pc, #600]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df4:	4b91      	ldr	r3, [pc, #580]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 020c 	bic.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	498e      	ldr	r1, [pc, #568]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e16:	4b89      	ldr	r3, [pc, #548]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	4985      	ldr	r1, [pc, #532]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e38:	4b80      	ldr	r3, [pc, #512]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	497d      	ldr	r1, [pc, #500]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e5a:	4b78      	ldr	r3, [pc, #480]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	4974      	ldr	r1, [pc, #464]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	496c      	ldr	r1, [pc, #432]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b67      	ldr	r3, [pc, #412]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eac:	4963      	ldr	r1, [pc, #396]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ece:	495b      	ldr	r1, [pc, #364]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee2:	4b56      	ldr	r3, [pc, #344]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	4952      	ldr	r1, [pc, #328]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f04:	4b4d      	ldr	r3, [pc, #308]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	494a      	ldr	r1, [pc, #296]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f26:	4b45      	ldr	r3, [pc, #276]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	4941      	ldr	r1, [pc, #260]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f48:	4b3c      	ldr	r3, [pc, #240]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4e:	f023 0203 	bic.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	4939      	ldr	r1, [pc, #228]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f6a:	4b34      	ldr	r3, [pc, #208]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	4930      	ldr	r1, [pc, #192]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8a:	4b2c      	ldr	r3, [pc, #176]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f94:	60d3      	str	r3, [r2, #12]
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f8f9 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04d      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd8:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fe2:	e012      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fea:	4a14      	ldr	r2, [pc, #80]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004012:	d106      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401e:	60d3      	str	r3, [r2, #12]
 8004020:	e020      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402a:	d109      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	e014      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f8a5 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d028      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004070:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407e:	4947      	ldr	r1, [pc, #284]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a41      	ldr	r2, [pc, #260]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
 800409c:	e011      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f876 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	492f      	ldr	r1, [pc, #188]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f851 	bl	80041a0 <RCCEx_PLLSAI1_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004118:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411e:	f023 0204 	bic.w	r2, r3, #4
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004128:	491c      	ldr	r1, [pc, #112]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004142:	f023 0218 	bic.w	r2, r3, #24
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	4913      	ldr	r1, [pc, #76]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004170:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004182:	d105      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004190:	7cbb      	ldrb	r3, [r7, #18]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000

080041a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ae:	4b72      	ldr	r3, [pc, #456]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041ba:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d103      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
       ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d142      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e03f      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d018      	beq.n	8004212 <RCCEx_PLLSAI1_Config+0x72>
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d825      	bhi.n	8004230 <RCCEx_PLLSAI1_Config+0x90>
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d002      	beq.n	80041ee <RCCEx_PLLSAI1_Config+0x4e>
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d009      	beq.n	8004200 <RCCEx_PLLSAI1_Config+0x60>
 80041ec:	e020      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ee:	4b62      	ldr	r3, [pc, #392]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11d      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fe:	e01a      	b.n	8004236 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004200:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004210:	e013      	b.n	800423a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004212:	4b59      	ldr	r3, [pc, #356]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800421e:	4b56      	ldr	r3, [pc, #344]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800422e:	e006      	b.n	800423e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      break;
 8004234:	e004      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800423e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004246:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4949      	ldr	r1, [pc, #292]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 8086 	bne.w	800436c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a44      	ldr	r2, [pc, #272]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fd fca2 	bl	8001bb4 <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004272:	e009      	b.n	8004288 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004274:	f7fd fc9e 	bl	8001bb4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
        break;
 8004286:	e005      	b.n	8004294 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004288:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ef      	bne.n	8004274 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d168      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d113      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	06d2      	lsls	r2, r2, #27
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6852      	ldr	r2, [r2, #4]
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	430a      	orrs	r2, r1
 80042c0:	492d      	ldr	r1, [pc, #180]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]
 80042c6:	e02d      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d115      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6892      	ldr	r2, [r2, #8]
 80042da:	0211      	lsls	r1, r2, #8
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6912      	ldr	r2, [r2, #16]
 80042e0:	0852      	lsrs	r2, r2, #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	0552      	lsls	r2, r2, #21
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6852      	ldr	r2, [r2, #4]
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	430a      	orrs	r2, r1
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
 80042f8:	e014      	b.n	8004324 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042fa:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	4b21      	ldr	r3, [pc, #132]	; (8004384 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6892      	ldr	r2, [r2, #8]
 8004306:	0211      	lsls	r1, r2, #8
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6952      	ldr	r2, [r2, #20]
 800430c:	0852      	lsrs	r2, r2, #1
 800430e:	3a01      	subs	r2, #1
 8004310:	0652      	lsls	r2, r2, #25
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6852      	ldr	r2, [r2, #4]
 8004318:	3a01      	subs	r2, #1
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	430a      	orrs	r2, r1
 800431e:	4916      	ldr	r1, [pc, #88]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a13      	ldr	r2, [pc, #76]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 800432a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fc40 	bl	8001bb4 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004336:	e009      	b.n	800434c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004338:	f7fd fc3c 	bl	8001bb4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	73fb      	strb	r3, [r7, #15]
          break;
 800434a:	e005      	b.n	8004358 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	4904      	ldr	r1, [pc, #16]	; (8004378 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	07ff800f 	.word	0x07ff800f
 8004380:	ff9f800f 	.word	0xff9f800f
 8004384:	f9ff800f 	.word	0xf9ff800f

08004388 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004396:	4b72      	ldr	r3, [pc, #456]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043a2:	4b6f      	ldr	r3, [pc, #444]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0203 	and.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d103      	bne.n	80043ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
       ||
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d142      	bne.n	8004440 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	e03f      	b.n	8004440 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d018      	beq.n	80043fa <RCCEx_PLLSAI2_Config+0x72>
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d825      	bhi.n	8004418 <RCCEx_PLLSAI2_Config+0x90>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d002      	beq.n	80043d6 <RCCEx_PLLSAI2_Config+0x4e>
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d009      	beq.n	80043e8 <RCCEx_PLLSAI2_Config+0x60>
 80043d4:	e020      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043d6:	4b62      	ldr	r3, [pc, #392]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d11d      	bne.n	800441e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e6:	e01a      	b.n	800441e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e8:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d116      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e013      	b.n	8004422 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043fa:	4b59      	ldr	r3, [pc, #356]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004406:	4b56      	ldr	r3, [pc, #344]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004416:	e006      	b.n	8004426 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e004      	b.n	8004428 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800441e:	bf00      	nop
 8004420:	e002      	b.n	8004428 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004426:	bf00      	nop
    }

    if(status == HAL_OK)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800442e:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f023 0203 	bic.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4949      	ldr	r1, [pc, #292]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443c:	4313      	orrs	r3, r2
 800443e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 8086 	bne.w	8004554 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004448:	4b45      	ldr	r3, [pc, #276]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a44      	ldr	r2, [pc, #272]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fd fbae 	bl	8001bb4 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445c:	f7fd fbaa 	bl	8001bb4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
        break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ef      	bne.n	800445c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d168      	bne.n	8004554 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <RCCEx_PLLSAI2_Config+0x1dc>)
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6892      	ldr	r2, [r2, #8]
 8004494:	0211      	lsls	r1, r2, #8
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	06d2      	lsls	r2, r2, #27
 800449c:	4311      	orrs	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6852      	ldr	r2, [r2, #4]
 80044a2:	3a01      	subs	r2, #1
 80044a4:	0112      	lsls	r2, r2, #4
 80044a6:	430a      	orrs	r2, r1
 80044a8:	492d      	ldr	r1, [pc, #180]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	614b      	str	r3, [r1, #20]
 80044ae:	e02d      	b.n	800450c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d115      	bne.n	80044e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <RCCEx_PLLSAI2_Config+0x1e0>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	0211      	lsls	r1, r2, #8
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6912      	ldr	r2, [r2, #16]
 80044c8:	0852      	lsrs	r2, r2, #1
 80044ca:	3a01      	subs	r2, #1
 80044cc:	0552      	lsls	r2, r2, #21
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6852      	ldr	r2, [r2, #4]
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0112      	lsls	r2, r2, #4
 80044d8:	430a      	orrs	r2, r1
 80044da:	4921      	ldr	r1, [pc, #132]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	614b      	str	r3, [r1, #20]
 80044e0:	e014      	b.n	800450c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <RCCEx_PLLSAI2_Config+0x1e4>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	0211      	lsls	r1, r2, #8
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6952      	ldr	r2, [r2, #20]
 80044f4:	0852      	lsrs	r2, r2, #1
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0652      	lsls	r2, r2, #25
 80044fa:	4311      	orrs	r1, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6852      	ldr	r2, [r2, #4]
 8004500:	3a01      	subs	r2, #1
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	430a      	orrs	r2, r1
 8004506:	4916      	ldr	r1, [pc, #88]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004508:	4313      	orrs	r3, r2
 800450a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fb4c 	bl	8001bb4 <HAL_GetTick>
 800451c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800451e:	e009      	b.n	8004534 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004520:	f7fd fb48 	bl	8001bb4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	73fb      	strb	r3, [r7, #15]
          break;
 8004532:	e005      	b.n	8004540 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ef      	beq.n	8004520 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	4904      	ldr	r1, [pc, #16]	; (8004560 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	07ff800f 	.word	0x07ff800f
 8004568:	ff9f800f 	.word	0xff9f800f
 800456c:	f9ff800f 	.word	0xf9ff800f

08004570 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0aa      	b.n	80046d8 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd f860 	bl	8001658 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ca:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045da:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045e4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	e006      	b.n	8004624 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004622:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d104      	bne.n	8004636 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004672:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8004684:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8004686:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004690:	d110      	bne.n	80046b4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800469e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a2:	d107      	bne.n	80046b4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80046f6:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004700:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f805 	bl	8004714 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473a:	2b38      	cmp	r3, #56	; 0x38
 800473c:	d103      	bne.n	8004746 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800474c:	2bf2      	cmp	r3, #242	; 0xf2
 800474e:	d103      	bne.n	8004758 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800475e:	2bd4      	cmp	r3, #212	; 0xd4
 8004760:	d103      	bne.n	800476a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e095      	b.n	80048c4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a8:	d009      	beq.n	80047be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	61da      	str	r2, [r3, #28]
 80047b0:	e005      	b.n	80047be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fc ff9b 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047fe:	d902      	bls.n	8004806 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e002      	b.n	800480c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004814:	d007      	beq.n	8004826 <HAL_SPI_Init+0xa0>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	ea42 0103 	orr.w	r1, r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0204 	and.w	r2, r3, #4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048a2:	ea42 0103 	orr.w	r1, r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_SPI_Transmit+0x22>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e15f      	b.n	8004bae <HAL_SPI_Transmit+0x2e2>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f6:	f7fd f95d 	bl	8001bb4 <HAL_GetTick>
 80048fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d002      	beq.n	8004912 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004910:	e148      	b.n	8004ba4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x52>
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004922:	e13f      	b.n	8004ba4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2203      	movs	r2, #3
 8004928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d10f      	bne.n	8004990 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d007      	beq.n	80049ae <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b6:	d94f      	bls.n	8004a58 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0xfa>
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d142      	bne.n	8004a4c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049ea:	e02f      	b.n	8004a4c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d112      	bne.n	8004a20 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1e:	e015      	b.n	8004a4c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a20:	f7fd f8c8 	bl	8001bb4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d803      	bhi.n	8004a38 <HAL_SPI_Transmit+0x16c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Transmit+0x172>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a4a:	e0ab      	b.n	8004ba4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ca      	bne.n	80049ec <HAL_SPI_Transmit+0x120>
 8004a56:	e080      	b.n	8004b5a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x19a>
 8004a60:	8afb      	ldrh	r3, [r7, #22]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d174      	bne.n	8004b50 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d912      	bls.n	8004a96 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a94:	e05c      	b.n	8004b50 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004abc:	e048      	b.n	8004b50 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d12b      	bne.n	8004b24 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d912      	bls.n	8004afc <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b02      	subs	r3, #2
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004afa:	e029      	b.n	8004b50 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b22:	e015      	b.n	8004b50 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b24:	f7fd f846 	bl	8001bb4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d803      	bhi.n	8004b3c <HAL_SPI_Transmit+0x270>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d102      	bne.n	8004b42 <HAL_SPI_Transmit+0x276>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004b4e:	e029      	b.n	8004ba4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1b1      	bne.n	8004abe <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fcf8 	bl	8005554 <SPI_EndRxTxTransaction>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e003      	b.n	8004ba4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bda:	e11a      	b.n	8004e12 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be4:	d112      	bne.n	8004c0c <HAL_SPI_Receive+0x56>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10e      	bne.n	8004c0c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f90e 	bl	8004e24 <HAL_SPI_TransmitReceive>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	e107      	b.n	8004e1c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_Receive+0x64>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e100      	b.n	8004e1c <HAL_SPI_Receive+0x266>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c22:	f7fc ffc7 	bl	8001bb4 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Receive+0x7e>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c38:	e0eb      	b.n	8004e12 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c84:	d908      	bls.n	8004c98 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e007      	b.n	8004ca8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d007      	beq.n	8004cf0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cf8:	d86f      	bhi.n	8004dda <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cfa:	e034      	b.n	8004d66 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d117      	bne.n	8004d3a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f103 020c 	add.w	r2, r3, #12
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	7812      	ldrb	r2, [r2, #0]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d38:	e015      	b.n	8004d66 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3a:	f7fc ff3b 	bl	8001bb4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d803      	bhi.n	8004d52 <HAL_SPI_Receive+0x19c>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x1a2>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d64:	e055      	b.n	8004e12 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1c4      	bne.n	8004cfc <HAL_SPI_Receive+0x146>
 8004d72:	e038      	b.n	8004de6 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d115      	bne.n	8004dae <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	1c9a      	adds	r2, r3, #2
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dac:	e015      	b.n	8004dda <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dae:	f7fc ff01 	bl	8001bb4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d803      	bhi.n	8004dc6 <HAL_SPI_Receive+0x210>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d102      	bne.n	8004dcc <HAL_SPI_Receive+0x216>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004dd8:	e01b      	b.n	8004e12 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1c6      	bne.n	8004d74 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb5a 	bl	80054a4 <SPI_EndRxTransaction>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
 8004e08:	e003      	b.n	8004e12 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x26>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e20a      	b.n	8005260 <HAL_SPI_TransmitReceive+0x43c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e52:	f7fc feaf 	bl	8001bb4 <HAL_GetTick>
 8004e56:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e6e:	7efb      	ldrb	r3, [r7, #27]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d00e      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x6e>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d106      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x66>
 8004e84:	7efb      	ldrb	r3, [r7, #27]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e90:	e1e0      	b.n	8005254 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x80>
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004eaa:	e1d3      	b.n	8005254 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d003      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2205      	movs	r2, #5
 8004ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	887a      	ldrh	r2, [r7, #2]
 8004ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f02:	d802      	bhi.n	8004f0a <HAL_SPI_TransmitReceive+0xe6>
 8004f04:	8a3b      	ldrh	r3, [r7, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d908      	bls.n	8004f1c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f52:	f240 8081 	bls.w	8005058 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x140>
 8004f5e:	8a7b      	ldrh	r3, [r7, #18]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d16d      	bne.n	8005040 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	881a      	ldrh	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	1c9a      	adds	r2, r3, #2
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f88:	e05a      	b.n	8005040 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x1ac>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_SPI_TransmitReceive+0x1ac>
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d113      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d11c      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x1f4>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005014:	2301      	movs	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005018:	f7fc fdcc 	bl	8001bb4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005024:	429a      	cmp	r2, r3
 8005026:	d80b      	bhi.n	8005040 <HAL_SPI_TransmitReceive+0x21c>
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d007      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800503e:	e109      	b.n	8005254 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d19f      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x166>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d199      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x166>
 8005056:	e0e3      	b.n	8005220 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x244>
 8005060:	8a7b      	ldrh	r3, [r7, #18]
 8005062:	2b01      	cmp	r3, #1
 8005064:	f040 80cf 	bne.w	8005206 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d912      	bls.n	8005098 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	1c9a      	adds	r2, r3, #2
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b02      	subs	r3, #2
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005096:	e0b6      	b.n	8005206 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	e0a2      	b.n	8005206 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d134      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x314>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02f      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x314>
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d12c      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d912      	bls.n	800510e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	881a      	ldrh	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b02      	subs	r3, #2
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800510c:	e012      	b.n	8005134 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d148      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x3b4>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d042      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d923      	bls.n	80051a6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	b292      	uxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b02      	subs	r3, #2
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d81f      	bhi.n	80051d4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e016      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f103 020c 	add.w	r2, r3, #12
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051d4:	2301      	movs	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051d8:	f7fc fcec 	bl	8001bb4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d803      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x3cc>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x3d2>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005204:	e026      	b.n	8005254 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f af57 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x29c>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	f47f af50 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f995 	bl	8005554 <SPI_EndRxTxTransaction>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e003      	b.n	8005254 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800525c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005278:	f7fc fc9c 	bl	8001bb4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	4413      	add	r3, r2
 8005286:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005288:	f7fc fc94 	bl	8001bb4 <HAL_GetTick>
 800528c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	015b      	lsls	r3, r3, #5
 8005294:	0d1b      	lsrs	r3, r3, #20
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529e:	e054      	b.n	800534a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a6:	d050      	beq.n	800534a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a8:	f7fc fc84 	bl	8001bb4 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d902      	bls.n	80052be <SPI_WaitFlagStateUntilTimeout+0x56>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d13d      	bne.n	800533a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d6:	d111      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	d004      	beq.n	80052ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ea:	d107      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	d10f      	bne.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005324:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e017      	b.n	800536a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3b01      	subs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	429a      	cmp	r2, r3
 8005366:	d19b      	bne.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000004 	.word	0x20000004

08005378 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800538a:	f7fc fc13 	bl	8001bb4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	4413      	add	r3, r2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800539a:	f7fc fc0b 	bl	8001bb4 <HAL_GetTick>
 800539e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	00da      	lsls	r2, r3, #3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	0d1b      	lsrs	r3, r3, #20
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053c0:	e060      	b.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053c8:	d107      	bne.n	80053da <SPI_WaitFifoStateUntilTimeout+0x62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d050      	beq.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e2:	f7fc fbe7 	bl	8001bb4 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d902      	bls.n	80053f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d13d      	bne.n	8005474 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005406:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005410:	d111      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d004      	beq.n	8005426 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005424:	d107      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005434:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	d10f      	bne.n	8005460 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e010      	b.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3b01      	subs	r3, #1
 8005482:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d196      	bne.n	80053c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000004 	.word	0x20000004

080054a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b8:	d111      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d004      	beq.n	80054ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d107      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff febd 	bl	8005268 <SPI_WaitFlagStateUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e023      	b.n	800554c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550c:	d11d      	bne.n	800554a <SPI_EndRxTransaction+0xa6>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d004      	beq.n	8005522 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005520:	d113      	bne.n	800554a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff ff22 	bl	8005378 <SPI_WaitFifoStateUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e000      	b.n	800554c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff ff03 	bl	8005378 <SPI_WaitFifoStateUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e027      	b.n	80055d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff fe68 	bl	8005268 <SPI_WaitFlagStateUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e014      	b.n	80055d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fedc 	bl	8005378 <SPI_WaitFifoStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e000      	b.n	80055d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e049      	b.n	8005686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fc f8c8 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fc56 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e049      	b.n	8005734 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f841 	bl	800573c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f000 fbff 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e049      	b.n	80057f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f841 	bl	80057fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fb9e 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x24>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e03c      	b.n	80058b2 <HAL_TIM_PWM_Start+0x9e>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d109      	bne.n	8005852 <HAL_TIM_PWM_Start+0x3e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e02f      	b.n	80058b2 <HAL_TIM_PWM_Start+0x9e>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x58>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e022      	b.n	80058b2 <HAL_TIM_PWM_Start+0x9e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b0c      	cmp	r3, #12
 8005870:	d109      	bne.n	8005886 <HAL_TIM_PWM_Start+0x72>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e015      	b.n	80058b2 <HAL_TIM_PWM_Start+0x9e>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b10      	cmp	r3, #16
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x8c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e008      	b.n	80058b2 <HAL_TIM_PWM_Start+0x9e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e09c      	b.n	80059f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0xb6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	e023      	b.n	8005912 <HAL_TIM_PWM_Start+0xfe>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0xc6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d8:	e01b      	b.n	8005912 <HAL_TIM_PWM_Start+0xfe>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e8:	e013      	b.n	8005912 <HAL_TIM_PWM_Start+0xfe>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b0c      	cmp	r3, #12
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Start+0xe6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058f8:	e00b      	b.n	8005912 <HAL_TIM_PWM_Start+0xfe>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xf6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005908:	e003      	b.n	8005912 <HAL_TIM_PWM_Start+0xfe>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2201      	movs	r2, #1
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fee2 	bl	80066e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a35      	ldr	r2, [pc, #212]	; (80059fc <HAL_TIM_PWM_Start+0x1e8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_TIM_PWM_Start+0x13e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_TIM_PWM_Start+0x1ec>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_TIM_PWM_Start+0x13e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a32      	ldr	r2, [pc, #200]	; (8005a04 <HAL_TIM_PWM_Start+0x1f0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_TIM_PWM_Start+0x13e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <HAL_TIM_PWM_Start+0x1f4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIM_PWM_Start+0x13e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <HAL_TIM_PWM_Start+0x1f8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_TIM_PWM_Start+0x142>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_TIM_PWM_Start+0x144>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a22      	ldr	r2, [pc, #136]	; (80059fc <HAL_TIM_PWM_Start+0x1e8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d018      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_TIM_PWM_Start+0x1fc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <HAL_TIM_PWM_Start+0x200>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <HAL_TIM_PWM_Start+0x204>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <HAL_TIM_PWM_Start+0x1ec>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x19e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <HAL_TIM_PWM_Start+0x1f0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d115      	bne.n	80059de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <HAL_TIM_PWM_Start+0x208>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d015      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x1dc>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d011      	beq.n	80059f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059dc:	e008      	b.n	80059f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e000      	b.n	80059f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e066      	b.n	8005b0c <HAL_TIM_OC_ConfigChannel+0xec>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b14      	cmp	r3, #20
 8005a4a:	d857      	bhi.n	8005afc <HAL_TIM_OC_ConfigChannel+0xdc>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005afd 	.word	0x08005afd
 8005a5c:	08005afd 	.word	0x08005afd
 8005a60:	08005afd 	.word	0x08005afd
 8005a64:	08005ab7 	.word	0x08005ab7
 8005a68:	08005afd 	.word	0x08005afd
 8005a6c:	08005afd 	.word	0x08005afd
 8005a70:	08005afd 	.word	0x08005afd
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005afd 	.word	0x08005afd
 8005a7c:	08005afd 	.word	0x08005afd
 8005a80:	08005afd 	.word	0x08005afd
 8005a84:	08005ad3 	.word	0x08005ad3
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005afd 	.word	0x08005afd
 8005a90:	08005afd 	.word	0x08005afd
 8005a94:	08005ae1 	.word	0x08005ae1
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005aef 	.word	0x08005aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 faa8 	bl	8006004 <TIM_OC1_SetConfig>
      break;
 8005ab4:	e025      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb31 	bl	8006124 <TIM_OC2_SetConfig>
      break;
 8005ac2:	e01e      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fbb4 	bl	8006238 <TIM_OC3_SetConfig>
      break;
 8005ad0:	e017      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fc35 	bl	8006348 <TIM_OC4_SetConfig>
      break;
 8005ade:	e010      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fc98 	bl	800641c <TIM_OC5_SetConfig>
      break;
 8005aec:	e009      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fcf5 	bl	80064e4 <TIM_OC6_SetConfig>
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e0ff      	b.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b14      	cmp	r3, #20
 8005b3e:	f200 80f0 	bhi.w	8005d22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b9d 	.word	0x08005b9d
 8005b4c:	08005d23 	.word	0x08005d23
 8005b50:	08005d23 	.word	0x08005d23
 8005b54:	08005d23 	.word	0x08005d23
 8005b58:	08005bdd 	.word	0x08005bdd
 8005b5c:	08005d23 	.word	0x08005d23
 8005b60:	08005d23 	.word	0x08005d23
 8005b64:	08005d23 	.word	0x08005d23
 8005b68:	08005c1f 	.word	0x08005c1f
 8005b6c:	08005d23 	.word	0x08005d23
 8005b70:	08005d23 	.word	0x08005d23
 8005b74:	08005d23 	.word	0x08005d23
 8005b78:	08005c5f 	.word	0x08005c5f
 8005b7c:	08005d23 	.word	0x08005d23
 8005b80:	08005d23 	.word	0x08005d23
 8005b84:	08005d23 	.word	0x08005d23
 8005b88:	08005ca1 	.word	0x08005ca1
 8005b8c:	08005d23 	.word	0x08005d23
 8005b90:	08005d23 	.word	0x08005d23
 8005b94:	08005d23 	.word	0x08005d23
 8005b98:	08005ce1 	.word	0x08005ce1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa2e 	bl	8006004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	619a      	str	r2, [r3, #24]
      break;
 8005bda:	e0a5      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa9e 	bl	8006124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	619a      	str	r2, [r3, #24]
      break;
 8005c1c:	e084      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb07 	bl	8006238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0208 	orr.w	r2, r2, #8
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0204 	bic.w	r2, r2, #4
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	61da      	str	r2, [r3, #28]
      break;
 8005c5c:	e064      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fb6f 	bl	8006348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	021a      	lsls	r2, r3, #8
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	61da      	str	r2, [r3, #28]
      break;
 8005c9e:	e043      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fbb8 	bl	800641c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cde:	e023      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fbfc 	bl	80064e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d20:	e002      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
      break;
 8005d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_ConfigClockSource+0x1c>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e0b6      	b.n	8005ec6 <HAL_TIM_ConfigClockSource+0x18a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d94:	d03e      	beq.n	8005e14 <HAL_TIM_ConfigClockSource+0xd8>
 8005d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9a:	f200 8087 	bhi.w	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	f000 8086 	beq.w	8005eb2 <HAL_TIM_ConfigClockSource+0x176>
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d87f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005dac:	2b70      	cmp	r3, #112	; 0x70
 8005dae:	d01a      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0xaa>
 8005db0:	2b70      	cmp	r3, #112	; 0x70
 8005db2:	d87b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005db4:	2b60      	cmp	r3, #96	; 0x60
 8005db6:	d050      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x11e>
 8005db8:	2b60      	cmp	r3, #96	; 0x60
 8005dba:	d877      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005dbc:	2b50      	cmp	r3, #80	; 0x50
 8005dbe:	d03c      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0xfe>
 8005dc0:	2b50      	cmp	r3, #80	; 0x50
 8005dc2:	d873      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d058      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x13e>
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d86f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d064      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15e>
 8005dd0:	2b30      	cmp	r3, #48	; 0x30
 8005dd2:	d86b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d060      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15e>
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d867      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15e>
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d05a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15e>
 8005de4:	e062      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005df6:	f000 fc55 	bl	80066a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	609a      	str	r2, [r3, #8]
      break;
 8005e12:	e04f      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e24:	f000 fc3e 	bl	80066a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e36:	609a      	str	r2, [r3, #8]
      break;
 8005e38:	e03c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	461a      	mov	r2, r3
 8005e48:	f000 fbb2 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2150      	movs	r1, #80	; 0x50
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fc0b 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005e58:	e02c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	461a      	mov	r2, r3
 8005e68:	f000 fbd1 	bl	800660e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2160      	movs	r1, #96	; 0x60
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fbfb 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005e78:	e01c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fb92 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fbeb 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005e98:	e00c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f000 fbe2 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a40      	ldr	r2, [pc, #256]	; (8005fe4 <TIM_Base_SetConfig+0x114>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d00f      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a3d      	ldr	r2, [pc, #244]	; (8005fe8 <TIM_Base_SetConfig+0x118>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a3c      	ldr	r2, [pc, #240]	; (8005fec <TIM_Base_SetConfig+0x11c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3b      	ldr	r2, [pc, #236]	; (8005ff0 <TIM_Base_SetConfig+0x120>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a3a      	ldr	r2, [pc, #232]	; (8005ff4 <TIM_Base_SetConfig+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d108      	bne.n	8005f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a2f      	ldr	r2, [pc, #188]	; (8005fe4 <TIM_Base_SetConfig+0x114>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01f      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d01b      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a2c      	ldr	r2, [pc, #176]	; (8005fe8 <TIM_Base_SetConfig+0x118>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d017      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <TIM_Base_SetConfig+0x11c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2a      	ldr	r2, [pc, #168]	; (8005ff0 <TIM_Base_SetConfig+0x120>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <TIM_Base_SetConfig+0x124>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <TIM_Base_SetConfig+0x128>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <TIM_Base_SetConfig+0x12c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x9a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a26      	ldr	r2, [pc, #152]	; (8006000 <TIM_Base_SetConfig+0x130>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <TIM_Base_SetConfig+0x114>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_Base_SetConfig+0xf8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <TIM_Base_SetConfig+0x124>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <TIM_Base_SetConfig+0xf8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <TIM_Base_SetConfig+0x128>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_Base_SetConfig+0xf8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <TIM_Base_SetConfig+0x12c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0xf8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0f      	ldr	r2, [pc, #60]	; (8006000 <TIM_Base_SetConfig+0x130>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d103      	bne.n	8005fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f023 0201 	bic.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 0302 	bic.w	r3, r3, #2
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <TIM_OC1_SetConfig+0x10c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00f      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a2b      	ldr	r2, [pc, #172]	; (8006114 <TIM_OC1_SetConfig+0x110>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00b      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <TIM_OC1_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <TIM_OC1_SetConfig+0x118>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC1_SetConfig+0x80>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a28      	ldr	r2, [pc, #160]	; (8006120 <TIM_OC1_SetConfig+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10c      	bne.n	800609e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0308 	bic.w	r3, r3, #8
 800608a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0304 	bic.w	r3, r3, #4
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <TIM_OC1_SetConfig+0x10c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <TIM_OC1_SetConfig+0x110>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <TIM_OC1_SetConfig+0x114>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <TIM_OC1_SetConfig+0x118>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC1_SetConfig+0xc2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <TIM_OC1_SetConfig+0x11c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d111      	bne.n	80060ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a28      	ldr	r2, [pc, #160]	; (8006224 <TIM_OC2_SetConfig+0x100>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x6c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a27      	ldr	r2, [pc, #156]	; (8006228 <TIM_OC2_SetConfig+0x104>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10d      	bne.n	80061ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <TIM_OC2_SetConfig+0x100>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <TIM_OC2_SetConfig+0x104>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1b      	ldr	r2, [pc, #108]	; (800622c <TIM_OC2_SetConfig+0x108>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <TIM_OC2_SetConfig+0x10c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC2_SetConfig+0xb0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a19      	ldr	r2, [pc, #100]	; (8006234 <TIM_OC2_SetConfig+0x110>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <TIM_OC3_SetConfig+0xfc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x6a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a26      	ldr	r2, [pc, #152]	; (8006338 <TIM_OC3_SetConfig+0x100>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <TIM_OC3_SetConfig+0xfc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00f      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <TIM_OC3_SetConfig+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	; (800633c <TIM_OC3_SetConfig+0x104>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <TIM_OC3_SetConfig+0x108>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_OC3_SetConfig+0xae>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a18      	ldr	r2, [pc, #96]	; (8006344 <TIM_OC3_SetConfig+0x10c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d113      	bne.n	800630e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40012c00 	.word	0x40012c00
 8006338:	40013400 	.word	0x40013400
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <TIM_OC4_SetConfig+0xc0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <TIM_OC4_SetConfig+0x84>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a17      	ldr	r2, [pc, #92]	; (800640c <TIM_OC4_SetConfig+0xc4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_OC4_SetConfig+0x84>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a16      	ldr	r2, [pc, #88]	; (8006410 <TIM_OC4_SetConfig+0xc8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_OC4_SetConfig+0x84>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a15      	ldr	r2, [pc, #84]	; (8006414 <TIM_OC4_SetConfig+0xcc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC4_SetConfig+0x84>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a14      	ldr	r2, [pc, #80]	; (8006418 <TIM_OC4_SetConfig+0xd0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d109      	bne.n	80063e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	019b      	lsls	r3, r3, #6
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40013400 	.word	0x40013400
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800

0800641c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <TIM_OC5_SetConfig+0xb4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00f      	beq.n	8006496 <TIM_OC5_SetConfig+0x7a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <TIM_OC5_SetConfig+0xb8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00b      	beq.n	8006496 <TIM_OC5_SetConfig+0x7a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <TIM_OC5_SetConfig+0xbc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d007      	beq.n	8006496 <TIM_OC5_SetConfig+0x7a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a14      	ldr	r2, [pc, #80]	; (80064dc <TIM_OC5_SetConfig+0xc0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d003      	beq.n	8006496 <TIM_OC5_SetConfig+0x7a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <TIM_OC5_SetConfig+0xc4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d109      	bne.n	80064aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800649c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	621a      	str	r2, [r3, #32]
}
 80064c4:	bf00      	nop
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800652a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	051b      	lsls	r3, r3, #20
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <TIM_OC6_SetConfig+0xb8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC6_SetConfig+0x7c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <TIM_OC6_SetConfig+0xbc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC6_SetConfig+0x7c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <TIM_OC6_SetConfig+0xc0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC6_SetConfig+0x7c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <TIM_OC6_SetConfig+0xc4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC6_SetConfig+0x7c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC6_SetConfig+0xc8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	029b      	lsls	r3, r3, #10
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40013400 	.word	0x40013400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0210 	bic.w	r2, r3, #16
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800664a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	f043 0307 	orr.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2201      	movs	r2, #1
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	431a      	orrs	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e068      	b.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a2e      	ldr	r2, [pc, #184]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2d      	ldr	r2, [pc, #180]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d01d      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d018      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d013      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00e      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d009      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a13      	ldr	r2, [pc, #76]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10c      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40000c00 	.word	0x40000c00
 800683c:	40014000 	.word	0x40014000

08006840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e042      	b.n	80068d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fb f867 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2224      	movs	r2, #36	; 0x24
 800686e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 feb4 	bl	80075f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fbb5 	bl	8007000 <UART_SetConfig>
 8006896:	4603      	mov	r3, r0
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e01b      	b.n	80068d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 ff33 	bl	800773c <UART_CheckIdleState>
 80068d6:	4603      	mov	r3, r0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d137      	bne.n	8006968 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_UART_Receive_IT+0x24>
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e030      	b.n	800696a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a18      	ldr	r2, [pc, #96]	; (8006974 <HAL_UART_Receive_IT+0x94>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d01f      	beq.n	8006958 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	613b      	str	r3, [r7, #16]
   return(result);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	61bb      	str	r3, [r7, #24]
   return(result);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e6      	bne.n	8006926 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	461a      	mov	r2, r3
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fffe 	bl	8007960 <UART_Start_Receive_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	e000      	b.n	800696a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
  }
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40008000 	.word	0x40008000

08006978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0ba      	sub	sp, #232	; 0xe8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800699e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80069a6:	4013      	ands	r3, r2
 80069a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11b      	bne.n	80069ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 82e3 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
      }
      return;
 80069ea:	e2dd      	b.n	8006fa8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80069ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8123 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069fa:	4b8d      	ldr	r3, [pc, #564]	; (8006c30 <HAL_UART_IRQHandler+0x2b8>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a06:	4b8b      	ldr	r3, [pc, #556]	; (8006c34 <HAL_UART_IRQHandler+0x2bc>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8116 	beq.w	8006c3c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d011      	beq.n	8006a40 <HAL_UART_IRQHandler+0xc8>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_UART_IRQHandler+0xf8>
 8006a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d011      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x128>
 8006a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	f043 0202 	orr.w	r2, r3, #2
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ab8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006abc:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <HAL_UART_IRQHandler+0x2b8>)
 8006abe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f043 0208 	orr.w	r2, r3, #8
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d012      	beq.n	8006b0e <HAL_UART_IRQHandler+0x196>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00c      	beq.n	8006b0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8249 	beq.w	8006fac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d013      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d005      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d054      	beq.n	8006c1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f816 	bl	8007ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	d146      	bne.n	8006c14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1d9      	bne.n	8006b86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_UART_IRQHandler+0x2c0>)
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fb f97e 	bl	8001eee <HAL_DMA_Abort_IT>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d019      	beq.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006c06:	4610      	mov	r0, r2
 8006c08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0a:	e00f      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9e1 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c12:	e00b      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f9dd 	bl	8006fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1a:	e007      	b.n	8006c2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9d9 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c2a:	e1bf      	b.n	8006fac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	bf00      	nop
    return;
 8006c2e:	e1bd      	b.n	8006fac <HAL_UART_IRQHandler+0x634>
 8006c30:	10000001 	.word	0x10000001
 8006c34:	04000120 	.word	0x04000120
 8006c38:	08007c71 	.word	0x08007c71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 8153 	bne.w	8006eec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 814c 	beq.w	8006eec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8145 	beq.w	8006eec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2210      	movs	r2, #16
 8006c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	f040 80bb 	bne.w	8006df0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 818f 	beq.w	8006fb0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	f080 8187 	bcs.w	8006fb0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 8087 	bne.w	8006dce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1da      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e1      	bne.n	8006d0a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e3      	bne.n	8006d46 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9c:	f023 0310 	bic.w	r3, r3, #16
 8006da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8006db0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e4      	bne.n	8006d8c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fb f834 	bl	8001e36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8fd 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dee:	e0df      	b.n	8006fb0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80d1 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80cc 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e4      	bne.n	8006e1c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	623b      	str	r3, [r7, #32]
   return(result);
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e1      	bne.n	8006e52 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0310 	bic.w	r3, r3, #16
 8006eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e4      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f87f 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eea:	e063      	b.n	8006fb4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <HAL_UART_IRQHandler+0x59e>
 8006ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fc14 	bl	800873c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f14:	e051      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d014      	beq.n	8006f4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d03a      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
    }
    return;
 8006f4a:	e035      	b.n	8006fb8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <HAL_UART_IRQHandler+0x5f4>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fe99 	bl	8007c9c <UART_EndTransmit_IT>
    return;
 8006f6a:	e026      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <HAL_UART_IRQHandler+0x614>
 8006f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fbed 	bl	8008764 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f8a:	e016      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d010      	beq.n	8006fba <HAL_UART_IRQHandler+0x642>
 8006f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da0c      	bge.n	8006fba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fbd5 	bl	8008750 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa6:	e008      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
      return;
 8006fa8:	bf00      	nop
 8006faa:	e006      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
    return;
 8006fac:	bf00      	nop
 8006fae:	e004      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
      return;
 8006fb0:	bf00      	nop
 8006fb2:	e002      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
      return;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <HAL_UART_IRQHandler+0x642>
    return;
 8006fb8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006fba:	37e8      	adds	r7, #232	; 0xe8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007004:	b08c      	sub	sp, #48	; 0x30
 8007006:	af00      	add	r7, sp, #0
 8007008:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	431a      	orrs	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	431a      	orrs	r2, r3
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4313      	orrs	r3, r2
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4baa      	ldr	r3, [pc, #680]	; (80072d8 <UART_SetConfig+0x2d8>)
 8007030:	4013      	ands	r3, r2
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007038:	430b      	orrs	r3, r1
 800703a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a9f      	ldr	r2, [pc, #636]	; (80072dc <UART_SetConfig+0x2dc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007068:	4313      	orrs	r3, r2
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007076:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007080:	430b      	orrs	r3, r1
 8007082:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	f023 010f 	bic.w	r1, r3, #15
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a90      	ldr	r2, [pc, #576]	; (80072e0 <UART_SetConfig+0x2e0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d125      	bne.n	80070f0 <UART_SetConfig+0xf0>
 80070a4:	4b8f      	ldr	r3, [pc, #572]	; (80072e4 <UART_SetConfig+0x2e4>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d81a      	bhi.n	80070e8 <UART_SetConfig+0xe8>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <UART_SetConfig+0xb8>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070d9 	.word	0x080070d9
 80070c0:	080070d1 	.word	0x080070d1
 80070c4:	080070e1 	.word	0x080070e1
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ce:	e116      	b.n	80072fe <UART_SetConfig+0x2fe>
 80070d0:	2302      	movs	r3, #2
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d6:	e112      	b.n	80072fe <UART_SetConfig+0x2fe>
 80070d8:	2304      	movs	r3, #4
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070de:	e10e      	b.n	80072fe <UART_SetConfig+0x2fe>
 80070e0:	2308      	movs	r3, #8
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e10a      	b.n	80072fe <UART_SetConfig+0x2fe>
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e106      	b.n	80072fe <UART_SetConfig+0x2fe>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a7c      	ldr	r2, [pc, #496]	; (80072e8 <UART_SetConfig+0x2e8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d138      	bne.n	800716c <UART_SetConfig+0x16c>
 80070fa:	4b7a      	ldr	r3, [pc, #488]	; (80072e4 <UART_SetConfig+0x2e4>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d82d      	bhi.n	8007164 <UART_SetConfig+0x164>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <UART_SetConfig+0x110>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007145 	.word	0x08007145
 8007114:	08007165 	.word	0x08007165
 8007118:	08007165 	.word	0x08007165
 800711c:	08007165 	.word	0x08007165
 8007120:	08007155 	.word	0x08007155
 8007124:	08007165 	.word	0x08007165
 8007128:	08007165 	.word	0x08007165
 800712c:	08007165 	.word	0x08007165
 8007130:	0800714d 	.word	0x0800714d
 8007134:	08007165 	.word	0x08007165
 8007138:	08007165 	.word	0x08007165
 800713c:	08007165 	.word	0x08007165
 8007140:	0800715d 	.word	0x0800715d
 8007144:	2300      	movs	r3, #0
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e0d8      	b.n	80072fe <UART_SetConfig+0x2fe>
 800714c:	2302      	movs	r3, #2
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e0d4      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e0d0      	b.n	80072fe <UART_SetConfig+0x2fe>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007162:	e0cc      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716a:	e0c8      	b.n	80072fe <UART_SetConfig+0x2fe>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5e      	ldr	r2, [pc, #376]	; (80072ec <UART_SetConfig+0x2ec>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d125      	bne.n	80071c2 <UART_SetConfig+0x1c2>
 8007176:	4b5b      	ldr	r3, [pc, #364]	; (80072e4 <UART_SetConfig+0x2e4>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007180:	2b30      	cmp	r3, #48	; 0x30
 8007182:	d016      	beq.n	80071b2 <UART_SetConfig+0x1b2>
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d818      	bhi.n	80071ba <UART_SetConfig+0x1ba>
 8007188:	2b20      	cmp	r3, #32
 800718a:	d00a      	beq.n	80071a2 <UART_SetConfig+0x1a2>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d814      	bhi.n	80071ba <UART_SetConfig+0x1ba>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <UART_SetConfig+0x19a>
 8007194:	2b10      	cmp	r3, #16
 8007196:	d008      	beq.n	80071aa <UART_SetConfig+0x1aa>
 8007198:	e00f      	b.n	80071ba <UART_SetConfig+0x1ba>
 800719a:	2300      	movs	r3, #0
 800719c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a0:	e0ad      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071a2:	2302      	movs	r3, #2
 80071a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a8:	e0a9      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071aa:	2304      	movs	r3, #4
 80071ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b0:	e0a5      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071b2:	2308      	movs	r3, #8
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b8:	e0a1      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071ba:	2310      	movs	r3, #16
 80071bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c0:	e09d      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <UART_SetConfig+0x2f0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d125      	bne.n	8007218 <UART_SetConfig+0x218>
 80071cc:	4b45      	ldr	r3, [pc, #276]	; (80072e4 <UART_SetConfig+0x2e4>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071d6:	2bc0      	cmp	r3, #192	; 0xc0
 80071d8:	d016      	beq.n	8007208 <UART_SetConfig+0x208>
 80071da:	2bc0      	cmp	r3, #192	; 0xc0
 80071dc:	d818      	bhi.n	8007210 <UART_SetConfig+0x210>
 80071de:	2b80      	cmp	r3, #128	; 0x80
 80071e0:	d00a      	beq.n	80071f8 <UART_SetConfig+0x1f8>
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d814      	bhi.n	8007210 <UART_SetConfig+0x210>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <UART_SetConfig+0x1f0>
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d008      	beq.n	8007200 <UART_SetConfig+0x200>
 80071ee:	e00f      	b.n	8007210 <UART_SetConfig+0x210>
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f6:	e082      	b.n	80072fe <UART_SetConfig+0x2fe>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fe:	e07e      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e07a      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e076      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e072      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a35      	ldr	r2, [pc, #212]	; (80072f4 <UART_SetConfig+0x2f4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d12a      	bne.n	8007278 <UART_SetConfig+0x278>
 8007222:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <UART_SetConfig+0x2e4>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007230:	d01a      	beq.n	8007268 <UART_SetConfig+0x268>
 8007232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007236:	d81b      	bhi.n	8007270 <UART_SetConfig+0x270>
 8007238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723c:	d00c      	beq.n	8007258 <UART_SetConfig+0x258>
 800723e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007242:	d815      	bhi.n	8007270 <UART_SetConfig+0x270>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <UART_SetConfig+0x250>
 8007248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724c:	d008      	beq.n	8007260 <UART_SetConfig+0x260>
 800724e:	e00f      	b.n	8007270 <UART_SetConfig+0x270>
 8007250:	2300      	movs	r3, #0
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007256:	e052      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007258:	2302      	movs	r3, #2
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725e:	e04e      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e04a      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e046      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e042      	b.n	80072fe <UART_SetConfig+0x2fe>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a17      	ldr	r2, [pc, #92]	; (80072dc <UART_SetConfig+0x2dc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d13a      	bne.n	80072f8 <UART_SetConfig+0x2f8>
 8007282:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <UART_SetConfig+0x2e4>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800728c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007290:	d01a      	beq.n	80072c8 <UART_SetConfig+0x2c8>
 8007292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007296:	d81b      	bhi.n	80072d0 <UART_SetConfig+0x2d0>
 8007298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729c:	d00c      	beq.n	80072b8 <UART_SetConfig+0x2b8>
 800729e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a2:	d815      	bhi.n	80072d0 <UART_SetConfig+0x2d0>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <UART_SetConfig+0x2b0>
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d008      	beq.n	80072c0 <UART_SetConfig+0x2c0>
 80072ae:	e00f      	b.n	80072d0 <UART_SetConfig+0x2d0>
 80072b0:	2300      	movs	r3, #0
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b6:	e022      	b.n	80072fe <UART_SetConfig+0x2fe>
 80072b8:	2302      	movs	r3, #2
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e01e      	b.n	80072fe <UART_SetConfig+0x2fe>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e01a      	b.n	80072fe <UART_SetConfig+0x2fe>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e016      	b.n	80072fe <UART_SetConfig+0x2fe>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e012      	b.n	80072fe <UART_SetConfig+0x2fe>
 80072d8:	cfff69f3 	.word	0xcfff69f3
 80072dc:	40008000 	.word	0x40008000
 80072e0:	40013800 	.word	0x40013800
 80072e4:	40021000 	.word	0x40021000
 80072e8:	40004400 	.word	0x40004400
 80072ec:	40004800 	.word	0x40004800
 80072f0:	40004c00 	.word	0x40004c00
 80072f4:	40005000 	.word	0x40005000
 80072f8:	2310      	movs	r3, #16
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4aae      	ldr	r2, [pc, #696]	; (80075bc <UART_SetConfig+0x5bc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	f040 8097 	bne.w	8007438 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800730a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730e:	2b08      	cmp	r3, #8
 8007310:	d823      	bhi.n	800735a <UART_SetConfig+0x35a>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <UART_SetConfig+0x318>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800735b 	.word	0x0800735b
 8007320:	08007345 	.word	0x08007345
 8007324:	0800735b 	.word	0x0800735b
 8007328:	0800734b 	.word	0x0800734b
 800732c:	0800735b 	.word	0x0800735b
 8007330:	0800735b 	.word	0x0800735b
 8007334:	0800735b 	.word	0x0800735b
 8007338:	08007353 	.word	0x08007353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800733c:	f7fc fb14 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8007340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007342:	e010      	b.n	8007366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007344:	4b9e      	ldr	r3, [pc, #632]	; (80075c0 <UART_SetConfig+0x5c0>)
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007348:	e00d      	b.n	8007366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734a:	f7fc fa75 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 800734e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007350:	e009      	b.n	8007366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007358:	e005      	b.n	8007366 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8130 	beq.w	80075ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	4a94      	ldr	r2, [pc, #592]	; (80075c4 <UART_SetConfig+0x5c4>)
 8007374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007378:	461a      	mov	r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007380:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	4413      	add	r3, r2
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	429a      	cmp	r2, r3
 8007390:	d305      	bcc.n	800739e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	429a      	cmp	r2, r3
 800739c:	d903      	bls.n	80073a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073a4:	e113      	b.n	80075ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	60fa      	str	r2, [r7, #12]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	4a84      	ldr	r2, [pc, #528]	; (80075c4 <UART_SetConfig+0x5c4>)
 80073b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2200      	movs	r2, #0
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073c8:	f7f8 ff2a 	bl	8000220 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	020b      	lsls	r3, r1, #8
 80073de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073e2:	0202      	lsls	r2, r0, #8
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	6849      	ldr	r1, [r1, #4]
 80073e8:	0849      	lsrs	r1, r1, #1
 80073ea:	2000      	movs	r0, #0
 80073ec:	460c      	mov	r4, r1
 80073ee:	4605      	mov	r5, r0
 80073f0:	eb12 0804 	adds.w	r8, r2, r4
 80073f4:	eb43 0905 	adc.w	r9, r3, r5
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	469a      	mov	sl, r3
 8007400:	4693      	mov	fp, r2
 8007402:	4652      	mov	r2, sl
 8007404:	465b      	mov	r3, fp
 8007406:	4640      	mov	r0, r8
 8007408:	4649      	mov	r1, r9
 800740a:	f7f8 ff09 	bl	8000220 <__aeabi_uldivmod>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4613      	mov	r3, r2
 8007414:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800741c:	d308      	bcc.n	8007430 <UART_SetConfig+0x430>
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007424:	d204      	bcs.n	8007430 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a3a      	ldr	r2, [r7, #32]
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e0ce      	b.n	80075ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007436:	e0ca      	b.n	80075ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007440:	d166      	bne.n	8007510 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007446:	2b08      	cmp	r3, #8
 8007448:	d827      	bhi.n	800749a <UART_SetConfig+0x49a>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <UART_SetConfig+0x450>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007475 	.word	0x08007475
 8007454:	0800747d 	.word	0x0800747d
 8007458:	08007485 	.word	0x08007485
 800745c:	0800749b 	.word	0x0800749b
 8007460:	0800748b 	.word	0x0800748b
 8007464:	0800749b 	.word	0x0800749b
 8007468:	0800749b 	.word	0x0800749b
 800746c:	0800749b 	.word	0x0800749b
 8007470:	08007493 	.word	0x08007493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7fc fa78 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8007478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800747a:	e014      	b.n	80074a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7fc fa8a 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8007480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007482:	e010      	b.n	80074a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007484:	4b4e      	ldr	r3, [pc, #312]	; (80075c0 <UART_SetConfig+0x5c0>)
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007488:	e00d      	b.n	80074a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748a:	f7fc f9d5 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007490:	e009      	b.n	80074a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007498:	e005      	b.n	80074a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8090 	beq.w	80075ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	4a44      	ldr	r2, [pc, #272]	; (80075c4 <UART_SetConfig+0x5c4>)
 80074b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074c0:	005a      	lsls	r2, r3, #1
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	441a      	add	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d916      	bls.n	8007508 <UART_SetConfig+0x508>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e0:	d212      	bcs.n	8007508 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f023 030f 	bic.w	r3, r3, #15
 80074ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	8bfb      	ldrh	r3, [r7, #30]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	8bfa      	ldrh	r2, [r7, #30]
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	e062      	b.n	80075ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800750e:	e05e      	b.n	80075ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007510:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007514:	2b08      	cmp	r3, #8
 8007516:	d828      	bhi.n	800756a <UART_SetConfig+0x56a>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x520>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007545 	.word	0x08007545
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007555 	.word	0x08007555
 800752c:	0800756b 	.word	0x0800756b
 8007530:	0800755b 	.word	0x0800755b
 8007534:	0800756b 	.word	0x0800756b
 8007538:	0800756b 	.word	0x0800756b
 800753c:	0800756b 	.word	0x0800756b
 8007540:	08007563 	.word	0x08007563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007544:	f7fc fa10 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8007548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800754a:	e014      	b.n	8007576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800754c:	f7fc fa22 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8007550:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007552:	e010      	b.n	8007576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007554:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <UART_SetConfig+0x5c0>)
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007558:	e00d      	b.n	8007576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755a:	f7fc f96d 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007560:	e009      	b.n	8007576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007568:	e005      	b.n	8007576 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007574:	bf00      	nop
    }

    if (pclk != 0U)
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d028      	beq.n	80075ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <UART_SetConfig+0x5c4>)
 8007582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007586:	461a      	mov	r2, r3
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	fbb3 f2f2 	udiv	r2, r3, r2
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	441a      	add	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	fbb2 f3f3 	udiv	r3, r2, r3
 800759e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d910      	bls.n	80075c8 <UART_SetConfig+0x5c8>
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d20c      	bcs.n	80075c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	e009      	b.n	80075ce <UART_SetConfig+0x5ce>
 80075ba:	bf00      	nop
 80075bc:	40008000 	.word	0x40008000
 80075c0:	00f42400 	.word	0x00f42400
 80075c4:	08008a88 	.word	0x08008a88
      }
      else
      {
        ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2201      	movs	r2, #1
 80075da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2200      	movs	r2, #0
 80075e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3730      	adds	r7, #48	; 0x30
 80075f2:	46bd      	mov	sp, r7
 80075f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f6:	d10a      	bne.n	800770e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	605a      	str	r2, [r3, #4]
  }
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b098      	sub	sp, #96	; 0x60
 8007740:	af02      	add	r7, sp, #8
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800774c:	f7fa fa32 	bl	8001bb4 <HAL_GetTick>
 8007750:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b08      	cmp	r3, #8
 800775e:	d12f      	bne.n	80077c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f88e 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d022      	beq.n	80077c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778e:	653b      	str	r3, [r7, #80]	; 0x50
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007798:	647b      	str	r3, [r7, #68]	; 0x44
 800779a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800779e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e063      	b.n	8007888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d149      	bne.n	8007862 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d6:	2200      	movs	r2, #0
 80077d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f857 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d03c      	beq.n	8007862 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	623b      	str	r3, [r7, #32]
   return(result);
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
 8007808:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800780c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	60fb      	str	r3, [r7, #12]
   return(result);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	64bb      	str	r3, [r7, #72]	; 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800783a:	61fa      	str	r2, [r7, #28]
 800783c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69b9      	ldr	r1, [r7, #24]
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	617b      	str	r3, [r7, #20]
   return(result);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e012      	b.n	8007888 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3758      	adds	r7, #88	; 0x58
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a0:	e049      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d045      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078aa:	f7fa f983 	bl	8001bb4 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e048      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d031      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d110      	bne.n	8007902 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f95b 	bl	8007ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2208      	movs	r2, #8
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e029      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007910:	d111      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f941 	bl	8007ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d0a6      	beq.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007960:	b480      	push	{r7}
 8007962:	b0a3      	sub	sp, #140	; 0x8c
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	d10e      	bne.n	80079b2 <UART_Start_Receive_IT+0x52>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <UART_Start_Receive_IT+0x48>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079a6:	e02d      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	22ff      	movs	r2, #255	; 0xff
 80079ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079b0:	e028      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <UART_Start_Receive_IT+0x76>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <UART_Start_Receive_IT+0x6c>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079ca:	e01b      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	227f      	movs	r2, #127	; 0x7f
 80079d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079d4:	e016      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d10d      	bne.n	80079fc <UART_Start_Receive_IT+0x9c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <UART_Start_Receive_IT+0x92>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079f0:	e008      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	223f      	movs	r2, #63	; 0x3f
 80079f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079fa:	e003      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2222      	movs	r2, #34	; 0x22
 8007a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007a38:	673a      	str	r2, [r7, #112]	; 0x70
 8007a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e3      	bne.n	8007a14 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a54:	d14f      	bne.n	8007af6 <UART_Start_Receive_IT+0x196>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a5c:	88fa      	ldrh	r2, [r7, #6]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d349      	bcc.n	8007af6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	d107      	bne.n	8007a7c <UART_Start_Receive_IT+0x11c>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a47      	ldr	r2, [pc, #284]	; (8007b94 <UART_Start_Receive_IT+0x234>)
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74
 8007a7a:	e002      	b.n	8007a82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a46      	ldr	r2, [pc, #280]	; (8007b98 <UART_Start_Receive_IT+0x238>)
 8007a80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01a      	beq.n	8007ac0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ab2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e4      	bne.n	8007a8a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3308      	adds	r3, #8
 8007ade:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ae0:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ae2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e5      	bne.n	8007ac0 <UART_Start_Receive_IT+0x160>
 8007af4:	e046      	b.n	8007b84 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	d107      	bne.n	8007b10 <UART_Start_Receive_IT+0x1b0>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a24      	ldr	r2, [pc, #144]	; (8007b9c <UART_Start_Receive_IT+0x23c>)
 8007b0c:	675a      	str	r2, [r3, #116]	; 0x74
 8007b0e:	e002      	b.n	8007b16 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a23      	ldr	r2, [pc, #140]	; (8007ba0 <UART_Start_Receive_IT+0x240>)
 8007b14:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d019      	beq.n	8007b52 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b32:	677b      	str	r3, [r7, #116]	; 0x74
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e6      	bne.n	8007b1e <UART_Start_Receive_IT+0x1be>
 8007b50:	e018      	b.n	8007b84 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f043 0320 	orr.w	r3, r3, #32
 8007b66:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b70:	623b      	str	r3, [r7, #32]
 8007b72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	69f9      	ldr	r1, [r7, #28]
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	378c      	adds	r7, #140	; 0x8c
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	080083d1 	.word	0x080083d1
 8007b98:	0800806d 	.word	0x0800806d
 8007b9c:	08007eb1 	.word	0x08007eb1
 8007ba0:	08007cf5 	.word	0x08007cf5

08007ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b095      	sub	sp, #84	; 0x54
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bca:	643b      	str	r3, [r7, #64]	; 0x40
 8007bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e6      	bne.n	8007bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e3      	bne.n	8007bde <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d118      	bne.n	8007c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f023 0310 	bic.w	r3, r3, #16
 8007c32:	647b      	str	r3, [r7, #68]	; 0x44
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6979      	ldr	r1, [r7, #20]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e6      	bne.n	8007c1e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c64:	bf00      	nop
 8007c66:	3754      	adds	r7, #84	; 0x54
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff f9a0 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6979      	ldr	r1, [r7, #20]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e6      	bne.n	8007ca4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff f96b 	bl	8006fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cea:	bf00      	nop
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b09c      	sub	sp, #112	; 0x70
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0c:	2b22      	cmp	r3, #34	; 0x22
 8007d0e:	f040 80be 	bne.w	8007e8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d20:	b2d9      	uxtb	r1, r3
 8007d22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f040 80a3 	bne.w	8007ea2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e6      	bne.n	8007d5c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	667b      	str	r3, [r7, #100]	; 0x64
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dae:	647a      	str	r2, [r7, #68]	; 0x44
 8007db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e5      	bne.n	8007d8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a34      	ldr	r2, [pc, #208]	; (8007eac <UART_RxISR_8BIT+0x1b8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d01f      	beq.n	8007e20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e02:	663b      	str	r3, [r7, #96]	; 0x60
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d12e      	bne.n	8007e86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69b9      	ldr	r1, [r7, #24]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d103      	bne.n	8007e76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2210      	movs	r2, #16
 8007e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f8b2 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e84:	e00d      	b.n	8007ea2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7f8 fe50 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8007e8c:	e009      	b.n	8007ea2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	8b1b      	ldrh	r3, [r3, #24]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0208 	orr.w	r2, r2, #8
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	831a      	strh	r2, [r3, #24]
}
 8007ea2:	bf00      	nop
 8007ea4:	3770      	adds	r7, #112	; 0x70
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	40008000 	.word	0x40008000

08007eb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b09c      	sub	sp, #112	; 0x70
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ebe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec8:	2b22      	cmp	r3, #34	; 0x22
 8007eca:	f040 80be 	bne.w	800804a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ed4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ede:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007ee2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef2:	1c9a      	adds	r2, r3, #2
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f040 80a3 	bne.w	800805e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	657b      	str	r3, [r7, #84]	; 0x54
 8007f38:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f6a:	643a      	str	r2, [r7, #64]	; 0x40
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a34      	ldr	r2, [pc, #208]	; (8008068 <UART_RxISR_16BIT+0x1b8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d01f      	beq.n	8007fdc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d018      	beq.n	8007fdc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e6      	bne.n	8007faa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d12e      	bne.n	8008042 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e6      	bne.n	8007fea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	f003 0310 	and.w	r3, r3, #16
 8008026:	2b10      	cmp	r3, #16
 8008028:	d103      	bne.n	8008032 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2210      	movs	r2, #16
 8008030:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe ffd4 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008040:	e00d      	b.n	800805e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7f8 fd72 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8008048:	e009      	b.n	800805e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	8b1b      	ldrh	r3, [r3, #24]
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0208 	orr.w	r2, r2, #8
 800805a:	b292      	uxth	r2, r2
 800805c:	831a      	strh	r2, [r3, #24]
}
 800805e:	bf00      	nop
 8008060:	3770      	adds	r7, #112	; 0x70
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40008000 	.word	0x40008000

0800806c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0ac      	sub	sp, #176	; 0xb0
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800807a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a2:	2b22      	cmp	r3, #34	; 0x22
 80080a4:	f040 8182 	bne.w	80083ac <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080ae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080b2:	e125      	b.n	8008300 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080ba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80080c2:	b2d9      	uxtb	r1, r3
 80080c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	400a      	ands	r2, r1
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d053      	beq.n	80081ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d011      	beq.n	8008136 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00b      	beq.n	8008136 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2201      	movs	r2, #1
 8008124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800812c:	f043 0201 	orr.w	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d011      	beq.n	8008166 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2202      	movs	r2, #2
 8008154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815c:	f043 0204 	orr.w	r2, r3, #4
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2204      	movs	r2, #4
 8008184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	f043 0202 	orr.w	r2, r3, #2
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fe ff17 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 80a2 	bne.w	8008300 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80081ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	461a      	mov	r2, r3
 80081da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081e0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80081e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80081ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e4      	bne.n	80081bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3308      	adds	r3, #8
 8008216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800821a:	66ba      	str	r2, [r7, #104]	; 0x68
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e1      	bne.n	80081f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a60      	ldr	r2, [pc, #384]	; (80083c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d021      	beq.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800826a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800826e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800827c:	657b      	str	r3, [r7, #84]	; 0x54
 800827e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008282:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800828a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d130      	bne.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	f023 0310 	bic.w	r3, r3, #16
 80082b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082c0:	643b      	str	r3, [r7, #64]	; 0x40
 80082c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e4      	bne.n	800829e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d103      	bne.n	80082ea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe fe78 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
 80082f8:	e002      	b.n	8008300 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f8 fc16 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008300:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	f47f aecf 	bne.w	80080b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800831c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008320:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008324:	2b00      	cmp	r3, #0
 8008326:	d04b      	beq.n	80083c0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800832e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008332:	429a      	cmp	r2, r3
 8008334:	d244      	bcs.n	80083c0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	61fb      	str	r3, [r7, #28]
   return(result);
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800834c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800835a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800835c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e3      	bne.n	8008336 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a16      	ldr	r2, [pc, #88]	; (80083cc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008372:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	60bb      	str	r3, [r7, #8]
   return(result);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f043 0320 	orr.w	r3, r3, #32
 8008388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6979      	ldr	r1, [r7, #20]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	613b      	str	r3, [r7, #16]
   return(result);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e4      	bne.n	8008374 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083aa:	e009      	b.n	80083c0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	8b1b      	ldrh	r3, [r3, #24]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0208 	orr.w	r2, r2, #8
 80083bc:	b292      	uxth	r2, r2
 80083be:	831a      	strh	r2, [r3, #24]
}
 80083c0:	bf00      	nop
 80083c2:	37b0      	adds	r7, #176	; 0xb0
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40008000 	.word	0x40008000
 80083cc:	08007cf5 	.word	0x08007cf5

080083d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b0ae      	sub	sp, #184	; 0xb8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008406:	2b22      	cmp	r3, #34	; 0x22
 8008408:	f040 8186 	bne.w	8008718 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008412:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008416:	e129      	b.n	800866c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800841e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800842a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800842e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008432:	4013      	ands	r3, r2
 8008434:	b29a      	uxth	r2, r3
 8008436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800843a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	1c9a      	adds	r2, r3, #2
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b00      	cmp	r3, #0
 800846c:	d053      	beq.n	8008516 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800846e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d011      	beq.n	800849e <UART_RxISR_16BIT_FIFOEN+0xce>
 800847a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2201      	movs	r2, #1
 800848c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008494:	f043 0201 	orr.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800849e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d011      	beq.n	80084ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80084aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2202      	movs	r2, #2
 80084bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	f043 0204 	orr.w	r2, r3, #4
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d011      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80084da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2204      	movs	r2, #4
 80084ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f4:	f043 0202 	orr.w	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008504:	2b00      	cmp	r3, #0
 8008506:	d006      	beq.n	8008516 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe fd63 	bl	8006fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 80a4 	bne.w	800866c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800854a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800854e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e2      	bne.n	8008524 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800856e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008586:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800858c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e1      	bne.n	800855e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a60      	ldr	r2, [pc, #384]	; (8008734 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d021      	beq.n	80085fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d01a      	beq.n	80085fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d130      	bne.n	8008666 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	f023 0310 	bic.w	r3, r3, #16
 800861e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800862c:	647b      	str	r3, [r7, #68]	; 0x44
 800862e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e4      	bne.n	800860a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b10      	cmp	r3, #16
 800864c:	d103      	bne.n	8008656 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2210      	movs	r2, #16
 8008654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fe fcc2 	bl	8006fe8 <HAL_UARTEx_RxEventCallback>
 8008664:	e002      	b.n	800866c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7f8 fa60 	bl	8000b2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800866c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	f47f aecb 	bne.w	8008418 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008688:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800868c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008690:	2b00      	cmp	r3, #0
 8008692:	d04b      	beq.n	800872c <UART_RxISR_16BIT_FIFOEN+0x35c>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800869a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800869e:	429a      	cmp	r2, r3
 80086a0:	d244      	bcs.n	800872c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	623b      	str	r3, [r7, #32]
   return(result);
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3308      	adds	r3, #8
 80086c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086c6:	633a      	str	r2, [r7, #48]	; 0x30
 80086c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e3      	bne.n	80086a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a16      	ldr	r2, [pc, #88]	; (8008738 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80086de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f043 0320 	orr.w	r3, r3, #32
 80086f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008702:	61fb      	str	r3, [r7, #28]
 8008704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	69b9      	ldr	r1, [r7, #24]
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	617b      	str	r3, [r7, #20]
   return(result);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e4      	bne.n	80086e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008716:	e009      	b.n	800872c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	8b1b      	ldrh	r3, [r3, #24]
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0208 	orr.w	r2, r2, #8
 8008728:	b292      	uxth	r2, r2
 800872a:	831a      	strh	r2, [r3, #24]
}
 800872c:	bf00      	nop
 800872e:	37b8      	adds	r7, #184	; 0xb8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40008000 	.word	0x40008000
 8008738:	08007eb1 	.word	0x08007eb1

0800873c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_DisableFifoMode+0x16>
 800878a:	2302      	movs	r3, #2
 800878c:	e027      	b.n	80087de <HAL_UARTEx_DisableFifoMode+0x66>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	; 0x24
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087fe:	2302      	movs	r3, #2
 8008800:	e02d      	b.n	800885e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	; 0x24
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f850 	bl	80088e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800887a:	2302      	movs	r3, #2
 800887c:	e02d      	b.n	80088da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2224      	movs	r2, #36	; 0x24
 800888a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0201 	bic.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f812 	bl	80088e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d108      	bne.n	8008906 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008904:	e031      	b.n	800896a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008906:	2308      	movs	r3, #8
 8008908:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800890a:	2308      	movs	r3, #8
 800890c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	0e5b      	lsrs	r3, r3, #25
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	0f5b      	lsrs	r3, r3, #29
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	7b3a      	ldrb	r2, [r7, #12]
 8008932:	4911      	ldr	r1, [pc, #68]	; (8008978 <UARTEx_SetNbDataToProcess+0x94>)
 8008934:	5c8a      	ldrb	r2, [r1, r2]
 8008936:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800893a:	7b3a      	ldrb	r2, [r7, #12]
 800893c:	490f      	ldr	r1, [pc, #60]	; (800897c <UARTEx_SetNbDataToProcess+0x98>)
 800893e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008940:	fb93 f3f2 	sdiv	r3, r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	7b7a      	ldrb	r2, [r7, #13]
 8008950:	4909      	ldr	r1, [pc, #36]	; (8008978 <UARTEx_SetNbDataToProcess+0x94>)
 8008952:	5c8a      	ldrb	r2, [r1, r2]
 8008954:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008958:	7b7a      	ldrb	r2, [r7, #13]
 800895a:	4908      	ldr	r1, [pc, #32]	; (800897c <UARTEx_SetNbDataToProcess+0x98>)
 800895c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800895e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	08008aa0 	.word	0x08008aa0
 800897c:	08008aa8 	.word	0x08008aa8

08008980 <memset>:
 8008980:	4402      	add	r2, r0
 8008982:	4603      	mov	r3, r0
 8008984:	4293      	cmp	r3, r2
 8008986:	d100      	bne.n	800898a <memset+0xa>
 8008988:	4770      	bx	lr
 800898a:	f803 1b01 	strb.w	r1, [r3], #1
 800898e:	e7f9      	b.n	8008984 <memset+0x4>

08008990 <__libc_init_array>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	4d0d      	ldr	r5, [pc, #52]	; (80089c8 <__libc_init_array+0x38>)
 8008994:	4c0d      	ldr	r4, [pc, #52]	; (80089cc <__libc_init_array+0x3c>)
 8008996:	1b64      	subs	r4, r4, r5
 8008998:	10a4      	asrs	r4, r4, #2
 800899a:	2600      	movs	r6, #0
 800899c:	42a6      	cmp	r6, r4
 800899e:	d109      	bne.n	80089b4 <__libc_init_array+0x24>
 80089a0:	4d0b      	ldr	r5, [pc, #44]	; (80089d0 <__libc_init_array+0x40>)
 80089a2:	4c0c      	ldr	r4, [pc, #48]	; (80089d4 <__libc_init_array+0x44>)
 80089a4:	f000 f818 	bl	80089d8 <_init>
 80089a8:	1b64      	subs	r4, r4, r5
 80089aa:	10a4      	asrs	r4, r4, #2
 80089ac:	2600      	movs	r6, #0
 80089ae:	42a6      	cmp	r6, r4
 80089b0:	d105      	bne.n	80089be <__libc_init_array+0x2e>
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
 80089b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b8:	4798      	blx	r3
 80089ba:	3601      	adds	r6, #1
 80089bc:	e7ee      	b.n	800899c <__libc_init_array+0xc>
 80089be:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c2:	4798      	blx	r3
 80089c4:	3601      	adds	r6, #1
 80089c6:	e7f2      	b.n	80089ae <__libc_init_array+0x1e>
 80089c8:	08008ab8 	.word	0x08008ab8
 80089cc:	08008ab8 	.word	0x08008ab8
 80089d0:	08008ab8 	.word	0x08008ab8
 80089d4:	08008abc 	.word	0x08008abc

080089d8 <_init>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

080089e4 <_fini>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr
