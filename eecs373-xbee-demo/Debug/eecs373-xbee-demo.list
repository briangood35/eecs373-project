
eecs373-xbee-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005048  08005048  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800505c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800505c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d94e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d81  00000000  00000000  0002d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002f750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286b2  00000000  00000000  000309bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf42  00000000  00000000  0005906d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9604  00000000  00000000  00065faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a04  00000000  00000000  0015f5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00161fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004fb8 	.word	0x08004fb8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004fb8 	.word	0x08004fb8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t rx_buf[8] = { 0 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart3, rx_buf, 8);
 8000500:	2208      	movs	r2, #8
 8000502:	4904      	ldr	r1, [pc, #16]	; (8000514 <HAL_UART_RxCpltCallback+0x1c>)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <HAL_UART_RxCpltCallback+0x20>)
 8000506:	f002 fcdb 	bl	8002ec0 <HAL_UART_Receive_IT>
  __NOP(); // set breakpoint here
 800050a:	bf00      	nop
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000bc 	.word	0x200000bc
 8000518:	20000028 	.word	0x20000028

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbe7 	bl	8000cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80e 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f850 	bl	80005d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, rx_buf, 8);
 8000530:	2208      	movs	r2, #8
 8000532:	4902      	ldr	r1, [pc, #8]	; (800053c <main+0x20>)
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x24>)
 8000536:	f002 fcc3 	bl	8002ec0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x1e>
 800053c:	200000bc 	.word	0x200000bc
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	; 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fd04 	bl	8004f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056a:	f000 ffb5 	bl	80014d8 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 fabe 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000578:	2310      	movs	r3, #16
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f855 	bl	8001640 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800059c:	f000 faaa 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fc5b 	bl	8001e74 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c4:	f000 fa96 	bl	8000af4 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005d6:	4a23      	ldr	r2, [pc, #140]	; (8000664 <MX_USART3_UART_Init+0x94>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_USART3_UART_Init+0x90>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_USART3_UART_Init+0x90>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_USART3_UART_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_USART3_UART_Init+0x90>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_USART3_UART_Init+0x90>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <MX_USART3_UART_Init+0x90>)
 800061a:	f002 fc01 	bl	8002e20 <HAL_UART_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000624:	f000 fa66 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_USART3_UART_Init+0x90>)
 800062c:	f004 fbcd 	bl	8004dca <HAL_UARTEx_SetTxFifoThreshold>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000636:	f000 fa5d 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <MX_USART3_UART_Init+0x90>)
 800063e:	f004 fc02 	bl	8004e46 <HAL_UARTEx_SetRxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000648:	f000 fa54 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_USART3_UART_Init+0x90>)
 800064e:	f004 fb83 	bl	8004d58 <HAL_UARTEx_DisableFifoMode>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000658:	f000 fa4c 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	40004800 	.word	0x40004800

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	; 0x38
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067e:	4bb2      	ldr	r3, [pc, #712]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4ab1      	ldr	r2, [pc, #708]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000684:	f043 0310 	orr.w	r3, r3, #16
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4baf      	ldr	r3, [pc, #700]	; (8000948 <MX_GPIO_Init+0x2e0>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0310 	and.w	r3, r3, #16
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4bac      	ldr	r3, [pc, #688]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4aab      	ldr	r2, [pc, #684]	; (8000948 <MX_GPIO_Init+0x2e0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4ba9      	ldr	r3, [pc, #676]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	4ba6      	ldr	r3, [pc, #664]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4aa5      	ldr	r2, [pc, #660]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4ba3      	ldr	r3, [pc, #652]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4ba0      	ldr	r3, [pc, #640]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a9f      	ldr	r2, [pc, #636]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b9d      	ldr	r3, [pc, #628]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b9a      	ldr	r3, [pc, #616]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a99      	ldr	r2, [pc, #612]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b97      	ldr	r3, [pc, #604]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b94      	ldr	r3, [pc, #592]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a93      	ldr	r2, [pc, #588]	; (8000948 <MX_GPIO_Init+0x2e0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b91      	ldr	r3, [pc, #580]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b8e      	ldr	r3, [pc, #568]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a8d      	ldr	r2, [pc, #564]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b8b      	ldr	r3, [pc, #556]	; (8000948 <MX_GPIO_Init+0x2e0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	4b88      	ldr	r3, [pc, #544]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a87      	ldr	r2, [pc, #540]	; (8000948 <MX_GPIO_Init+0x2e0>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b85      	ldr	r3, [pc, #532]	; (8000948 <MX_GPIO_Init+0x2e0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800073e:	f000 ff6f 	bl	8001620 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000742:	230c      	movs	r3, #12
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000752:	230d      	movs	r3, #13
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4619      	mov	r1, r3
 800075c:	487b      	ldr	r0, [pc, #492]	; (800094c <MX_GPIO_Init+0x2e4>)
 800075e:	f000 fd09 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000762:	2307      	movs	r3, #7
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000766:	2312      	movs	r3, #18
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000772:	2304      	movs	r3, #4
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4874      	ldr	r0, [pc, #464]	; (8000950 <MX_GPIO_Init+0x2e8>)
 800077e:	f000 fcf9 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000792:	230d      	movs	r3, #13
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	486c      	ldr	r0, [pc, #432]	; (8000950 <MX_GPIO_Init+0x2e8>)
 800079e:	f000 fce9 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007a2:	233f      	movs	r3, #63	; 0x3f
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007a6:	230b      	movs	r3, #11
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	4867      	ldr	r0, [pc, #412]	; (8000954 <MX_GPIO_Init+0x2ec>)
 80007b6:	f000 fcdd 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007ca:	2301      	movs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fccc 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007dc:	2308      	movs	r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007e0:	230b      	movs	r3, #11
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fcbf 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23f0      	movs	r3, #240	; 0xf0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000806:	2305      	movs	r3, #5
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fcae 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000818:	2301      	movs	r3, #1
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000828:	2302      	movs	r3, #2
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4849      	ldr	r0, [pc, #292]	; (8000958 <MX_GPIO_Init+0x2f0>)
 8000834:	f000 fc9e 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000838:	2302      	movs	r3, #2
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800083c:	230b      	movs	r3, #11
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4843      	ldr	r0, [pc, #268]	; (8000958 <MX_GPIO_Init+0x2f0>)
 800084c:	f000 fc92 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000850:	2344      	movs	r3, #68	; 0x44
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	483d      	ldr	r0, [pc, #244]	; (8000958 <MX_GPIO_Init+0x2f0>)
 8000864:	f000 fc86 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000868:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800087a:	2301      	movs	r3, #1
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4831      	ldr	r0, [pc, #196]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000886:	f000 fc75 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800088a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800089c:	2303      	movs	r3, #3
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4829      	ldr	r0, [pc, #164]	; (800094c <MX_GPIO_Init+0x2e4>)
 80008a8:	f000 fc64 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008be:	2301      	movs	r3, #1
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	4823      	ldr	r0, [pc, #140]	; (8000958 <MX_GPIO_Init+0x2f0>)
 80008ca:	f000 fc53 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008ce:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80008e0:	230d      	movs	r3, #13
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <MX_GPIO_Init+0x2f0>)
 80008ec:	f000 fc42 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000902:	230e      	movs	r3, #14
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4812      	ldr	r0, [pc, #72]	; (8000958 <MX_GPIO_Init+0x2f0>)
 800090e:	f000 fc31 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000912:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000924:	2302      	movs	r3, #2
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0x2f4>)
 8000930:	f000 fc20 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000934:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	e00c      	b.n	8000960 <MX_GPIO_Init+0x2f8>
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	48001000 	.word	0x48001000
 8000950:	48001400 	.word	0x48001400
 8000954:	48000800 	.word	0x48000800
 8000958:	48000400 	.word	0x48000400
 800095c:	48000c00 	.word	0x48000c00
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000962:	2308      	movs	r3, #8
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	485c      	ldr	r0, [pc, #368]	; (8000ae0 <MX_GPIO_Init+0x478>)
 800096e:	f000 fc01 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000982:	230d      	movs	r3, #13
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	4855      	ldr	r0, [pc, #340]	; (8000ae4 <MX_GPIO_Init+0x47c>)
 800098e:	f000 fbf1 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009a2:	2302      	movs	r3, #2
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	484d      	ldr	r0, [pc, #308]	; (8000ae4 <MX_GPIO_Init+0x47c>)
 80009ae:	f000 fbe1 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009c4:	230c      	movs	r3, #12
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x47c>)
 80009d0:	f000 fbd0 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80009d4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e6:	230a      	movs	r3, #10
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fbbe 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fbb0 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a24:	2309      	movs	r3, #9
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x480>)
 8000a30:	f000 fba0 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a44:	230c      	movs	r3, #12
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0x480>)
 8000a50:	f000 fb90 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a54:	2378      	movs	r3, #120	; 0x78
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a64:	2307      	movs	r3, #7
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0x480>)
 8000a70:	f000 fb80 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a74:	2338      	movs	r3, #56	; 0x38
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a84:	2306      	movs	r3, #6
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <MX_GPIO_Init+0x484>)
 8000a90:	f000 fb70 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_GPIO_Init+0x484>)
 8000ab2:	f000 fb5f 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_GPIO_Init+0x488>)
 8000ad2:	f000 fb4f 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	48001800 	.word	0x48001800
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000c00 	.word	0x48000c00
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48001000 	.word	0x48001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0ae      	sub	sp, #184	; 0xb8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2294      	movs	r2, #148	; 0x94
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 f9f9 	bl	8004f60 <memset>
  if(huart->Instance==USART3)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a25      	ldr	r2, [pc, #148]	; (8000c08 <HAL_UART_MspInit+0xc0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d143      	bne.n	8000c00 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fc33 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b90:	f7ff ffb0 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0xc4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bde:	2307      	movs	r3, #7
 8000be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <HAL_UART_MspInit+0xc8>)
 8000bec:	f000 fac2 	bl	8001174 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2027      	movs	r0, #39	; 0x27
 8000bf6:	f000 f9cc 	bl	8000f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bfa:	2027      	movs	r0, #39	; 0x27
 8000bfc:	f000 f9e5 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	37b8      	adds	r7, #184	; 0xb8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000c00 	.word	0x48000c00

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f89c 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <USART3_IRQHandler+0x10>)
 8000c6e:	f002 f973 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000028 	.word	0x20000028

08000c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff ffea 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	; (8000ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	; (8000cec <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 f94f 	bl	8004f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fc23 	bl	800051c <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	08005050 	.word	0x08005050
  ldr r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cec:	200000c8 	.word	0x200000c8

08000cf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_IRQHandler>

08000cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f93d 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f80e 	bl	8000d24 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff fef4 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d023      	beq.n	8000d80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_InitTick+0x70>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f949 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10f      	bne.n	8000d7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d68:	f000 f913 	bl	8000f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0x74>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200000c4 	.word	0x200000c4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000c4 	.word	0x200000c4

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff29 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff3e 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff31 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa2 	bl	8000f38 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d008      	beq.n	8001028 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2204      	movs	r2, #4
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e040      	b.n	80010aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 020e 	bic.w	r2, r2, #14
 8001036:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001046:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001074:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00c      	beq.n	8001098 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001096:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d005      	beq.n	80010da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e047      	b.n	800116a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 020e 	bic.w	r2, r2, #14
 80010e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 021c 	and.w	r2, r3, #28
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001126:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00c      	beq.n	800114a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001148:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	4798      	blx	r3
    }
  }
  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e166      	b.n	8001452 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8158 	beq.w	800144c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x40>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80b2 	beq.w	800144c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b61      	ldr	r3, [pc, #388]	; (8001470 <HAL_GPIO_Init+0x2fc>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ec:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_GPIO_Init+0x2fc>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6613      	str	r3, [r2, #96]	; 0x60
 80012f4:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_GPIO_Init+0x2fc>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001300:	4a5c      	ldr	r2, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132a:	d02b      	beq.n	8001384 <HAL_GPIO_Init+0x210>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d025      	beq.n	8001380 <HAL_GPIO_Init+0x20c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x308>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d01f      	beq.n	800137c <HAL_GPIO_Init+0x208>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x30c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d019      	beq.n	8001378 <HAL_GPIO_Init+0x204>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x310>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x200>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <HAL_GPIO_Init+0x314>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1fc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_GPIO_Init+0x318>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1f8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x31c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1f4>
 8001364:	2307      	movs	r3, #7
 8001366:	e00e      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001368:	2308      	movs	r3, #8
 800136a:	e00c      	b.n	8001386 <HAL_GPIO_Init+0x212>
 800136c:	2306      	movs	r3, #6
 800136e:	e00a      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001370:	2305      	movs	r3, #5
 8001372:	e008      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001374:	2304      	movs	r3, #4
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001378:	2303      	movs	r3, #3
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x212>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x212>
 8001384:	2300      	movs	r3, #0
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001396:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a4:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x320>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c8:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0x320>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_GPIO_Init+0x320>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f2:	4a28      	ldr	r2, [pc, #160]	; (8001494 <HAL_GPIO_Init+0x320>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x320>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x320>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_GPIO_Init+0x320>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_GPIO_Init+0x320>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f47f ae91 	bne.w	8001184 <HAL_GPIO_Init+0x10>
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	48000400 	.word	0x48000400
 800147c:	48000800 	.word	0x48000800
 8001480:	48000c00 	.word	0x48000c00
 8001484:	48001000 	.word	0x48001000
 8001488:	48001400 	.word	0x48001400
 800148c:	48001800 	.word	0x48001800
 8001490:	48001c00 	.word	0x48001c00
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d102      	bne.n	80014b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ae:	e00b      	b.n	80014c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014be:	d102      	bne.n	80014c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	e000      	b.n	80014c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000

080014d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d141      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d131      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fa:	4a46      	ldr	r2, [pc, #280]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2232      	movs	r2, #50	; 0x32
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a3f      	ldr	r2, [pc, #252]	; (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	3301      	adds	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152a:	e002      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3b01      	subs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d102      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f2      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d158      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e057      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001568:	e04d      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001570:	d141      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157e:	d131      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001586:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2232      	movs	r2, #50	; 0x32
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	e002      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ca:	d102      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f2      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	d112      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e011      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015f4:	e007      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001604:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40007000 	.word	0x40007000
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83

08001620 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_PWREx_EnableVddIO2+0x1c>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6053      	str	r3, [r2, #4]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	f000 bc08 	b.w	8001e64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165e:	4b94      	ldr	r3, [pc, #592]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80e4 	beq.w	800183e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_RCC_OscConfig+0x4c>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	f040 808b 	bne.w	800179a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 8087 	bne.w	800179a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x64>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e3df      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_RCC_OscConfig+0x7e>
 80016b4:	4b7e      	ldr	r3, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016bc:	e005      	b.n	80016ca <HAL_RCC_OscConfig+0x8a>
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d223      	bcs.n	8001716 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fdcc 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3c0      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	496d      	ldr	r1, [pc, #436]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001700:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4968      	ldr	r1, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e025      	b.n	8001762 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001716:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4960      	ldr	r1, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	495b      	ldr	r1, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd8c 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e380      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001762:	f000 fcc1 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	4950      	ldr	r1, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x278>)
 8001780:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff facc 	bl	8000d24 <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d052      	beq.n	800183c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	e364      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d032      	beq.n	8001808 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a42      	ldr	r2, [pc, #264]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb09 	bl	8000dc4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb05 	bl	8000dc4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e34d      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a35      	ldr	r2, [pc, #212]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4930      	ldr	r1, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	492b      	ldr	r1, [pc, #172]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e01a      	b.n	800183e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001814:	f7ff fad6 	bl	8000dc4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181c:	f7ff fad2 	bl	8000dc4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e31a      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1dc>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d073      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x21c>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d10e      	bne.n	8001874 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d10b      	bne.n	8001874 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d063      	beq.n	8001930 <HAL_RCC_OscConfig+0x2f0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d15f      	bne.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e2f7      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x24c>
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e025      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d114      	bne.n	80018c0 <HAL_RCC_OscConfig+0x280>
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a02      	ldr	r2, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	08004fd0 	.word	0x08004fd0
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004
 80018c0:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9f      	ldr	r2, [pc, #636]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9c      	ldr	r2, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa70 	bl	8000dc4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fa6c 	bl	8000dc4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e2b4      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2a8>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fa5c 	bl	8000dc4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fa58 	bl	8000dc4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e2a0      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x2d0>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d060      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x310>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d119      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d116      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x328>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e27d      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4973      	ldr	r1, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e040      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d023      	beq.n	80019ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fa17 	bl	8000dc4 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fa13 	bl	8000dc4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e25b      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	495f      	ldr	r1, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f9f3 	bl	8000dc4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f9ef 	bl	8000dc4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e237      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f9ce 	bl	8000dc4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f9ca 	bl	8000dc4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e212      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ef      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3ec>
 8001a4c:	e01b      	b.n	8001a86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a54:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f9b1 	bl	8000dc4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f9ad 	bl	8000dc4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1f5      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a6 	beq.w	8001be0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f974 	bl	8000dc4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7ff f970 	bl	8000dc4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1b8      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d8>
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e029      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_OscConfig+0x50c>
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	4b9d      	ldr	r3, [pc, #628]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a9c      	ldr	r2, [pc, #624]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	4b99      	ldr	r3, [pc, #612]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f926 	bl	8000dc4 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f922 	bl	8000dc4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e168      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b8c      	ldr	r3, [pc, #560]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ed      	beq.n	8001b7c <HAL_RCC_OscConfig+0x53c>
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f90f 	bl	8000dc4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f90b 	bl	8000dc4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e151      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	4b80      	ldr	r3, [pc, #512]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ed      	bne.n	8001baa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d03c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf4:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfa:	4a72      	ldr	r2, [pc, #456]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f8de 	bl	8000dc4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0c:	f7ff f8da 	bl	8000dc4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e122      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_RCC_OscConfig+0x5cc>
 8001c2c:	e01b      	b.n	8001c66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c34:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f8c1 	bl	8000dc4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c46:	f7ff f8bd 	bl	8000dc4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e105      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80f9 	beq.w	8001e62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	f040 80cf 	bne.w	8001e18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c7a:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d123      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d11b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d113      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d109      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d071      	beq.n	8001dcc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d068      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0ac      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d16:	f7ff f855 	bl	8000dc4 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f851 	bl	8000dc4 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e099      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x788>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d4c:	3a01      	subs	r2, #1
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d56:	0212      	lsls	r2, r2, #8
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d5e:	0852      	lsrs	r2, r2, #1
 8001d60:	3a01      	subs	r2, #1
 8001d62:	0552      	lsls	r2, r2, #21
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d6a:	0852      	lsrs	r2, r2, #1
 8001d6c:	3a01      	subs	r2, #1
 8001d6e:	0652      	lsls	r2, r2, #25
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d76:	06d2      	lsls	r2, r2, #27
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	4912      	ldr	r1, [pc, #72]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d98:	f7ff f814 	bl	8000dc4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f810 	bl	8000dc4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e058      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbe:	e050      	b.n	8001e62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e04f      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d144      	bne.n	8001e62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df0:	f7fe ffe8 	bl	8000dc4 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ffe4 	bl	8000dc4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e02c      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x7b8>
 8001e16:	e024      	b.n	8001e62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d01f      	beq.n	8001e5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe ffcb 	bl	8000dc4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe ffc7 	bl	8000dc4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4905      	ldr	r1, [pc, #20]	; (8001e6c <HAL_RCC_OscConfig+0x82c>)
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x830>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e001      	b.n	8001e62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	feeefffc 	.word	0xfeeefffc

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e11d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b8d      	ldr	r3, [pc, #564]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	498b      	ldr	r1, [pc, #556]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e105      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	497b      	ldr	r1, [pc, #492]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d079      	beq.n	8001fea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d11e      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0dc      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f0e:	f000 fa09 	bl	8002324 <RCC_GetSysClockFreqFromPLLSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d946      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d140      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f26:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f2e:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e035      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f44:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d115      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b9      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5c:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ad      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0a5      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f7c:	f000 f8b4 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d90f      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 0203 	bic.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4947      	ldr	r1, [pc, #284]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fba:	f7fe ff03 	bl	8000dc4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7fe feff 	bl	8000dc4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e077      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 020c 	and.w	r2, r3, #12
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d1eb      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ffa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d208      	bcs.n	800202a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d210      	bcs.n	800205a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	4923      	ldr	r1, [pc, #140]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e036      	b.n	80020c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4918      	ldr	r1, [pc, #96]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4910      	ldr	r1, [pc, #64]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002098:	f000 f826 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <HAL_RCC_ClockConfig+0x268>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x26c>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x270>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fe31 	bl	8000d24 <HAL_InitTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	04c4b400 	.word	0x04c4b400
 80020dc:	08004fd0 	.word	0x08004fd0
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x34>
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d121      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11e      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e005      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d102      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e004      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 800216e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d134      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0xa6>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xac>
 800218c:	e005      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002190:	617b      	str	r3, [r7, #20]
      break;
 8002192:	e005      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002196:	617b      	str	r3, [r7, #20]
      break;
 8002198:	e002      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0e5b      	lsrs	r3, r3, #25
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	3301      	adds	r3, #1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e0:	69bb      	ldr	r3, [r7, #24]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08004fe8 	.word	0x08004fe8
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	007a1200 	.word	0x007a1200

08002200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_RCC_GetHCLKFreq+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800221c:	f7ff fff0 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08004fe0 	.word	0x08004fe0

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002248:	f7ff ffda 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <HAL_RCC_GetPCLK2Freq+0x28>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08004fe0 	.word	0x08004fe0

08002270 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002288:	f7ff f906 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 800228c:	6178      	str	r0, [r7, #20]
 800228e:	e014      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4a21      	ldr	r2, [pc, #132]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	; 0x58
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f8f6 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d10b      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d913      	bls.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2ba0      	cmp	r3, #160	; 0xa0
 80022cc:	d902      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ce:	2302      	movs	r3, #2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e00d      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e00a      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b7f      	cmp	r3, #127	; 0x7f
 80022de:	d902      	bls.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e004      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b70      	cmp	r3, #112	; 0x70
 80022ea:	d101      	bne.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 020f 	bic.w	r2, r3, #15
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d00b      	beq.n	8002352 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d825      	bhi.n	800238c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d008      	beq.n	8002358 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11f      	bne.n	800238c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800234e:	613b      	str	r3, [r7, #16]
    break;
 8002350:	e01f      	b.n	8002392 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002354:	613b      	str	r3, [r7, #16]
    break;
 8002356:	e01c      	b.n	8002392 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e005      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002388:	613b      	str	r3, [r7, #16]
    break;
 800238a:	e002      	b.n	8002392 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
    break;
 8002390:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	3301      	adds	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	fb03 f202 	mul.w	r2, r3, r2
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0e5b      	lsrs	r3, r3, #25
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023d2:	683b      	ldr	r3, [r7, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	08004fe8 	.word	0x08004fe8

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	d040      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d02a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d825      	bhi.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d026      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d821      	bhi.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d006      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d81d      	bhi.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800242c:	2b20      	cmp	r3, #32
 800242e:	d010      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002430:	e018      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a88      	ldr	r2, [pc, #544]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800243e:	e015      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fb02 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002450:	e00c      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3320      	adds	r3, #32
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fbed 	bl	8002c38 <RCCEx_PLLSAI2_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002462:	e003      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	74fb      	strb	r3, [r7, #19]
      break;
 8002468:	e000      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800246a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002478:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002480:	4975      	ldr	r1, [pc, #468]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002488:	e001      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d047      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a2:	d030      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a8:	d82a      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ae:	d02a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024b4:	d824      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d81e      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d010      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024cc:	e018      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024ce:	4b62      	ldr	r3, [pc, #392]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024da:	e015      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fab4 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ec:	e00c      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3320      	adds	r3, #32
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fb9f 	bl	8002c38 <RCCEx_PLLSAI2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fe:	e003      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	74fb      	strb	r3, [r7, #19]
      break;
 8002504:	e000      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	494e      	ldr	r1, [pc, #312]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002524:	e001      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809f 	beq.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800253c:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3a      	ldr	r2, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800257a:	f7fe fc23 	bl	8000dc4 <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002580:	e009      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe fc1f 	bl	8000dc4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d902      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	74fb      	strb	r3, [r7, #19]
        break;
 8002594:	e005      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0ef      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d15b      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01f      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d019      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f2:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d016      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fbde 	bl	8000dc4 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	e00b      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe fbda 	bl	8000dc4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d902      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	74fb      	strb	r3, [r7, #19]
            break;
 8002622:	e006      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ec      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
 8002656:	e005      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002658:	40021000 	.word	0x40021000
 800265c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002664:	7c7b      	ldrb	r3, [r7, #17]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	4a9f      	ldr	r2, [pc, #636]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002682:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	f023 0203 	bic.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	4996      	ldr	r1, [pc, #600]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a4:	4b91      	ldr	r3, [pc, #580]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 020c 	bic.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	498e      	ldr	r1, [pc, #568]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	4985      	ldr	r1, [pc, #532]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026e8:	4b80      	ldr	r3, [pc, #512]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	497d      	ldr	r1, [pc, #500]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800270a:	4b78      	ldr	r3, [pc, #480]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4974      	ldr	r1, [pc, #464]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	496c      	ldr	r1, [pc, #432]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275c:	4963      	ldr	r1, [pc, #396]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002770:	4b5e      	ldr	r3, [pc, #376]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277e:	495b      	ldr	r1, [pc, #364]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002792:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	4952      	ldr	r1, [pc, #328]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	494a      	ldr	r1, [pc, #296]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	4941      	ldr	r1, [pc, #260]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027f8:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	4939      	ldr	r1, [pc, #228]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	4930      	ldr	r1, [pc, #192]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002838:	d106      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002844:	60d3      	str	r3, [r2, #12]
 8002846:	e011      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f8f9 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d04d      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002880:	d108      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002884:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002892:	e012      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
 80028d0:	e020      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028da:	d109      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a02      	ldr	r2, [pc, #8]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	60d3      	str	r3, [r2, #12]
 80028e8:	e014      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f8a5 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d028      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	4947      	ldr	r1, [pc, #284]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293e:	d106      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a41      	ldr	r2, [pc, #260]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e011      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002956:	d10c      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f876 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01e      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298e:	492f      	ldr	r1, [pc, #188]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f851 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ce:	f023 0204 	bic.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	491c      	ldr	r1, [pc, #112]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029ec:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029f2:	f023 0218 	bic.w	r2, r3, #24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	4913      	ldr	r1, [pc, #76]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a20:	490a      	ldr	r1, [pc, #40]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a40:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a5e:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00e      	beq.n	8002a88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a6a:	4b6f      	ldr	r3, [pc, #444]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d103      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d142      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e03f      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d018      	beq.n	8002ac2 <RCCEx_PLLSAI1_Config+0x72>
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d825      	bhi.n	8002ae0 <RCCEx_PLLSAI1_Config+0x90>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d002      	beq.n	8002a9e <RCCEx_PLLSAI1_Config+0x4e>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d009      	beq.n	8002ab0 <RCCEx_PLLSAI1_Config+0x60>
 8002a9c:	e020      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a9e:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11d      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aae:	e01a      	b.n	8002ae6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d116      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e013      	b.n	8002aea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac2:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ade:	e006      	b.n	8002aee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e004      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002af6:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4949      	ldr	r1, [pc, #292]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 8086 	bne.w	8002c1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b10:	4b45      	ldr	r3, [pc, #276]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a44      	ldr	r2, [pc, #272]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe f952 	bl	8000dc4 <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b22:	e009      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b24:	f7fe f94e 	bl	8000dc4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	73fb      	strb	r3, [r7, #15]
        break;
 8002b36:	e005      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ef      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d168      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d113      	bne.n	8002b78 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	0211      	lsls	r1, r2, #8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	06d2      	lsls	r2, r2, #27
 8002b64:	4311      	orrs	r1, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6852      	ldr	r2, [r2, #4]
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	492d      	ldr	r1, [pc, #180]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]
 8002b76:	e02d      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d115      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	0211      	lsls	r1, r2, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6912      	ldr	r2, [r2, #16]
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0552      	lsls	r2, r2, #21
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6852      	ldr	r2, [r2, #4]
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	610b      	str	r3, [r1, #16]
 8002ba8:	e014      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6892      	ldr	r2, [r2, #8]
 8002bb6:	0211      	lsls	r1, r2, #8
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6952      	ldr	r2, [r2, #20]
 8002bbc:	0852      	lsrs	r2, r2, #1
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	0652      	lsls	r2, r2, #25
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6852      	ldr	r2, [r2, #4]
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	4916      	ldr	r1, [pc, #88]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe f8f0 	bl	8000dc4 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be6:	e009      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be8:	f7fe f8ec 	bl	8000dc4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfa:	e005      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ef      	beq.n	8002be8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	07ff800f 	.word	0x07ff800f
 8002c30:	ff9f800f 	.word	0xff9f800f
 8002c34:	f9ff800f 	.word	0xf9ff800f

08002c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c46:	4b72      	ldr	r3, [pc, #456]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00e      	beq.n	8002c70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d103      	bne.n	8002c6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
       ||
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d142      	bne.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e03f      	b.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d018      	beq.n	8002caa <RCCEx_PLLSAI2_Config+0x72>
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d825      	bhi.n	8002cc8 <RCCEx_PLLSAI2_Config+0x90>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d002      	beq.n	8002c86 <RCCEx_PLLSAI2_Config+0x4e>
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d009      	beq.n	8002c98 <RCCEx_PLLSAI2_Config+0x60>
 8002c84:	e020      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c86:	4b62      	ldr	r3, [pc, #392]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11d      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c96:	e01a      	b.n	8002cce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c98:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d116      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca8:	e013      	b.n	8002cd2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cb6:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cc6:	e006      	b.n	8002cd6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e004      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4949      	ldr	r1, [pc, #292]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 8086 	bne.w	8002e04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a44      	ldr	r2, [pc, #272]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe f85e 	bl	8000dc4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d0a:	e009      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d0c:	f7fe f85a 	bl	8000dc4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d1e:	e005      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ef      	bne.n	8002d0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d168      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d113      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	0211      	lsls	r1, r2, #8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	06d2      	lsls	r2, r2, #27
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6852      	ldr	r2, [r2, #4]
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	430a      	orrs	r2, r1
 8002d58:	492d      	ldr	r1, [pc, #180]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	614b      	str	r3, [r1, #20]
 8002d5e:	e02d      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d115      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6892      	ldr	r2, [r2, #8]
 8002d72:	0211      	lsls	r1, r2, #8
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6912      	ldr	r2, [r2, #16]
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	0552      	lsls	r2, r2, #21
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4921      	ldr	r1, [pc, #132]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	614b      	str	r3, [r1, #20]
 8002d90:	e014      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1e4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	0211      	lsls	r1, r2, #8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6952      	ldr	r2, [r2, #20]
 8002da4:	0852      	lsrs	r2, r2, #1
 8002da6:	3a01      	subs	r2, #1
 8002da8:	0652      	lsls	r2, r2, #25
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	3a01      	subs	r2, #1
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	430a      	orrs	r2, r1
 8002db6:	4916      	ldr	r1, [pc, #88]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fd fffc 	bl	8000dc4 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dce:	e009      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd0:	f7fd fff8 	bl	8000dc4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d902      	bls.n	8002de4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	73fb      	strb	r3, [r7, #15]
          break;
 8002de2:	e005      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	4904      	ldr	r1, [pc, #16]	; (8002e10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	07ff800f 	.word	0x07ff800f
 8002e18:	ff9f800f 	.word	0xff9f800f
 8002e1c:	f9ff800f 	.word	0xf9ff800f

08002e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e042      	b.n	8002eb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fe7f 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2224      	movs	r2, #36	; 0x24
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 feb4 	bl	8003bd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fbb5 	bl	80035e0 <UART_SetConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e01b      	b.n	8002eb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 ff33 	bl	8003d1c <UART_CheckIdleState>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d137      	bne.n	8002f48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_Receive_IT+0x24>
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e030      	b.n	8002f4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_UART_Receive_IT+0x94>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01f      	beq.n	8002f38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	613b      	str	r3, [r7, #16]
   return(result);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	69f9      	ldr	r1, [r7, #28]
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e6      	bne.n	8002f06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fffe 	bl	8003f40 <UART_Start_Receive_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e000      	b.n	8002f4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40008000 	.word	0x40008000

08002f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0ba      	sub	sp, #232	; 0xe8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f86:	4013      	ands	r3, r2
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11b      	bne.n	8002fcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 82e3 	beq.w	8003588 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
      }
      return;
 8002fca:	e2dd      	b.n	8003588 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8002fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8123 	beq.w	800321c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002fd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002fda:	4b8d      	ldr	r3, [pc, #564]	; (8003210 <HAL_UART_IRQHandler+0x2b8>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_UART_IRQHandler+0x2bc>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8116 	beq.w	800321c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d011      	beq.n	8003020 <HAL_UART_IRQHandler+0xc8>
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d011      	beq.n	8003050 <HAL_UART_IRQHandler+0xf8>
 800302c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2202      	movs	r2, #2
 800303e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d011      	beq.n	8003080 <HAL_UART_IRQHandler+0x128>
 800305c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2204      	movs	r2, #4
 800306e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f043 0202 	orr.w	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800309c:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <HAL_UART_IRQHandler+0x2b8>)
 800309e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f043 0208 	orr.w	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_UART_IRQHandler+0x196>
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00c      	beq.n	80030ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8249 	beq.w	800358c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d013      	beq.n	800312e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d005      	beq.n	8003152 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800314a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d054      	beq.n	80031fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f001 f816 	bl	8004184 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d146      	bne.n	80031f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800317c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3308      	adds	r3, #8
 800318e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800319e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1d9      	bne.n	8003166 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_UART_IRQHandler+0x2c0>)
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd ff72 	bl	80010b6 <HAL_DMA_Abort_IT>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d019      	beq.n	800320c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80031e6:	4610      	mov	r0, r2
 80031e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	e00f      	b.n	800320c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9e1 	bl	80035b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f2:	e00b      	b.n	800320c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f9dd 	bl	80035b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fa:	e007      	b.n	800320c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f9d9 	bl	80035b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800320a:	e1bf      	b.n	800358c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	bf00      	nop
    return;
 800320e:	e1bd      	b.n	800358c <HAL_UART_IRQHandler+0x634>
 8003210:	10000001 	.word	0x10000001
 8003214:	04000120 	.word	0x04000120
 8003218:	08004251 	.word	0x08004251

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 8153 	bne.w	80034cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 814c 	beq.w	80034cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8145 	beq.w	80034cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2210      	movs	r2, #16
 8003248:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	f040 80bb 	bne.w	80033d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 818f 	beq.w	8003590 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800327c:	429a      	cmp	r2, r3
 800327e:	f080 8187 	bcs.w	8003590 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8087 	bne.w	80033ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1da      	bne.n	80032a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800330e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e1      	bne.n	80032ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3308      	adds	r3, #8
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3308      	adds	r3, #8
 8003346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800334a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800334c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e3      	bne.n	8003326 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	f023 0310 	bic.w	r3, r3, #16
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003390:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e4      	bne.n	800336c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fe28 	bl	8000ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8fd 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ce:	e0df      	b.n	8003590 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80d1 	beq.w	8003594 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80033f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80cc 	beq.w	8003594 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
 8003420:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800342c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e4      	bne.n	80033fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3308      	adds	r3, #8
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	623b      	str	r3, [r7, #32]
   return(result);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800345a:	633a      	str	r2, [r7, #48]	; 0x30
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e1      	bne.n	8003432 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	617b      	str	r3, [r7, #20]
   return(result);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e4      	bne.n	8003482 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f87f 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ca:	e063      	b.n	8003594 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <HAL_UART_IRQHandler+0x59e>
 80034d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f001 fc14 	bl	8004d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034f4:	e051      	b.n	800359a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d014      	beq.n	800352c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800350e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351e:	2b00      	cmp	r3, #0
 8003520:	d03a      	beq.n	8003598 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
    }
    return;
 800352a:	e035      	b.n	8003598 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <HAL_UART_IRQHandler+0x5f4>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fe99 	bl	800427c <UART_EndTransmit_IT>
    return;
 800354a:	e026      	b.n	800359a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800354c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_UART_IRQHandler+0x614>
 8003558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f001 fbed 	bl	8004d44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800356a:	e016      	b.n	800359a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <HAL_UART_IRQHandler+0x642>
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357c:	2b00      	cmp	r3, #0
 800357e:	da0c      	bge.n	800359a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 fbd5 	bl	8004d30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003586:	e008      	b.n	800359a <HAL_UART_IRQHandler+0x642>
      return;
 8003588:	bf00      	nop
 800358a:	e006      	b.n	800359a <HAL_UART_IRQHandler+0x642>
    return;
 800358c:	bf00      	nop
 800358e:	e004      	b.n	800359a <HAL_UART_IRQHandler+0x642>
      return;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <HAL_UART_IRQHandler+0x642>
      return;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_UART_IRQHandler+0x642>
    return;
 8003598:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800359a:	37e8      	adds	r7, #232	; 0xe8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b08c      	sub	sp, #48	; 0x30
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4313      	orrs	r3, r2
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4baa      	ldr	r3, [pc, #680]	; (80038b8 <UART_SetConfig+0x2d8>)
 8003610:	4013      	ands	r3, r2
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003618:	430b      	orrs	r3, r1
 800361a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a9f      	ldr	r2, [pc, #636]	; (80038bc <UART_SetConfig+0x2dc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003648:	4313      	orrs	r3, r2
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003656:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003660:	430b      	orrs	r3, r1
 8003662:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f023 010f 	bic.w	r1, r3, #15
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <UART_SetConfig+0x2e0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <UART_SetConfig+0xf0>
 8003684:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <UART_SetConfig+0x2e4>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d81a      	bhi.n	80036c8 <UART_SetConfig+0xe8>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0xb8>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036a9 	.word	0x080036a9
 800369c:	080036b9 	.word	0x080036b9
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036c1 	.word	0x080036c1
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e116      	b.n	80038de <UART_SetConfig+0x2fe>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e112      	b.n	80038de <UART_SetConfig+0x2fe>
 80036b8:	2304      	movs	r3, #4
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036be:	e10e      	b.n	80038de <UART_SetConfig+0x2fe>
 80036c0:	2308      	movs	r3, #8
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c6:	e10a      	b.n	80038de <UART_SetConfig+0x2fe>
 80036c8:	2310      	movs	r3, #16
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ce:	e106      	b.n	80038de <UART_SetConfig+0x2fe>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a7c      	ldr	r2, [pc, #496]	; (80038c8 <UART_SetConfig+0x2e8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d138      	bne.n	800374c <UART_SetConfig+0x16c>
 80036da:	4b7a      	ldr	r3, [pc, #488]	; (80038c4 <UART_SetConfig+0x2e4>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d82d      	bhi.n	8003744 <UART_SetConfig+0x164>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x110>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003745 	.word	0x08003745
 80036f8:	08003745 	.word	0x08003745
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003735 	.word	0x08003735
 8003704:	08003745 	.word	0x08003745
 8003708:	08003745 	.word	0x08003745
 800370c:	08003745 	.word	0x08003745
 8003710:	0800372d 	.word	0x0800372d
 8003714:	08003745 	.word	0x08003745
 8003718:	08003745 	.word	0x08003745
 800371c:	08003745 	.word	0x08003745
 8003720:	0800373d 	.word	0x0800373d
 8003724:	2300      	movs	r3, #0
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e0d8      	b.n	80038de <UART_SetConfig+0x2fe>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e0d4      	b.n	80038de <UART_SetConfig+0x2fe>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e0d0      	b.n	80038de <UART_SetConfig+0x2fe>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e0cc      	b.n	80038de <UART_SetConfig+0x2fe>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e0c8      	b.n	80038de <UART_SetConfig+0x2fe>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <UART_SetConfig+0x2ec>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d125      	bne.n	80037a2 <UART_SetConfig+0x1c2>
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <UART_SetConfig+0x2e4>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d016      	beq.n	8003792 <UART_SetConfig+0x1b2>
 8003764:	2b30      	cmp	r3, #48	; 0x30
 8003766:	d818      	bhi.n	800379a <UART_SetConfig+0x1ba>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d00a      	beq.n	8003782 <UART_SetConfig+0x1a2>
 800376c:	2b20      	cmp	r3, #32
 800376e:	d814      	bhi.n	800379a <UART_SetConfig+0x1ba>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <UART_SetConfig+0x19a>
 8003774:	2b10      	cmp	r3, #16
 8003776:	d008      	beq.n	800378a <UART_SetConfig+0x1aa>
 8003778:	e00f      	b.n	800379a <UART_SetConfig+0x1ba>
 800377a:	2300      	movs	r3, #0
 800377c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003780:	e0ad      	b.n	80038de <UART_SetConfig+0x2fe>
 8003782:	2302      	movs	r3, #2
 8003784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003788:	e0a9      	b.n	80038de <UART_SetConfig+0x2fe>
 800378a:	2304      	movs	r3, #4
 800378c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003790:	e0a5      	b.n	80038de <UART_SetConfig+0x2fe>
 8003792:	2308      	movs	r3, #8
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003798:	e0a1      	b.n	80038de <UART_SetConfig+0x2fe>
 800379a:	2310      	movs	r3, #16
 800379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a0:	e09d      	b.n	80038de <UART_SetConfig+0x2fe>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <UART_SetConfig+0x2f0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0x218>
 80037ac:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <UART_SetConfig+0x2e4>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037b6:	2bc0      	cmp	r3, #192	; 0xc0
 80037b8:	d016      	beq.n	80037e8 <UART_SetConfig+0x208>
 80037ba:	2bc0      	cmp	r3, #192	; 0xc0
 80037bc:	d818      	bhi.n	80037f0 <UART_SetConfig+0x210>
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d00a      	beq.n	80037d8 <UART_SetConfig+0x1f8>
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d814      	bhi.n	80037f0 <UART_SetConfig+0x210>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <UART_SetConfig+0x1f0>
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d008      	beq.n	80037e0 <UART_SetConfig+0x200>
 80037ce:	e00f      	b.n	80037f0 <UART_SetConfig+0x210>
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d6:	e082      	b.n	80038de <UART_SetConfig+0x2fe>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037de:	e07e      	b.n	80038de <UART_SetConfig+0x2fe>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e6:	e07a      	b.n	80038de <UART_SetConfig+0x2fe>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ee:	e076      	b.n	80038de <UART_SetConfig+0x2fe>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f6:	e072      	b.n	80038de <UART_SetConfig+0x2fe>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a35      	ldr	r2, [pc, #212]	; (80038d4 <UART_SetConfig+0x2f4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d12a      	bne.n	8003858 <UART_SetConfig+0x278>
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <UART_SetConfig+0x2e4>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003810:	d01a      	beq.n	8003848 <UART_SetConfig+0x268>
 8003812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003816:	d81b      	bhi.n	8003850 <UART_SetConfig+0x270>
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d00c      	beq.n	8003838 <UART_SetConfig+0x258>
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d815      	bhi.n	8003850 <UART_SetConfig+0x270>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <UART_SetConfig+0x250>
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d008      	beq.n	8003840 <UART_SetConfig+0x260>
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x270>
 8003830:	2300      	movs	r3, #0
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003836:	e052      	b.n	80038de <UART_SetConfig+0x2fe>
 8003838:	2302      	movs	r3, #2
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383e:	e04e      	b.n	80038de <UART_SetConfig+0x2fe>
 8003840:	2304      	movs	r3, #4
 8003842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003846:	e04a      	b.n	80038de <UART_SetConfig+0x2fe>
 8003848:	2308      	movs	r3, #8
 800384a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384e:	e046      	b.n	80038de <UART_SetConfig+0x2fe>
 8003850:	2310      	movs	r3, #16
 8003852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003856:	e042      	b.n	80038de <UART_SetConfig+0x2fe>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <UART_SetConfig+0x2dc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d13a      	bne.n	80038d8 <UART_SetConfig+0x2f8>
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <UART_SetConfig+0x2e4>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800386c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003870:	d01a      	beq.n	80038a8 <UART_SetConfig+0x2c8>
 8003872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003876:	d81b      	bhi.n	80038b0 <UART_SetConfig+0x2d0>
 8003878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387c:	d00c      	beq.n	8003898 <UART_SetConfig+0x2b8>
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d815      	bhi.n	80038b0 <UART_SetConfig+0x2d0>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <UART_SetConfig+0x2b0>
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d008      	beq.n	80038a0 <UART_SetConfig+0x2c0>
 800388e:	e00f      	b.n	80038b0 <UART_SetConfig+0x2d0>
 8003890:	2300      	movs	r3, #0
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003896:	e022      	b.n	80038de <UART_SetConfig+0x2fe>
 8003898:	2302      	movs	r3, #2
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389e:	e01e      	b.n	80038de <UART_SetConfig+0x2fe>
 80038a0:	2304      	movs	r3, #4
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a6:	e01a      	b.n	80038de <UART_SetConfig+0x2fe>
 80038a8:	2308      	movs	r3, #8
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e016      	b.n	80038de <UART_SetConfig+0x2fe>
 80038b0:	2310      	movs	r3, #16
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b6:	e012      	b.n	80038de <UART_SetConfig+0x2fe>
 80038b8:	cfff69f3 	.word	0xcfff69f3
 80038bc:	40008000 	.word	0x40008000
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40004800 	.word	0x40004800
 80038d0:	40004c00 	.word	0x40004c00
 80038d4:	40005000 	.word	0x40005000
 80038d8:	2310      	movs	r3, #16
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4aae      	ldr	r2, [pc, #696]	; (8003b9c <UART_SetConfig+0x5bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	f040 8097 	bne.w	8003a18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d823      	bhi.n	800393a <UART_SetConfig+0x35a>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x318>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	08003925 	.word	0x08003925
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800392b 	.word	0x0800392b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	0800393b 	.word	0x0800393b
 8003914:	0800393b 	.word	0x0800393b
 8003918:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fc7c 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003922:	e010      	b.n	8003946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b9e      	ldr	r3, [pc, #632]	; (8003ba0 <UART_SetConfig+0x5c0>)
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003928:	e00d      	b.n	8003946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fbdd 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003930:	e009      	b.n	8003946 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003938:	e005      	b.n	8003946 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003944:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8130 	beq.w	8003bae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	4a94      	ldr	r2, [pc, #592]	; (8003ba4 <UART_SetConfig+0x5c4>)
 8003954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003958:	461a      	mov	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003960:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	429a      	cmp	r2, r3
 8003970:	d305      	bcc.n	800397e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	429a      	cmp	r2, r3
 800397c:	d903      	bls.n	8003986 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003984:	e113      	b.n	8003bae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2200      	movs	r2, #0
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	4a84      	ldr	r2, [pc, #528]	; (8003ba4 <UART_SetConfig+0x5c4>)
 8003994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003998:	b29b      	uxth	r3, r3
 800399a:	2200      	movs	r2, #0
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a8:	f7fc fc28 	bl	80001fc <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	020b      	lsls	r3, r1, #8
 80039be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039c2:	0202      	lsls	r2, r0, #8
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	6849      	ldr	r1, [r1, #4]
 80039c8:	0849      	lsrs	r1, r1, #1
 80039ca:	2000      	movs	r0, #0
 80039cc:	460c      	mov	r4, r1
 80039ce:	4605      	mov	r5, r0
 80039d0:	eb12 0804 	adds.w	r8, r2, r4
 80039d4:	eb43 0905 	adc.w	r9, r3, r5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	469a      	mov	sl, r3
 80039e0:	4693      	mov	fp, r2
 80039e2:	4652      	mov	r2, sl
 80039e4:	465b      	mov	r3, fp
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	f7fc fc07 	bl	80001fc <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4613      	mov	r3, r2
 80039f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fc:	d308      	bcc.n	8003a10 <UART_SetConfig+0x430>
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a04:	d204      	bcs.n	8003a10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a3a      	ldr	r2, [r7, #32]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	e0ce      	b.n	8003bae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a16:	e0ca      	b.n	8003bae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d166      	bne.n	8003af0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d827      	bhi.n	8003a7a <UART_SetConfig+0x49a>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0x450>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a65 	.word	0x08003a65
 8003a3c:	08003a7b 	.word	0x08003a7b
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	08003a7b 	.word	0x08003a7b
 8003a48:	08003a7b 	.word	0x08003a7b
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	08003a73 	.word	0x08003a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7fe fbe0 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003a58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5a:	e014      	b.n	8003a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5c:	f7fe fbf2 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a62:	e010      	b.n	8003a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a64:	4b4e      	ldr	r3, [pc, #312]	; (8003ba0 <UART_SetConfig+0x5c0>)
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6a:	f7fe fb3d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a70:	e009      	b.n	8003a86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a78:	e005      	b.n	8003a86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8090 	beq.w	8003bae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	4a44      	ldr	r2, [pc, #272]	; (8003ba4 <UART_SetConfig+0x5c4>)
 8003a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aa0:	005a      	lsls	r2, r3, #1
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	441a      	add	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	d916      	bls.n	8003ae8 <UART_SetConfig+0x508>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d212      	bcs.n	8003ae8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f023 030f 	bic.w	r3, r3, #15
 8003aca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	8bfb      	ldrh	r3, [r7, #30]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	8bfa      	ldrh	r2, [r7, #30]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	e062      	b.n	8003bae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003aee:	e05e      	b.n	8003bae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d828      	bhi.n	8003b4a <UART_SetConfig+0x56a>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x520>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b35 	.word	0x08003b35
 8003b0c:	08003b4b 	.word	0x08003b4b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b4b 	.word	0x08003b4b
 8003b18:	08003b4b 	.word	0x08003b4b
 8003b1c:	08003b4b 	.word	0x08003b4b
 8003b20:	08003b43 	.word	0x08003b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b24:	f7fe fb78 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b2a:	e014      	b.n	8003b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b2c:	f7fe fb8a 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003b30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b32:	e010      	b.n	8003b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <UART_SetConfig+0x5c0>)
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3a:	f7fe fad5 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b40:	e009      	b.n	8003b56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b48:	e005      	b.n	8003b56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b54:	bf00      	nop
    }

    if (pclk != 0U)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d028      	beq.n	8003bae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <UART_SetConfig+0x5c4>)
 8003b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b66:	461a      	mov	r2, r3
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	441a      	add	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d910      	bls.n	8003ba8 <UART_SetConfig+0x5c8>
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8c:	d20c      	bcs.n	8003ba8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e009      	b.n	8003bae <UART_SetConfig+0x5ce>
 8003b9a:	bf00      	nop
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	08005018 	.word	0x08005018
      }
      else
      {
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003bca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01a      	beq.n	8003cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d10a      	bne.n	8003cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b098      	sub	sp, #96	; 0x60
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d2c:	f7fd f84a 	bl	8000dc4 <HAL_GetTick>
 8003d30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d12f      	bne.n	8003da0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f88e 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d022      	beq.n	8003da0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d78:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e063      	b.n	8003e68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d149      	bne.n	8003e42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db6:	2200      	movs	r2, #0
 8003db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f857 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d03c      	beq.n	8003e42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
 8003de8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	617b      	str	r3, [r7, #20]
   return(result);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e012      	b.n	8003e68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3758      	adds	r7, #88	; 0x58
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e80:	e049      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e88:	d045      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fc ff9b 	bl	8000dc4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e048      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d031      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d110      	bne.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f95b 	bl	8004184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e029      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef0:	d111      	bne.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f941 	bl	8004184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e00f      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0a6      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b0a3      	sub	sp, #140	; 0x8c
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d10e      	bne.n	8003f92 <UART_Start_Receive_IT+0x52>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <UART_Start_Receive_IT+0x48>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f86:	e02d      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	22ff      	movs	r2, #255	; 0xff
 8003f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f90:	e028      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <UART_Start_Receive_IT+0x76>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <UART_Start_Receive_IT+0x6c>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	22ff      	movs	r2, #255	; 0xff
 8003fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003faa:	e01b      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	227f      	movs	r2, #127	; 0x7f
 8003fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fb4:	e016      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbe:	d10d      	bne.n	8003fdc <UART_Start_Receive_IT+0x9c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <UART_Start_Receive_IT+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	227f      	movs	r2, #127	; 0x7f
 8003fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fd0:	e008      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	223f      	movs	r2, #63	; 0x3f
 8003fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fda:	e003      	b.n	8003fe4 <UART_Start_Receive_IT+0xa4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2222      	movs	r2, #34	; 0x22
 8003ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004018:	673a      	str	r2, [r7, #112]	; 0x70
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800401e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e3      	bne.n	8003ff4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d14f      	bne.n	80040d6 <UART_Start_Receive_IT+0x196>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	429a      	cmp	r2, r3
 8004040:	d349      	bcc.n	80040d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d107      	bne.n	800405c <UART_Start_Receive_IT+0x11c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a47      	ldr	r2, [pc, #284]	; (8004174 <UART_Start_Receive_IT+0x234>)
 8004058:	675a      	str	r2, [r3, #116]	; 0x74
 800405a:	e002      	b.n	8004062 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a46      	ldr	r2, [pc, #280]	; (8004178 <UART_Start_Receive_IT+0x238>)
 8004060:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01a      	beq.n	80040a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800407a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800408e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e4      	bne.n	800406a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80040c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80040c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_Start_Receive_IT+0x160>
 80040d4:	e046      	b.n	8004164 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040de:	d107      	bne.n	80040f0 <UART_Start_Receive_IT+0x1b0>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <UART_Start_Receive_IT+0x23c>)
 80040ec:	675a      	str	r2, [r3, #116]	; 0x74
 80040ee:	e002      	b.n	80040f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <UART_Start_Receive_IT+0x240>)
 80040f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d019      	beq.n	8004132 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004112:	677b      	str	r3, [r7, #116]	; 0x74
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
 800411e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_Start_Receive_IT+0x1be>
 8004130:	e018      	b.n	8004164 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f043 0320 	orr.w	r3, r3, #32
 8004146:	67bb      	str	r3, [r7, #120]	; 0x78
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	61bb      	str	r3, [r7, #24]
   return(result);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	378c      	adds	r7, #140	; 0x8c
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	080049b1 	.word	0x080049b1
 8004178:	0800464d 	.word	0x0800464d
 800417c:	08004491 	.word	0x08004491
 8004180:	080042d5 	.word	0x080042d5

08004184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b095      	sub	sp, #84	; 0x54
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	643b      	str	r3, [r7, #64]	; 0x40
 80041ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e6      	bne.n	800418c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e3      	bne.n	80041be <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d118      	bne.n	8004230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60bb      	str	r3, [r7, #8]
   return(result);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	647b      	str	r3, [r7, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6979      	ldr	r1, [r7, #20]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	613b      	str	r3, [r7, #16]
   return(result);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004244:	bf00      	nop
 8004246:	3754      	adds	r7, #84	; 0x54
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff f9a0 	bl	80035b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	60bb      	str	r3, [r7, #8]
   return(result);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6979      	ldr	r1, [r7, #20]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	613b      	str	r3, [r7, #16]
   return(result);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e6      	bne.n	8004284 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff f96b 	bl	80035a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ca:	bf00      	nop
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b09c      	sub	sp, #112	; 0x70
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ec:	2b22      	cmp	r3, #34	; 0x22
 80042ee:	f040 80be 	bne.w	800446e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004300:	b2d9      	uxtb	r1, r3
 8004302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004306:	b2da      	uxtb	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	400a      	ands	r2, r1
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80a3 	bne.w	8004482 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004350:	66bb      	str	r3, [r7, #104]	; 0x68
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800435a:	65bb      	str	r3, [r7, #88]	; 0x58
 800435c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	667b      	str	r3, [r7, #100]	; 0x64
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3308      	adds	r3, #8
 800438c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800438e:	647a      	str	r2, [r7, #68]	; 0x44
 8004390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <UART_RxISR_8BIT+0x1b8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d01f      	beq.n	8004400 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	623b      	str	r3, [r7, #32]
   return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e2:	663b      	str	r3, [r7, #96]	; 0x60
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
 80043ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d12e      	bne.n	8004466 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60fb      	str	r3, [r7, #12]
   return(result);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	617b      	str	r3, [r7, #20]
   return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d103      	bne.n	8004456 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff f8b2 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004464:	e00d      	b.n	8004482 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc f846 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 800446c:	e009      	b.n	8004482 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	8b1b      	ldrh	r3, [r3, #24]
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0208 	orr.w	r2, r2, #8
 800447e:	b292      	uxth	r2, r2
 8004480:	831a      	strh	r2, [r3, #24]
}
 8004482:	bf00      	nop
 8004484:	3770      	adds	r7, #112	; 0x70
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40008000 	.word	0x40008000

08004490 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b09c      	sub	sp, #112	; 0x70
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800449e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a8:	2b22      	cmp	r3, #34	; 0x22
 80044aa:	f040 80be 	bne.w	800462a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80044be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80044c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80044c6:	4013      	ands	r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 80a3 	bne.w	800463e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800450c:	667b      	str	r3, [r7, #100]	; 0x64
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004516:	657b      	str	r3, [r7, #84]	; 0x54
 8004518:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800451c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e6      	bne.n	80044f8 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	663b      	str	r3, [r7, #96]	; 0x60
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800454a:	643a      	str	r2, [r7, #64]	; 0x40
 800454c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e5      	bne.n	800452a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a34      	ldr	r2, [pc, #208]	; (8004648 <UART_RxISR_16BIT+0x1b8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d01f      	beq.n	80045bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	61fb      	str	r3, [r7, #28]
   return(result);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800459e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d12e      	bne.n	8004622 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d103      	bne.n	8004612 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2210      	movs	r2, #16
 8004610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe ffd4 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004620:	e00d      	b.n	800463e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fb ff68 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 8004628:	e009      	b.n	800463e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	8b1b      	ldrh	r3, [r3, #24]
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0208 	orr.w	r2, r2, #8
 800463a:	b292      	uxth	r2, r2
 800463c:	831a      	strh	r2, [r3, #24]
}
 800463e:	bf00      	nop
 8004640:	3770      	adds	r7, #112	; 0x70
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40008000 	.word	0x40008000

0800464c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b0ac      	sub	sp, #176	; 0xb0
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800465a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	f040 8182 	bne.w	800498c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800468e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004692:	e125      	b.n	80048e0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800469a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800469e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80046a2:	b2d9      	uxtb	r1, r3
 80046a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	400a      	ands	r2, r1
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80046da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d053      	beq.n	800478e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <UART_RxISR_8BIT_FIFOEN+0xca>
 80046f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d011      	beq.n	8004746 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2202      	movs	r2, #2
 8004734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d011      	beq.n	8004776 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2204      	movs	r2, #4
 8004764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f043 0202 	orr.w	r2, r3, #2
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fe ff17 	bl	80035b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80a2 	bne.w	80048e0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80047c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80047cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e4      	bne.n	800479c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80047e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80047fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004800:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e1      	bne.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a60      	ldr	r2, [pc, #384]	; (80049a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d021      	beq.n	8004870 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800484e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
 800485e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e4      	bne.n	800483a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d130      	bne.n	80048da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e4      	bne.n	800487e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d103      	bne.n	80048ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fe fe78 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
 80048d8:	e002      	b.n	80048e0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fb fe0c 	bl	80004f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80048e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f47f aecf 	bne.w	8004694 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004900:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04b      	beq.n	80049a0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800490e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004912:	429a      	cmp	r2, r3
 8004914:	d244      	bcs.n	80049a0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	61fb      	str	r3, [r7, #28]
   return(result);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800493a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e3      	bne.n	8004916 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a16      	ldr	r2, [pc, #88]	; (80049ac <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004952:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	60bb      	str	r3, [r7, #8]
   return(result);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f043 0320 	orr.w	r3, r3, #32
 8004968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	613b      	str	r3, [r7, #16]
   return(result);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e4      	bne.n	8004954 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800498a:	e009      	b.n	80049a0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	8b1b      	ldrh	r3, [r3, #24]
 8004992:	b29a      	uxth	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0208 	orr.w	r2, r2, #8
 800499c:	b292      	uxth	r2, r2
 800499e:	831a      	strh	r2, [r3, #24]
}
 80049a0:	bf00      	nop
 80049a2:	37b0      	adds	r7, #176	; 0xb0
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40008000 	.word	0x40008000
 80049ac:	080042d5 	.word	0x080042d5

080049b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b0ae      	sub	sp, #184	; 0xb8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e6:	2b22      	cmp	r3, #34	; 0x22
 80049e8:	f040 8186 	bne.w	8004cf8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80049f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049f6:	e129      	b.n	8004c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004a0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d053      	beq.n	8004af6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <UART_RxISR_16BIT_FIFOEN+0xce>
 8004a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d011      	beq.n	8004aae <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d011      	beq.n	8004ade <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2204      	movs	r2, #4
 8004acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f043 0202 	orr.w	r2, r3, #2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fe fd63 	bl	80035b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80a4 	bne.w	8004c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e2      	bne.n	8004b04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e1      	bne.n	8004b3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a60      	ldr	r2, [pc, #384]	; (8004d14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d021      	beq.n	8004bdc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01a      	beq.n	8004bdc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e4      	bne.n	8004ba6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d130      	bne.n	8004c46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	f023 0310 	bic.w	r3, r3, #16
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e4      	bne.n	8004bea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d103      	bne.n	8004c36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe fcc2 	bl	80035c8 <HAL_UARTEx_RxEventCallback>
 8004c44:	e002      	b.n	8004c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fb fc56 	bl	80004f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d006      	beq.n	8004c62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f aecb 	bne.w	80049f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04b      	beq.n	8004d0c <UART_RxISR_16BIT_FIFOEN+0x35c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d244      	bcs.n	8004d0c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3308      	adds	r3, #8
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	623b      	str	r3, [r7, #32]
   return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e3      	bne.n	8004c82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004cbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e4      	bne.n	8004cc0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cf6:	e009      	b.n	8004d0c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	8b1b      	ldrh	r3, [r3, #24]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	831a      	strh	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	37b8      	adds	r7, #184	; 0xb8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40008000 	.word	0x40008000
 8004d18:	08004491 	.word	0x08004491

08004d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e027      	b.n	8004dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	; 0x24
 8004d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e02d      	b.n	8004e3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	; 0x24
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f850 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e02d      	b.n	8004eba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2224      	movs	r2, #36	; 0x24
 8004e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f812 	bl	8004ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ee4:	e031      	b.n	8004f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eea:	2308      	movs	r3, #8
 8004eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	0e5b      	lsrs	r3, r3, #25
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	0f5b      	lsrs	r3, r3, #29
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	7b3a      	ldrb	r2, [r7, #12]
 8004f12:	4911      	ldr	r1, [pc, #68]	; (8004f58 <UARTEx_SetNbDataToProcess+0x94>)
 8004f14:	5c8a      	ldrb	r2, [r1, r2]
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f1a:	7b3a      	ldrb	r2, [r7, #12]
 8004f1c:	490f      	ldr	r1, [pc, #60]	; (8004f5c <UARTEx_SetNbDataToProcess+0x98>)
 8004f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	7b7a      	ldrb	r2, [r7, #13]
 8004f30:	4909      	ldr	r1, [pc, #36]	; (8004f58 <UARTEx_SetNbDataToProcess+0x94>)
 8004f32:	5c8a      	ldrb	r2, [r1, r2]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f38:	7b7a      	ldrb	r2, [r7, #13]
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <UARTEx_SetNbDataToProcess+0x98>)
 8004f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	08005030 	.word	0x08005030
 8004f5c:	08005038 	.word	0x08005038

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4d0d      	ldr	r5, [pc, #52]	; (8004fa8 <__libc_init_array+0x38>)
 8004f74:	4c0d      	ldr	r4, [pc, #52]	; (8004fac <__libc_init_array+0x3c>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	4d0b      	ldr	r5, [pc, #44]	; (8004fb0 <__libc_init_array+0x40>)
 8004f82:	4c0c      	ldr	r4, [pc, #48]	; (8004fb4 <__libc_init_array+0x44>)
 8004f84:	f000 f818 	bl	8004fb8 <_init>
 8004f88:	1b64      	subs	r4, r4, r5
 8004f8a:	10a4      	asrs	r4, r4, #2
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08005048 	.word	0x08005048
 8004fac:	08005048 	.word	0x08005048
 8004fb0:	08005048 	.word	0x08005048
 8004fb4:	0800504c 	.word	0x0800504c

08004fb8 <_init>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_fini>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr
