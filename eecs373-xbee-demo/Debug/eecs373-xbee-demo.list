
eecs373-xbee-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e18  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  08006178  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08006178  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e123  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee6  00000000  00000000  0002e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085b  00000000  00000000  00030bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029480  00000000  00000000  00031413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d822  00000000  00000000  0005a893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd3b9  00000000  00000000  000680b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030e0  00000000  00000000  00165470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00168550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005fc0 	.word	0x08005fc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08005fc0 	.word	0x08005fc0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <xbee_send_two_bytes>:
	uint8_t frame_id;
	uint16_t dest_addr;
	uint8_t options;
} xbee_frame_header_t;

void xbee_send_two_bytes(uint8_t *data, uint8_t *dest) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	uint8_t checksum = 0xFF;
 80005b6:	23ff      	movs	r3, #255	; 0xff
 80005b8:	77fb      	strb	r3, [r7, #31]
	xbee_frame_header_t header = {
 80005ba:	4a23      	ldr	r2, [pc, #140]	; (8000648 <xbee_send_two_bytes+0x9c>)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c2:	c303      	stmia	r3!, {r0, r1}
 80005c4:	801a      	strh	r2, [r3, #0]
			.frame_type = 0x01, // 16-bit transmit request
			.frame_id = 0x00, // device will not emit a response frame
			.dest_addr = 0xD161, // broadcast address
			.options = 0, // no options set
	};
	checksum -= (header.frame_type + header.frame_id + dest[0] + dest[1] + data[0] + data[1]);
 80005c6:	7e3a      	ldrb	r2, [r7, #24]
 80005c8:	7e7b      	ldrb	r3, [r7, #25]
 80005ca:	4413      	add	r3, r2
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	7ffa      	ldrb	r2, [r7, #31]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[] = {header.start_delim,
 80005f8:	7d3b      	ldrb	r3, [r7, #20]
 80005fa:	723b      	strb	r3, [r7, #8]
 80005fc:	2300      	movs	r3, #0
 80005fe:	727b      	strb	r3, [r7, #9]
					 0,
					 header.length,
 8000600:	8afb      	ldrh	r3, [r7, #22]
	uint8_t buf[] = {header.start_delim,
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
					 header.frame_type,
 8000606:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buf[] = {header.start_delim,
 8000608:	72fb      	strb	r3, [r7, #11]
					 header.frame_id,
 800060a:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buf[] = {header.start_delim,
 800060c:	733b      	strb	r3, [r7, #12]
					 dest[0], // dest_addr high bits
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000612:	737b      	strb	r3, [r7, #13]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	73bb      	strb	r3, [r7, #14]
					 dest[1], // dest_addr low bits
					 header.options,
 800061a:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buf[] = {header.start_delim,
 800061c:	73fb      	strb	r3, [r7, #15]
					 data[0],
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000622:	743b      	strb	r3, [r7, #16]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	747b      	strb	r3, [r7, #17]
 800062a:	7ffb      	ldrb	r3, [r7, #31]
 800062c:	74bb      	strb	r3, [r7, #18]
					 data[1],
					 checksum,
	};
	HAL_UART_Transmit(XBEE1_ADDR, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
 800062e:	f107 0108 	add.w	r1, r7, #8
 8000632:	f242 7310 	movw	r3, #10000	; 0x2710
 8000636:	220b      	movs	r2, #11
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <xbee_send_two_bytes+0xa0>)
 800063a:	f002 feed 	bl	8003418 <HAL_UART_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	08005fd8 	.word	0x08005fd8
 800064c:	2000010c 	.word	0x2000010c

08000650 <ESP_connect_to_wifi>:

int ESP_connect_to_wifi(char *data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	memset(&rx_buf, 0, sizeof(rx_buf));
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	2100      	movs	r1, #0
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <ESP_connect_to_wifi+0x48>)
 800065e:	f005 f82b 	bl	80056b8 <memset>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_buf, 27);
 8000662:	221b      	movs	r2, #27
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <ESP_connect_to_wifi+0x48>)
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <ESP_connect_to_wifi+0x4c>)
 8000668:	f004 ff67 	bl	800553a <HAL_UARTEx_ReceiveToIdle_IT>
	int ret = HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 2500);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fdc7 	bl	8000200 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <ESP_connect_to_wifi+0x4c>)
 800067e:	f002 fecb 	bl	8003418 <HAL_UART_Transmit>
 8000682:	4603      	mov	r3, r0
 8000684:	60fb      	str	r3, [r7, #12]
	HAL_Delay(10000);
 8000686:	f242 7010 	movw	r0, #10000	; 0x2710
 800068a:	f000 fe17 	bl	80012bc <HAL_Delay>
	return ret;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200001a0 	.word	0x200001a0
 800069c:	20000078 	.word	0x20000078

080006a0 <ESP_send_raw>:
	int ret = HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data), 2500);
	HAL_Delay(5000);
	return ret;
}

int ESP_send_raw(uint8_t *data, uint16_t len) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	memset(&rx_buf, 0, sizeof(rx_buf));
 80006ac:	2264      	movs	r2, #100	; 0x64
 80006ae:	2100      	movs	r1, #0
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <ESP_send_raw+0x48>)
 80006b2:	f005 f801 	bl	80056b8 <memset>
	HAL_UART_Receive_IT(&huart2, &rx_buf, len);
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	461a      	mov	r2, r3
 80006ba:	490b      	ldr	r1, [pc, #44]	; (80006e8 <ESP_send_raw+0x48>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <ESP_send_raw+0x4c>)
 80006be:	f002 ff3b 	bl	8003538 <HAL_UART_Receive_IT>
	int ret = HAL_UART_Transmit(&huart2, data, len, 1000);
 80006c2:	887a      	ldrh	r2, [r7, #2]
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <ESP_send_raw+0x4c>)
 80006cc:	f002 fea4 	bl	8003418 <HAL_UART_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d8:	f000 fdf0 	bl	80012bc <HAL_Delay>
	return ret;
 80006dc:	68fb      	ldr	r3, [r7, #12]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001a0 	.word	0x200001a0
 80006ec:	20000078 	.word	0x20000078

080006f0 <ESP_send_string>:

int ESP_send_string(char *data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	return ESP_send_raw((uint8_t*)data, strlen(data));
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fd81 	bl	8000200 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29b      	uxth	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ffcb 	bl	80006a0 <ESP_send_raw>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <ESP8266_Init>:

void ESP8266_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b09a      	sub	sp, #104	; 0x68
 8000718:	af00      	add	r7, sp, #0

//  sprintf(buffer, "ATE0\r\n");
//  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
//  HAL_Delay(2000);

  sprintf(buffer, "AT\r\n");
 800071a:	463b      	mov	r3, r7
 800071c:	491f      	ldr	r1, [pc, #124]	; (800079c <ESP8266_Init+0x88>)
 800071e:	4618      	mov	r0, r3
 8000720:	f004 ffaa 	bl	8005678 <siprintf>
  int ret;
//  ret = HAL_UART_Transmit(&huart2, (uint8_t*)&buffer, strlen(buffer), 1000);

  ESP_send_string("AT+RST\r\n");
 8000724:	481e      	ldr	r0, [pc, #120]	; (80007a0 <ESP8266_Init+0x8c>)
 8000726:	f7ff ffe3 	bl	80006f0 <ESP_send_string>

  ret = ESP_send_string(buffer);
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffdf 	bl	80006f0 <ESP_send_string>
 8000732:	6678      	str	r0, [r7, #100]	; 0x64
  if (ret != HAL_OK) {
 8000734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000736:	2b00      	cmp	r3, #0
 8000738:	d000      	beq.n	800073c <ESP8266_Init+0x28>
	  __NOP(); // breakppoint
 800073a:	bf00      	nop

//  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 1000);
//  HAL_Delay(2000);

//  ESP_wait_for_OK();
  ESP_send_string("AT+CWMODE_CUR=1\r\n");
 800073c:	4819      	ldr	r0, [pc, #100]	; (80007a4 <ESP8266_Init+0x90>)
 800073e:	f7ff ffd7 	bl	80006f0 <ESP_send_string>
//  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+CWMODE_CUR=1\r\n", strlen("AT+CWMODE_CUR=1\r\n"), 1000);
//  HAL_Delay(2000);

  sprintf(buffer, "AT+CWJAP=\"Beesechurger\",\"Leafs06Leafs06\"\r\n");
 8000742:	463b      	mov	r3, r7
 8000744:	4918      	ldr	r1, [pc, #96]	; (80007a8 <ESP8266_Init+0x94>)
 8000746:	4618      	mov	r0, r3
 8000748:	f004 ff96 	bl	8005678 <siprintf>
  ESP_connect_to_wifi((char*)buffer);
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff7e 	bl	8000650 <ESP_connect_to_wifi>
//  ESP_connect_to_wifi("Beesechurger", "Leafs06Leafs06");

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_buf, 75);
 8000754:	224b      	movs	r2, #75	; 0x4b
 8000756:	4915      	ldr	r1, [pc, #84]	; (80007ac <ESP8266_Init+0x98>)
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <ESP8266_Init+0x9c>)
 800075a:	f004 feee 	bl	800553a <HAL_UARTEx_ReceiveToIdle_IT>
  sprintf(buffer, "AT+CIFSR\r\n");
 800075e:	463b      	mov	r3, r7
 8000760:	4914      	ldr	r1, [pc, #80]	; (80007b4 <ESP8266_Init+0xa0>)
 8000762:	4618      	mov	r0, r3
 8000764:	f004 ff88 	bl	8005678 <siprintf>
  ESP_send_string((char*)buffer);
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ffc0 	bl	80006f0 <ESP_send_string>

//  ESP_send_string((char*)buffer);

  sprintf(buffer, "AT+CIPMUX=1\r\n");
 8000770:	463b      	mov	r3, r7
 8000772:	4911      	ldr	r1, [pc, #68]	; (80007b8 <ESP8266_Init+0xa4>)
 8000774:	4618      	mov	r0, r3
 8000776:	f004 ff7f 	bl	8005678 <siprintf>
  ESP_send_string((char*)buffer);
 800077a:	463b      	mov	r3, r7
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffb7 	bl	80006f0 <ESP_send_string>
//
  sprintf(buffer, "AT+CIPSERVER=1\r\n"); // start server on port 333
 8000782:	463b      	mov	r3, r7
 8000784:	490d      	ldr	r1, [pc, #52]	; (80007bc <ESP8266_Init+0xa8>)
 8000786:	4618      	mov	r0, r3
 8000788:	f004 ff76 	bl	8005678 <siprintf>
  ESP_send_string((char*)buffer);
 800078c:	463b      	mov	r3, r7
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffae 	bl	80006f0 <ESP_send_string>
//  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
//  HAL_Delay(2000);

//  ESP8266_SendData("Hello World!");

}
 8000794:	bf00      	nop
 8000796:	3768      	adds	r7, #104	; 0x68
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08005fe4 	.word	0x08005fe4
 80007a0:	08005fec 	.word	0x08005fec
 80007a4:	08005ff8 	.word	0x08005ff8
 80007a8:	0800600c 	.word	0x0800600c
 80007ac:	200001a0 	.word	0x200001a0
 80007b0:	20000078 	.word	0x20000078
 80007b4:	08006038 	.word	0x08006038
 80007b8:	08006044 	.word	0x08006044
 80007bc:	08006054 	.word	0x08006054

080007c0 <HAL_UART_RxCpltCallback>:
	static int num = 0;
	num++;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  static int index = 0;
  if (huart == &huart3) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <HAL_UART_RxCpltCallback+0x30>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d104      	bne.n	80007da <HAL_UART_RxCpltCallback+0x1a>
	  HAL_UART_Receive_IT(&huart3, rx_buf, 11);
 80007d0:	220b      	movs	r2, #11
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <HAL_UART_RxCpltCallback+0x34>)
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x30>)
 80007d6:	f002 feaf 	bl	8003538 <HAL_UART_Receive_IT>
  }
  if (huart == &huart2) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_UART_RxCpltCallback+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d100      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x24>
//	  index = (index + 1) % (sizeof(rx_buf));
//	  HAL_UART_Receive_IT(&huart2, &rx_buf[index], 1);
//	  wifi_receive();
	  __NOP(); // breakpoints
 80007e2:	bf00      	nop
//	  HAL_UART_Receive_IT(&huart2, rx_buf, 2);
  }
  __NOP(); // set breakpoint here
 80007e4:	bf00      	nop
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000010c 	.word	0x2000010c
 80007f4:	200001a0 	.word	0x200001a0
 80007f8:	20000078 	.word	0x20000078

080007fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	// this will trigger on blue push button (PC13)
	uint8_t data[2] = {0x56, 0x78};
 8000806:	f647 0356 	movw	r3, #30806	; 0x7856
 800080a:	81bb      	strh	r3, [r7, #12]
	uint8_t dest[2] = {0x11, 0x11};
 800080c:	f241 1311 	movw	r3, #4369	; 0x1111
 8000810:	813b      	strh	r3, [r7, #8]
	xbee_send_two_bytes(data, dest);
 8000812:	f107 0208 	add.w	r2, r7, #8
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fec5 	bl	80005ac <xbee_send_two_bytes>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fccf 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f812 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8ee 	bl	8000a18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083c:	f000 f8a0 	bl	8000980 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000840:	f000 f852 	bl	80008e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Receive_IT(&huart2, rx_buf, 1);
  ESP8266_Init();
 8000844:	f7ff ff66 	bl	8000714 <ESP8266_Init>

  HAL_UART_Receive_IT(&huart3, rx_buf, 11);
 8000848:	220b      	movs	r2, #11
 800084a:	4902      	ldr	r1, [pc, #8]	; (8000854 <main+0x28>)
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <main+0x2c>)
 800084e:	f002 fe73 	bl	8003538 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000852:	e7fe      	b.n	8000852 <main+0x26>
 8000854:	200001a0 	.word	0x200001a0
 8000858:	2000010c 	.word	0x2000010c

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	; 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	; 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 ff24 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000882:	f001 f8d5 	bl	8001a30 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 fb0e 	bl	8000eac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000890:	2310      	movs	r3, #16
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800089c:	2360      	movs	r3, #96	; 0x60
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 f975 	bl	8001b98 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fafa 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fd7b 	bl	80023cc <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008dc:	f000 fae6 	bl	8000eac <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	; 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000932:	f002 fd21 	bl	8003378 <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 fab6 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000944:	f004 fd7d 	bl	8005442 <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 faad 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000956:	f004 fdb2 	bl	80054be <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 faa4 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000966:	f004 fd33 	bl	80053d0 <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 fa9c 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000078 	.word	0x20000078
 800097c:	40004400 	.word	0x40004400

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f002 fcd5 	bl	8003378 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 fa6a 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f004 fd31 	bl	8005442 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 fa61 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f004 fd66 	bl	80054be <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 fa58 	bl	8000eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f004 fce7 	bl	80053d0 <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 fa50 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000010c 	.word	0x2000010c
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2e:	4bb2      	ldr	r3, [pc, #712]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4ab1      	ldr	r2, [pc, #708]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a34:	f043 0310 	orr.w	r3, r3, #16
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4baf      	ldr	r3, [pc, #700]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	623b      	str	r3, [r7, #32]
 8000a44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4bac      	ldr	r3, [pc, #688]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4aab      	ldr	r2, [pc, #684]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4ba9      	ldr	r3, [pc, #676]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4ba6      	ldr	r3, [pc, #664]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4aa5      	ldr	r2, [pc, #660]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4ba3      	ldr	r3, [pc, #652]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4ba0      	ldr	r3, [pc, #640]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a9f      	ldr	r2, [pc, #636]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b9d      	ldr	r3, [pc, #628]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b9a      	ldr	r3, [pc, #616]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a99      	ldr	r2, [pc, #612]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b97      	ldr	r3, [pc, #604]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b94      	ldr	r3, [pc, #592]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a93      	ldr	r2, [pc, #588]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b91      	ldr	r3, [pc, #580]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b8e      	ldr	r3, [pc, #568]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a8d      	ldr	r2, [pc, #564]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b8b      	ldr	r3, [pc, #556]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b88      	ldr	r3, [pc, #544]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a87      	ldr	r2, [pc, #540]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b85      	ldr	r3, [pc, #532]	; (8000cf8 <MX_GPIO_Init+0x2e0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000aee:	f001 f843 	bl	8001b78 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b02:	230d      	movs	r3, #13
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	487b      	ldr	r0, [pc, #492]	; (8000cfc <MX_GPIO_Init+0x2e4>)
 8000b0e:	f000 fdc5 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4875      	ldr	r0, [pc, #468]	; (8000d00 <MX_GPIO_Init+0x2e8>)
 8000b2a:	f000 fdb7 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	486e      	ldr	r0, [pc, #440]	; (8000d04 <MX_GPIO_Init+0x2ec>)
 8000b4a:	f000 fda7 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b5e:	230d      	movs	r3, #13
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4866      	ldr	r0, [pc, #408]	; (8000d04 <MX_GPIO_Init+0x2ec>)
 8000b6a:	f000 fd97 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b6e:	233f      	movs	r3, #63	; 0x3f
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b72:	230b      	movs	r3, #11
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	485f      	ldr	r0, [pc, #380]	; (8000d00 <MX_GPIO_Init+0x2e8>)
 8000b82:	f000 fd8b 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b86:	2301      	movs	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b96:	2301      	movs	r3, #1
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fd7a 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bac:	230b      	movs	r3, #11
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f000 fd6d 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23f0      	movs	r3, #240	; 0xf0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fd5c 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4842      	ldr	r0, [pc, #264]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000c00:	f000 fd4c 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c04:	2302      	movs	r3, #2
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	483c      	ldr	r0, [pc, #240]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000c18:	f000 fd40 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c1c:	2344      	movs	r3, #68	; 0x44
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4836      	ldr	r0, [pc, #216]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000c30:	f000 fd34 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000c34:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482a      	ldr	r0, [pc, #168]	; (8000cfc <MX_GPIO_Init+0x2e4>)
 8000c52:	f000 fd23 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4822      	ldr	r0, [pc, #136]	; (8000cfc <MX_GPIO_Init+0x2e4>)
 8000c74:	f000 fd12 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000c96:	f000 fd01 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000c9a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000cac:	230d      	movs	r3, #13
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000cb8:	f000 fcf0 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x2f0>)
 8000cda:	f000 fcdf 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8000cf4:	e00a      	b.n	8000d0c <MX_GPIO_Init+0x2f4>
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	48000800 	.word	0x48000800
 8000d04:	48001400 	.word	0x48001400
 8000d08:	48000400 	.word	0x48000400
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4861      	ldr	r0, [pc, #388]	; (8000e98 <MX_GPIO_Init+0x480>)
 8000d14:	f000 fcc2 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d18:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4859      	ldr	r0, [pc, #356]	; (8000e9c <MX_GPIO_Init+0x484>)
 8000d36:	f000 fcb1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4852      	ldr	r0, [pc, #328]	; (8000ea0 <MX_GPIO_Init+0x488>)
 8000d56:	f000 fca1 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	484a      	ldr	r0, [pc, #296]	; (8000ea0 <MX_GPIO_Init+0x488>)
 8000d76:	f000 fc91 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4842      	ldr	r0, [pc, #264]	; (8000ea0 <MX_GPIO_Init+0x488>)
 8000d98:	f000 fc80 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000d9c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dae:	230a      	movs	r3, #10
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fc6e 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fc60 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dec:	2309      	movs	r3, #9
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4828      	ldr	r0, [pc, #160]	; (8000e98 <MX_GPIO_Init+0x480>)
 8000df8:	f000 fc50 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_GPIO_Init+0x480>)
 8000e18:	f000 fc40 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e1c:	2338      	movs	r3, #56	; 0x38
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0x48c>)
 8000e38:	f000 fc30 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0x48c>)
 8000e5a:	f000 fc1f 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0x490>)
 8000e7a:	f000 fc0f 	bl	800169c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2028      	movs	r0, #40	; 0x28
 8000e84:	f000 fb19 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e88:	2028      	movs	r0, #40	; 0x28
 8000e8a:	f000 fb32 	bl	80014f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	48001800 	.word	0x48001800
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48001000 	.word	0x48001000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x44>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x44>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x44>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x44>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x44>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b0      	sub	sp, #192	; 0xc0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	2294      	movs	r2, #148	; 0x94
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fbc9 	bl	80056b8 <memset>
  if(huart->Instance==USART2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a4a      	ldr	r2, [pc, #296]	; (8001054 <HAL_UART_MspInit+0x154>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d143      	bne.n	8000fb8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fd03 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f48:	f7ff ffb0 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4c:	4b42      	ldr	r3, [pc, #264]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a41      	ldr	r2, [pc, #260]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f7c:	2378      	movs	r3, #120	; 0x78
 8000f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f94:	2307      	movs	r3, #7
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482e      	ldr	r0, [pc, #184]	; (800105c <HAL_UART_MspInit+0x15c>)
 8000fa2:	f000 fb7b 	bl	800169c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2026      	movs	r0, #38	; 0x26
 8000fac:	f000 fa85 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb0:	2026      	movs	r0, #38	; 0x26
 8000fb2:	f000 fa9e 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb6:	e048      	b.n	800104a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_UART_MspInit+0x160>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d143      	bne.n	800104a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fcba 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000fda:	f7ff ff67 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x158>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x158>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001032:	4619      	mov	r1, r3
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_UART_MspInit+0x15c>)
 8001036:	f000 fb31 	bl	800169c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2027      	movs	r0, #39	; 0x27
 8001040:	f000 fa3b 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001044:	2027      	movs	r0, #39	; 0x27
 8001046:	f000 fa54 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	37c0      	adds	r7, #192	; 0xc0
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40004400 	.word	0x40004400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000c00 	.word	0x48000c00
 8001060:	40004800 	.word	0x40004800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f8e4 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART2_IRQHandler+0x10>)
 80010be:	f002 fa87 	bl	80035d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000078 	.word	0x20000078

080010cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <USART3_IRQHandler+0x10>)
 80010d2:	f002 fa7d 	bl	80035d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000010c 	.word	0x2000010c

080010e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010e8:	f000 fc6a 	bl	80019c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 fad2 	bl	80056c8 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200a0000 	.word	0x200a0000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000204 	.word	0x20000204
 8001158:	20000358 	.word	0x20000358

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fa91 	bl	80056d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff fb3b 	bl	800082c <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011c4:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 80011c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011cc:	20000354 	.word	0x20000354

080011d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f961 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f80e 	bl	8001204 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e001      	b.n	80011f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f4:	f7ff fe60 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_InitTick+0x6c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d023      	beq.n	8001260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_InitTick+0x70>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_InitTick+0x6c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f96d 	bl	800150e <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d809      	bhi.n	8001254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f000 f937 	bl	80014ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_InitTick+0x74>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e007      	b.n	8001264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e004      	b.n	8001264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e001      	b.n	8001264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000208 	.word	0x20000208

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000208 	.word	0x20000208

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d008      	beq.n	8001550 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e040      	b.n	80015d2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020e 	bic.w	r2, r2, #14
 800155e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f003 021c 	and.w	r2, r3, #28
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800159c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d005      	beq.n	8001602 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2204      	movs	r2, #4
 80015fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e047      	b.n	8001692 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 020e 	bic.w	r2, r2, #14
 8001610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 021c 	and.w	r2, r3, #28
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800164e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001666:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001670:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
    }
  }
  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e166      	b.n	800197a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8158 	beq.w	8001974 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d005      	beq.n	80016dc <HAL_GPIO_Init+0x40>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d130      	bne.n	800173e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001712:	2201      	movs	r2, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 0201 	and.w	r2, r3, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b03      	cmp	r3, #3
 8001748:	d017      	beq.n	800177a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d123      	bne.n	80017ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80b2 	beq.w	8001974 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_GPIO_Init+0x2fc>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	4a60      	ldr	r2, [pc, #384]	; (8001998 <HAL_GPIO_Init+0x2fc>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6613      	str	r3, [r2, #96]	; 0x60
 800181c:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_GPIO_Init+0x2fc>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001828:	4a5c      	ldr	r2, [pc, #368]	; (800199c <HAL_GPIO_Init+0x300>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001852:	d02b      	beq.n	80018ac <HAL_GPIO_Init+0x210>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d025      	beq.n	80018a8 <HAL_GPIO_Init+0x20c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a51      	ldr	r2, [pc, #324]	; (80019a4 <HAL_GPIO_Init+0x308>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d01f      	beq.n	80018a4 <HAL_GPIO_Init+0x208>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_GPIO_Init+0x30c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d019      	beq.n	80018a0 <HAL_GPIO_Init+0x204>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_GPIO_Init+0x310>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d013      	beq.n	800189c <HAL_GPIO_Init+0x200>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_GPIO_Init+0x314>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1fc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <HAL_GPIO_Init+0x318>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1f8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_GPIO_Init+0x31c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1f4>
 800188c:	2307      	movs	r3, #7
 800188e:	e00e      	b.n	80018ae <HAL_GPIO_Init+0x212>
 8001890:	2308      	movs	r3, #8
 8001892:	e00c      	b.n	80018ae <HAL_GPIO_Init+0x212>
 8001894:	2306      	movs	r3, #6
 8001896:	e00a      	b.n	80018ae <HAL_GPIO_Init+0x212>
 8001898:	2305      	movs	r3, #5
 800189a:	e008      	b.n	80018ae <HAL_GPIO_Init+0x212>
 800189c:	2304      	movs	r3, #4
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x212>
 80018a0:	2303      	movs	r3, #3
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x212>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x212>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x212>
 80018ac:	2300      	movs	r3, #0
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_GPIO_Init+0x300>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_GPIO_Init+0x320>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f0:	4a32      	ldr	r2, [pc, #200]	; (80019bc <HAL_GPIO_Init+0x320>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_GPIO_Init+0x320>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191a:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x320>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_GPIO_Init+0x320>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_GPIO_Init+0x320>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_GPIO_Init+0x320>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <HAL_GPIO_Init+0x320>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f47f ae91 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	48000800 	.word	0x48000800
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001000 	.word	0x48001000
 80019b0:	48001400 	.word	0x48001400
 80019b4:	48001800 	.word	0x48001800
 80019b8:	48001c00 	.word	0x48001c00
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d006      	beq.n	80019e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe ff0c 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_PWREx_GetVoltageRange+0x3c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d102      	bne.n	8001a08 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a06:	e00b      	b.n	8001a20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a16:	d102      	bne.n	8001a1e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	e000      	b.n	8001a20 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a1e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000

08001a30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d141      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d131      	bne.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a4c:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a52:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a64:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2232      	movs	r2, #50	; 0x32
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	e002      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a96:	d102      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f2      	bne.n	8001a84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d158      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e057      	b.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ac0:	e04d      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac8:	d141      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d131      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2232      	movs	r2, #50	; 0x32
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9b      	lsrs	r3, r3, #18
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0e:	e002      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b22:	d102      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f2      	bne.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d112      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e011      	b.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b4c:	e007      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6053      	str	r3, [r2, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f000 bc08 	b.w	80023bc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bac:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb6:	4b94      	ldr	r3, [pc, #592]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80e4 	beq.w	8001d96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4c>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	f040 808b 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 8087 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be4:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x64>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e3df      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	4b81      	ldr	r3, [pc, #516]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_RCC_OscConfig+0x7e>
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_OscConfig+0x8a>
 8001c16:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d223      	bcs.n	8001c6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fdcc 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e3c0      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	496d      	ldr	r1, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4968      	ldr	r1, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e025      	b.n	8001cba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4960      	ldr	r1, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	495b      	ldr	r1, [pc, #364]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd8c 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e380      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cba:	f000 fcc1 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4950      	ldr	r1, [pc, #320]	; (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_RCC_OscConfig+0x278>)
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cda:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fa90 	bl	8001204 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d052      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	e364      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d032      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d06:	f7ff facd 	bl	80012a4 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fac9 	bl	80012a4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e34d      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d20:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4930      	ldr	r1, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	492b      	ldr	r1, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e01a      	b.n	8001d96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fa9a 	bl	80012a4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d74:	f7ff fa96 	bl	80012a4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e31a      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1dc>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d073      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x21c>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d10e      	bne.n	8001dcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d063      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d15f      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e2f7      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x24c>
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e025      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dec:	d114      	bne.n	8001e18 <HAL_RCC_OscConfig+0x280>
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a02      	ldr	r2, [pc, #8]	; (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08006068 	.word	0x08006068
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004
 8001e18:	4ba0      	ldr	r3, [pc, #640]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a9f      	ldr	r2, [pc, #636]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b9d      	ldr	r3, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a9c      	ldr	r2, [pc, #624]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa34 	bl	80012a4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fa30 	bl	80012a4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e2b4      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2a8>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff fa20 	bl	80012a4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fa1c 	bl	80012a4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e2a0      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7a:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2d0>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d060      	beq.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x310>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d116      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x328>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e27d      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4973      	ldr	r1, [pc, #460]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	e040      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d023      	beq.n	8001f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f9db 	bl	80012a4 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f9d7 	bl	80012a4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e25b      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b62      	ldr	r3, [pc, #392]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	495f      	ldr	r1, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f9b7 	bl	80012a4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f9b3 	bl	80012a4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e237      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03c      	beq.n	8001fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f992 	bl	80012a4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f98e 	bl	80012a4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e212      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ef      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f975 	bl	80012a4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f971 	bl	80012a4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1f5      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ef      	bne.n	8001fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_OscConfig+0x504>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x508>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d118      	bne.n	8002056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x508>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x508>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff f938 	bl	80012a4 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7ff f934 	bl	80012a4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1b8      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x508>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d8>
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206e:	e029      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_OscConfig+0x50c>
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_RCC_OscConfig+0x504>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_RCC_OscConfig+0x504>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_RCC_OscConfig+0x504>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a9c      	ldr	r2, [pc, #624]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b4:	4b99      	ldr	r3, [pc, #612]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a98      	ldr	r2, [pc, #608]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f8ea 	bl	80012a4 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff f8e6 	bl	80012a4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e168      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCC_OscConfig+0x53c>
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff f8d3 	bl	80012a4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f8cf 	bl	80012a4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e151      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4a7a      	ldr	r2, [pc, #488]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03c      	beq.n	80021be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01c      	beq.n	8002186 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800214c:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002152:	4a72      	ldr	r2, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff f8a2 	bl	80012a4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002164:	f7ff f89e 	bl	80012a4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e122      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002176:	4b69      	ldr	r3, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCC_OscConfig+0x5cc>
 8002184:	e01b      	b.n	80021be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218c:	4a63      	ldr	r2, [pc, #396]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f885 	bl	80012a4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219e:	f7ff f881 	bl	80012a4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e105      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b0:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80021b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ef      	bne.n	800219e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80f9 	beq.w	80023ba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	f040 80cf 	bne.w	8002370 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d2:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0203 	and.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d12c      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	3b01      	subs	r3, #1
 80021f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d123      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d11b      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d113      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d109      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d071      	beq.n	8002324 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d068      	beq.n	8002318 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0ac      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2d      	ldr	r2, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800226e:	f7ff f819 	bl	80012a4 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7ff f815 	bl	80012a4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e099      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x784>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x788>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022a4:	3a01      	subs	r2, #1
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ae:	0212      	lsls	r2, r2, #8
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022b6:	0852      	lsrs	r2, r2, #1
 80022b8:	3a01      	subs	r2, #1
 80022ba:	0552      	lsls	r2, r2, #21
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c2:	0852      	lsrs	r2, r2, #1
 80022c4:	3a01      	subs	r2, #1
 80022c6:	0652      	lsls	r2, r2, #25
 80022c8:	4311      	orrs	r1, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ce:	06d2      	lsls	r2, r2, #27
 80022d0:	430a      	orrs	r2, r1
 80022d2:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0x784>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f0:	f7fe ffd8 	bl	80012a4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe ffd4 	bl	80012a4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e058      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x784>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002316:	e050      	b.n	80023ba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04f      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
 800231c:	40021000 	.word	0x40021000
 8002320:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d144      	bne.n	80023ba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002348:	f7fe ffac 	bl	80012a4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe ffa8 	bl	80012a4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e02c      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x7b8>
 800236e:	e024      	b.n	80023ba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d01f      	beq.n	80023b6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 800237c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe ff8f 	bl	80012a4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe ff8b 	bl	80012a4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e00f      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4905      	ldr	r1, [pc, #20]	; (80023c4 <HAL_RCC_OscConfig+0x82c>)
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_OscConfig+0x830>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
 80023b4:	e001      	b.n	80023ba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	feeefffc 	.word	0xfeeefffc

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e11d      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b90      	ldr	r3, [pc, #576]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 020f 	bic.w	r2, r3, #15
 80023fa:	498b      	ldr	r1, [pc, #556]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e105      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	429a      	cmp	r2, r3
 800242e:	d908      	bls.n	8002442 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b7e      	ldr	r3, [pc, #504]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	497b      	ldr	r1, [pc, #492]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d079      	beq.n	8002542 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d11e      	bne.n	8002494 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	4b75      	ldr	r3, [pc, #468]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0dc      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002466:	f000 fa09 	bl	800287c <RCC_GetSysClockFreqFromPLLSource>
 800246a:	4603      	mov	r3, r0
 800246c:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HAL_RCC_ClockConfig+0x264>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d946      	bls.n	8002500 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002472:	4b6e      	ldr	r3, [pc, #440]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d140      	bne.n	8002500 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800247e:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002486:	4a69      	ldr	r2, [pc, #420]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e035      	b.n	8002500 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d107      	bne.n	80024ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249c:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d115      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b9      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b4:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0ad      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0a5      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80024d4:	f000 f8b4 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d90f      	bls.n	8002500 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ec:	4b4f      	ldr	r3, [pc, #316]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f4:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 0203 	bic.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4947      	ldr	r1, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002512:	f7fe fec7 	bl	80012a4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002518:	e00a      	b.n	8002530 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe fec3 	bl	80012a4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e077      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 020c 	and.w	r2, r3, #12
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	429a      	cmp	r2, r3
 8002540:	d1eb      	bne.n	800251a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d105      	bne.n	8002554 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800254e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002552:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d010      	beq.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256c:	429a      	cmp	r2, r3
 800256e:	d208      	bcs.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	492b      	ldr	r1, [pc, #172]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d210      	bcs.n	80025b2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 020f 	bic.w	r2, r3, #15
 8002598:	4923      	ldr	r1, [pc, #140]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e036      	b.n	8002620 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4918      	ldr	r1, [pc, #96]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4910      	ldr	r1, [pc, #64]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f0:	f000 f826 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <HAL_RCC_ClockConfig+0x268>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x26c>)
 800260e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_ClockConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fdf5 	bl	8001204 <HAL_InitTick>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]

  return status;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	04c4b400 	.word	0x04c4b400
 8002634:	08006068 	.word	0x08006068
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d121      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d11e      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_RCC_GetSysClockFreq+0x10c>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d102      	bne.n	80026be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e004      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_RCC_GetSysClockFreq+0x114>)
 80026c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d134      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d003      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0xac>
 80026e4:	e005      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCC_GetSysClockFreq+0x110>)
 80026e8:	617b      	str	r3, [r7, #20]
      break;
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ee:	617b      	str	r3, [r7, #20]
      break;
 80026f0:	e002      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	617b      	str	r3, [r7, #20]
      break;
 80026f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3301      	adds	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	fb03 f202 	mul.w	r2, r3, r2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_GetSysClockFreq+0x108>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0e5b      	lsrs	r3, r3, #25
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002738:	69bb      	ldr	r3, [r7, #24]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	08006080 	.word	0x08006080
 8002750:	00f42400 	.word	0x00f42400
 8002754:	007a1200 	.word	0x007a1200

08002758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4904      	ldr	r1, [pc, #16]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	08006078 	.word	0x08006078

0800279c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027a0:	f7ff ffda 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0adb      	lsrs	r3, r3, #11
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08006078 	.word	0x08006078

080027c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027e0:	f7ff f906 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 80027e4:	6178      	str	r0, [r7, #20]
 80027e6:	e014      	b.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a21      	ldr	r2, [pc, #132]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002800:	f7ff f8f6 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800280c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002818:	d10b      	bne.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d913      	bls.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2ba0      	cmp	r3, #160	; 0xa0
 8002824:	d902      	bls.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002826:	2302      	movs	r3, #2
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	e00d      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800282c:	2301      	movs	r3, #1
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e00a      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b7f      	cmp	r3, #127	; 0x7f
 8002836:	d902      	bls.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002838:	2302      	movs	r3, #2
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e004      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d101      	bne.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 020f 	bic.w	r2, r3, #15
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	40022000 	.word	0x40022000

0800287c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d00b      	beq.n	80028aa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d825      	bhi.n	80028e4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d008      	beq.n	80028b0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d11f      	bne.n	80028e4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028a6:	613b      	str	r3, [r7, #16]
    break;
 80028a8:	e01f      	b.n	80028ea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028ac:	613b      	str	r3, [r7, #16]
    break;
 80028ae:	e01c      	b.n	80028ea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e005      	b.n	80028d8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	613b      	str	r3, [r7, #16]
    break;
 80028e2:	e002      	b.n	80028ea <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
    break;
 80028e8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	3301      	adds	r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	fb03 f202 	mul.w	r2, r3, r2
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0e5b      	lsrs	r3, r3, #25
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800292a:	683b      	ldr	r3, [r7, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08006080 	.word	0x08006080

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002950:	2300      	movs	r3, #0
 8002952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002954:	2300      	movs	r3, #0
 8002956:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002960:	2b00      	cmp	r3, #0
 8002962:	d040      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d02a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800296c:	2b80      	cmp	r3, #128	; 0x80
 800296e:	d825      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002970:	2b60      	cmp	r3, #96	; 0x60
 8002972:	d026      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d821      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d006      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d81d      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d010      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002988:	e018      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800298a:	4b89      	ldr	r3, [pc, #548]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a88      	ldr	r2, [pc, #544]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002996:	e015      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fb02 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a8:	e00c      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3320      	adds	r3, #32
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fbed 	bl	8003190 <RCCEx_PLLSAI2_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ba:	e003      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	74fb      	strb	r3, [r7, #19]
      break;
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ca:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d8:	4975      	ldr	r1, [pc, #468]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029e0:	e001      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d047      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d030      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d82a      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a06:	d02a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a0c:	d824      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a12:	d008      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d81e      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a22:	d010      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a24:	e018      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a26:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a32:	e015      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fab4 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a44:	e00c      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3320      	adds	r3, #32
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fb9f 	bl	8003190 <RCCEx_PLLSAI2_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a5c:	e000      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a66:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	494e      	ldr	r1, [pc, #312]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a7c:	e001      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 809f 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a94:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fbe7 	bl	80012a4 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe fbe3 	bl	80012a4 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	74fb      	strb	r3, [r7, #19]
        break;
 8002aec:	e005      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ef      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d15b      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01f      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b4a:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fba2 	bl	80012a4 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b62:	e00b      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fb9e 	bl	80012a4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d902      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7a:	e006      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ec      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba8:	e008      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	74bb      	strb	r3, [r7, #18]
 8002bae:	e005      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7c7b      	ldrb	r3, [r7, #17]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4a9f      	ldr	r2, [pc, #636]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bda:	4b9a      	ldr	r3, [pc, #616]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	4996      	ldr	r1, [pc, #600]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfc:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 020c 	bic.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	498e      	ldr	r1, [pc, #568]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	4985      	ldr	r1, [pc, #532]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c40:	4b80      	ldr	r3, [pc, #512]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	497d      	ldr	r1, [pc, #500]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c62:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	4974      	ldr	r1, [pc, #464]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c84:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	496c      	ldr	r1, [pc, #432]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb4:	4963      	ldr	r1, [pc, #396]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc8:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd6:	495b      	ldr	r1, [pc, #364]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	4952      	ldr	r1, [pc, #328]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	494a      	ldr	r1, [pc, #296]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2e:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	4941      	ldr	r1, [pc, #260]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d50:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	4939      	ldr	r1, [pc, #228]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d028      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	4930      	ldr	r1, [pc, #192]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9c:	60d3      	str	r3, [r2, #12]
 8002d9e:	e011      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f8f9 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d04d      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd8:	d108      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dea:	e012      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0a:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e26:	60d3      	str	r3, [r2, #12]
 8002e28:	e020      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e32:	d109      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a02      	ldr	r2, [pc, #8]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	60d3      	str	r3, [r2, #12]
 8002e40:	e014      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 f8a5 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d028      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e78:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	4947      	ldr	r1, [pc, #284]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e98:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a41      	ldr	r2, [pc, #260]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	60d3      	str	r3, [r2, #12]
 8002ea4:	e011      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eae:	d10c      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f876 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01e      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	492f      	ldr	r1, [pc, #188]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f851 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f26:	f023 0204 	bic.w	r2, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	491c      	ldr	r1, [pc, #112]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f4a:	f023 0218 	bic.w	r2, r3, #24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	4913      	ldr	r1, [pc, #76]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f78:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d103      	bne.n	8002fda <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d142      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e03f      	b.n	8003060 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d018      	beq.n	800301a <RCCEx_PLLSAI1_Config+0x72>
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d825      	bhi.n	8003038 <RCCEx_PLLSAI1_Config+0x90>
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d002      	beq.n	8002ff6 <RCCEx_PLLSAI1_Config+0x4e>
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d009      	beq.n	8003008 <RCCEx_PLLSAI1_Config+0x60>
 8002ff4:	e020      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff6:	4b62      	ldr	r3, [pc, #392]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11d      	bne.n	800303e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003006:	e01a      	b.n	800303e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003008:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e013      	b.n	8003042 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003026:	4b56      	ldr	r3, [pc, #344]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003036:	e006      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      break;
 800303c:	e004      	b.n	8003048 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003046:	bf00      	nop
    }

    if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4949      	ldr	r1, [pc, #292]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 8086 	bne.w	8003174 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a44      	ldr	r2, [pc, #272]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800306e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fe f916 	bl	80012a4 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307a:	e009      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307c:	f7fe f912 	bl	80012a4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
        break;
 800308e:	e005      	b.n	800309c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ef      	bne.n	800307c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d168      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d113      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	06d2      	lsls	r2, r2, #27
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6852      	ldr	r2, [r2, #4]
 80030c2:	3a01      	subs	r2, #1
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	430a      	orrs	r2, r1
 80030c8:	492d      	ldr	r1, [pc, #180]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]
 80030ce:	e02d      	b.n	800312c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d115      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	0211      	lsls	r1, r2, #8
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6912      	ldr	r2, [r2, #16]
 80030e8:	0852      	lsrs	r2, r2, #1
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0552      	lsls	r2, r2, #21
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4921      	ldr	r1, [pc, #132]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	610b      	str	r3, [r1, #16]
 8003100:	e014      	b.n	800312c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	0211      	lsls	r1, r2, #8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6952      	ldr	r2, [r2, #20]
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
 8003118:	0652      	lsls	r2, r2, #25
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	3a01      	subs	r2, #1
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	4916      	ldr	r1, [pc, #88]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe f8b4 	bl	80012a4 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fe f8b0 	bl	80012a4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
          break;
 8003152:	e005      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0ef      	beq.n	8003140 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4904      	ldr	r1, [pc, #16]	; (8003180 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003170:	4313      	orrs	r3, r2
 8003172:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	07ff800f 	.word	0x07ff800f
 8003188:	ff9f800f 	.word	0xff9f800f
 800318c:	f9ff800f 	.word	0xf9ff800f

08003190 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00e      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0203 	and.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d103      	bne.n	80031c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
       ||
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d142      	bne.n	8003248 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e03f      	b.n	8003248 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d018      	beq.n	8003202 <RCCEx_PLLSAI2_Config+0x72>
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d825      	bhi.n	8003220 <RCCEx_PLLSAI2_Config+0x90>
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d002      	beq.n	80031de <RCCEx_PLLSAI2_Config+0x4e>
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d009      	beq.n	80031f0 <RCCEx_PLLSAI2_Config+0x60>
 80031dc:	e020      	b.n	8003220 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031de:	4b62      	ldr	r3, [pc, #392]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11d      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ee:	e01a      	b.n	8003226 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f0:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d116      	bne.n	800322a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e013      	b.n	800322a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003202:	4b59      	ldr	r3, [pc, #356]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800320e:	4b56      	ldr	r3, [pc, #344]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800321e:	e006      	b.n	800322e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e004      	b.n	8003230 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800322e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4949      	ldr	r1, [pc, #292]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003244:	4313      	orrs	r3, r2
 8003246:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 8086 	bne.w	800335c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003250:	4b45      	ldr	r3, [pc, #276]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a44      	ldr	r2, [pc, #272]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fe f822 	bl	80012a4 <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003262:	e009      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003264:	f7fe f81e 	bl	80012a4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d902      	bls.n	8003278 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	73fb      	strb	r3, [r7, #15]
        break;
 8003276:	e005      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ef      	bne.n	8003264 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d168      	bne.n	800335c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d113      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	06d2      	lsls	r2, r2, #27
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6852      	ldr	r2, [r2, #4]
 80032aa:	3a01      	subs	r2, #1
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	430a      	orrs	r2, r1
 80032b0:	492d      	ldr	r1, [pc, #180]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	614b      	str	r3, [r1, #20]
 80032b6:	e02d      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d115      	bne.n	80032ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <RCCEx_PLLSAI2_Config+0x1e0>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6892      	ldr	r2, [r2, #8]
 80032ca:	0211      	lsls	r1, r2, #8
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6912      	ldr	r2, [r2, #16]
 80032d0:	0852      	lsrs	r2, r2, #1
 80032d2:	3a01      	subs	r2, #1
 80032d4:	0552      	lsls	r2, r2, #21
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6852      	ldr	r2, [r2, #4]
 80032dc:	3a01      	subs	r2, #1
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	430a      	orrs	r2, r1
 80032e2:	4921      	ldr	r1, [pc, #132]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	614b      	str	r3, [r1, #20]
 80032e8:	e014      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <RCCEx_PLLSAI2_Config+0x1e4>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	0211      	lsls	r1, r2, #8
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6952      	ldr	r2, [r2, #20]
 80032fc:	0852      	lsrs	r2, r2, #1
 80032fe:	3a01      	subs	r2, #1
 8003300:	0652      	lsls	r2, r2, #25
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6852      	ldr	r2, [r2, #4]
 8003308:	3a01      	subs	r2, #1
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	430a      	orrs	r2, r1
 800330e:	4916      	ldr	r1, [pc, #88]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003310:	4313      	orrs	r3, r2
 8003312:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a13      	ldr	r2, [pc, #76]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fd ffc0 	bl	80012a4 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003326:	e009      	b.n	800333c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003328:	f7fd ffbc 	bl	80012a4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d902      	bls.n	800333c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	73fb      	strb	r3, [r7, #15]
          break;
 800333a:	e005      	b.n	8003348 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ef      	beq.n	8003328 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	4904      	ldr	r1, [pc, #16]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	07ff800f 	.word	0x07ff800f
 8003370:	ff9f800f 	.word	0xff9f800f
 8003374:	f9ff800f 	.word	0xf9ff800f

08003378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fd fdaf 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2224      	movs	r2, #36	; 0x24
 80033a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 ff44 	bl	8004250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fc45 	bl	8003c58 <UART_SetConfig>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e01b      	b.n	8003410 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 ffc3 	bl	8004394 <UART_CheckIdleState>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	2b20      	cmp	r3, #32
 8003430:	d17c      	bne.n	800352c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_UART_Transmit+0x26>
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e075      	b.n	800352e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2221      	movs	r2, #33	; 0x21
 800344e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003452:	f7fd ff27 	bl	80012a4 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800348c:	e031      	b.n	80034f2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f001 f825 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03e      	b.n	800352e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c2:	b292      	uxth	r2, r2
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e008      	b.n	80034e0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1c7      	bne.n	800348e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 ffed 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e006      	b.n	800352e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	2b20      	cmp	r3, #32
 800354e:	d137      	bne.n	80035c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_UART_Receive_IT+0x24>
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e030      	b.n	80035c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_UART_Receive_IT+0x94>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01f      	beq.n	80035b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d018      	beq.n	80035b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	613b      	str	r3, [r7, #16]
   return(result);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	69f9      	ldr	r1, [r7, #28]
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e6      	bne.n	800357e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fffe 	bl	80045b8 <UART_Start_Receive_IT>
 80035bc:	4603      	mov	r3, r0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40008000 	.word	0x40008000

080035d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b0ba      	sub	sp, #232	; 0xe8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80035fe:	4013      	ands	r3, r2
 8003600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11b      	bne.n	8003644 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 82e3 	beq.w	8003c00 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      }
      return;
 8003642:	e2dd      	b.n	8003c00 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8123 	beq.w	8003894 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800364e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003652:	4b8d      	ldr	r3, [pc, #564]	; (8003888 <HAL_UART_IRQHandler+0x2b8>)
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800365a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_UART_IRQHandler+0x2bc>)
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8116 	beq.w	8003894 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d011      	beq.n	8003698 <HAL_UART_IRQHandler+0xc8>
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d011      	beq.n	80036c8 <HAL_UART_IRQHandler+0xf8>
 80036a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d011      	beq.n	80036f8 <HAL_UART_IRQHandler+0x128>
 80036d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2204      	movs	r2, #4
 80036e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d017      	beq.n	8003734 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003710:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003714:	4b5c      	ldr	r3, [pc, #368]	; (8003888 <HAL_UART_IRQHandler+0x2b8>)
 8003716:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2208      	movs	r2, #8
 8003722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f043 0208 	orr.w	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <HAL_UART_IRQHandler+0x196>
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8249 	beq.w	8003c04 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800377e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d054      	beq.n	8003874 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 f816 	bl	80047fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d146      	bne.n	800386c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800380a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800380e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d9      	bne.n	80037de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_UART_IRQHandler+0x2c0>)
 800383c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd feca 	bl	80015de <HAL_DMA_Abort_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d019      	beq.n	8003884 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800385e:	4610      	mov	r0, r2
 8003860:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003862:	e00f      	b.n	8003884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f9e1 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386a:	e00b      	b.n	8003884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f9dd 	bl	8003c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003872:	e007      	b.n	8003884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9d9 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003882:	e1bf      	b.n	8003c04 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	bf00      	nop
    return;
 8003886:	e1bd      	b.n	8003c04 <HAL_UART_IRQHandler+0x634>
 8003888:	10000001 	.word	0x10000001
 800388c:	04000120 	.word	0x04000120
 8003890:	080048c9 	.word	0x080048c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 8153 	bne.w	8003b44 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 814c 	beq.w	8003b44 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8145 	beq.w	8003b44 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	f040 80bb 	bne.w	8003a48 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 818f 	beq.w	8003c08 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f080 8187 	bcs.w	8003c08 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003900:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 8087 	bne.w	8003a26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800392c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800394e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800395a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1da      	bne.n	8003918 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800398a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800398e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e1      	bne.n	8003962 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e3      	bne.n	800399e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e4      	bne.n	80039e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fd80 	bl	8001526 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f8fd 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a46:	e0df      	b.n	8003c08 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80d1 	beq.w	8003c0c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80cc 	beq.w	8003c0c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
 8003a98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e4      	bne.n	8003a74 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e1      	bne.n	8003aaa <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0310 	bic.w	r3, r3, #16
 8003b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e4      	bne.n	8003afa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f87f 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b42:	e063      	b.n	8003c0c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_UART_IRQHandler+0x59e>
 8003b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f001 fc14 	bl	8005394 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b6c:	e051      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03a      	beq.n	8003c10 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
    return;
 8003ba2:	e035      	b.n	8003c10 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x5f4>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fe99 	bl	80048f4 <UART_EndTransmit_IT>
    return;
 8003bc2:	e026      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_UART_IRQHandler+0x614>
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f001 fbed 	bl	80053bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003be2:	e016      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_UART_IRQHandler+0x642>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da0c      	bge.n	8003c12 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f001 fbd5 	bl	80053a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfe:	e008      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
      return;
 8003c00:	bf00      	nop
 8003c02:	e006      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
    return;
 8003c04:	bf00      	nop
 8003c06:	e004      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
      return;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
      return;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_UART_IRQHandler+0x642>
    return;
 8003c10:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c12:	37e8      	adds	r7, #232	; 0xe8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c5c:	b08c      	sub	sp, #48	; 0x30
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4baa      	ldr	r3, [pc, #680]	; (8003f30 <UART_SetConfig+0x2d8>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a9f      	ldr	r2, [pc, #636]	; (8003f34 <UART_SetConfig+0x2dc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003cce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f023 010f 	bic.w	r1, r3, #15
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a90      	ldr	r2, [pc, #576]	; (8003f38 <UART_SetConfig+0x2e0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d125      	bne.n	8003d48 <UART_SetConfig+0xf0>
 8003cfc:	4b8f      	ldr	r3, [pc, #572]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d81a      	bhi.n	8003d40 <UART_SetConfig+0xe8>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0xb8>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e116      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e112      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003d30:	2304      	movs	r3, #4
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d36:	e10e      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003d38:	2308      	movs	r3, #8
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e10a      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003d40:	2310      	movs	r3, #16
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e106      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7c      	ldr	r2, [pc, #496]	; (8003f40 <UART_SetConfig+0x2e8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d138      	bne.n	8003dc4 <UART_SetConfig+0x16c>
 8003d52:	4b7a      	ldr	r3, [pc, #488]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d82d      	bhi.n	8003dbc <UART_SetConfig+0x164>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x110>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003da5 	.word	0x08003da5
 8003d8c:	08003dbd 	.word	0x08003dbd
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e0d8      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003da4:	2302      	movs	r3, #2
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003daa:	e0d4      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003dac:	2304      	movs	r3, #4
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db2:	e0d0      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003db4:	2308      	movs	r3, #8
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dba:	e0cc      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e0c8      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5e      	ldr	r2, [pc, #376]	; (8003f44 <UART_SetConfig+0x2ec>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d125      	bne.n	8003e1a <UART_SetConfig+0x1c2>
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d016      	beq.n	8003e0a <UART_SetConfig+0x1b2>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d818      	bhi.n	8003e12 <UART_SetConfig+0x1ba>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d00a      	beq.n	8003dfa <UART_SetConfig+0x1a2>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d814      	bhi.n	8003e12 <UART_SetConfig+0x1ba>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <UART_SetConfig+0x19a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d008      	beq.n	8003e02 <UART_SetConfig+0x1aa>
 8003df0:	e00f      	b.n	8003e12 <UART_SetConfig+0x1ba>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df8:	e0ad      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e00:	e0a9      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e02:	2304      	movs	r3, #4
 8003e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e08:	e0a5      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e10:	e0a1      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e12:	2310      	movs	r3, #16
 8003e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e18:	e09d      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <UART_SetConfig+0x2f0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d125      	bne.n	8003e70 <UART_SetConfig+0x218>
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e30:	d016      	beq.n	8003e60 <UART_SetConfig+0x208>
 8003e32:	2bc0      	cmp	r3, #192	; 0xc0
 8003e34:	d818      	bhi.n	8003e68 <UART_SetConfig+0x210>
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d00a      	beq.n	8003e50 <UART_SetConfig+0x1f8>
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d814      	bhi.n	8003e68 <UART_SetConfig+0x210>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <UART_SetConfig+0x1f0>
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d008      	beq.n	8003e58 <UART_SetConfig+0x200>
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x210>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e4e:	e082      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e07e      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e07a      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e60:	2308      	movs	r3, #8
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e076      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	e072      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <UART_SetConfig+0x2f4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12a      	bne.n	8003ed0 <UART_SetConfig+0x278>
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e88:	d01a      	beq.n	8003ec0 <UART_SetConfig+0x268>
 8003e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0x270>
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e94:	d00c      	beq.n	8003eb0 <UART_SetConfig+0x258>
 8003e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9a:	d815      	bhi.n	8003ec8 <UART_SetConfig+0x270>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x250>
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d008      	beq.n	8003eb8 <UART_SetConfig+0x260>
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x270>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eae:	e052      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e04e      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e04a      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec6:	e046      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e042      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <UART_SetConfig+0x2dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d13a      	bne.n	8003f50 <UART_SetConfig+0x2f8>
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <UART_SetConfig+0x2e4>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee8:	d01a      	beq.n	8003f20 <UART_SetConfig+0x2c8>
 8003eea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eee:	d81b      	bhi.n	8003f28 <UART_SetConfig+0x2d0>
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef4:	d00c      	beq.n	8003f10 <UART_SetConfig+0x2b8>
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d815      	bhi.n	8003f28 <UART_SetConfig+0x2d0>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <UART_SetConfig+0x2b0>
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d008      	beq.n	8003f18 <UART_SetConfig+0x2c0>
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x2d0>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0e:	e022      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f16:	e01e      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1e:	e01a      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f26:	e016      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e012      	b.n	8003f56 <UART_SetConfig+0x2fe>
 8003f30:	cfff69f3 	.word	0xcfff69f3
 8003f34:	40008000 	.word	0x40008000
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40004400 	.word	0x40004400
 8003f44:	40004800 	.word	0x40004800
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	40005000 	.word	0x40005000
 8003f50:	2310      	movs	r3, #16
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4aae      	ldr	r2, [pc, #696]	; (8004214 <UART_SetConfig+0x5bc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	f040 8097 	bne.w	8004090 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d823      	bhi.n	8003fb2 <UART_SetConfig+0x35a>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0x318>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fa3 	.word	0x08003fa3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fb3 	.word	0x08003fb3
 8003f90:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f94:	f7fe fbec 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9a:	e010      	b.n	8003fbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b9e      	ldr	r3, [pc, #632]	; (8004218 <UART_SetConfig+0x5c0>)
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe fb4d 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb0:	e005      	b.n	8003fbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8130 	beq.w	8004226 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	4a94      	ldr	r2, [pc, #592]	; (800421c <UART_SetConfig+0x5c4>)
 8003fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d305      	bcc.n	8003ff6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d903      	bls.n	8003ffe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ffc:	e113      	b.n	8004226 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	2200      	movs	r2, #0
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	60fa      	str	r2, [r7, #12]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	4a84      	ldr	r2, [pc, #528]	; (800421c <UART_SetConfig+0x5c4>)
 800400c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004010:	b29b      	uxth	r3, r3
 8004012:	2200      	movs	r2, #0
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800401c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004020:	f7fc f946 	bl	80002b0 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	020b      	lsls	r3, r1, #8
 8004036:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800403a:	0202      	lsls	r2, r0, #8
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	6849      	ldr	r1, [r1, #4]
 8004040:	0849      	lsrs	r1, r1, #1
 8004042:	2000      	movs	r0, #0
 8004044:	460c      	mov	r4, r1
 8004046:	4605      	mov	r5, r0
 8004048:	eb12 0804 	adds.w	r8, r2, r4
 800404c:	eb43 0905 	adc.w	r9, r3, r5
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	469a      	mov	sl, r3
 8004058:	4693      	mov	fp, r2
 800405a:	4652      	mov	r2, sl
 800405c:	465b      	mov	r3, fp
 800405e:	4640      	mov	r0, r8
 8004060:	4649      	mov	r1, r9
 8004062:	f7fc f925 	bl	80002b0 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4613      	mov	r3, r2
 800406c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004074:	d308      	bcc.n	8004088 <UART_SetConfig+0x430>
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407c:	d204      	bcs.n	8004088 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	e0ce      	b.n	8004226 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800408e:	e0ca      	b.n	8004226 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004098:	d166      	bne.n	8004168 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800409a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d827      	bhi.n	80040f2 <UART_SetConfig+0x49a>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x450>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe fb50 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040d2:	e014      	b.n	80040fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fb62 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040da:	e010      	b.n	80040fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <UART_SetConfig+0x5c0>)
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e0:	e00d      	b.n	80040fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe faad 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040e8:	e009      	b.n	80040fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040f0:	e005      	b.n	80040fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8090 	beq.w	8004226 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	4a44      	ldr	r2, [pc, #272]	; (800421c <UART_SetConfig+0x5c4>)
 800410c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004110:	461a      	mov	r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	fbb3 f3f2 	udiv	r3, r3, r2
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	441a      	add	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d916      	bls.n	8004160 <UART_SetConfig+0x508>
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d212      	bcs.n	8004160 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f023 030f 	bic.w	r3, r3, #15
 8004142:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	b29a      	uxth	r2, r3
 8004150:	8bfb      	ldrh	r3, [r7, #30]
 8004152:	4313      	orrs	r3, r2
 8004154:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	8bfa      	ldrh	r2, [r7, #30]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e062      	b.n	8004226 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004166:	e05e      	b.n	8004226 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800416c:	2b08      	cmp	r3, #8
 800416e:	d828      	bhi.n	80041c2 <UART_SetConfig+0x56a>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x520>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe fae8 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041a2:	e014      	b.n	80041ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fafa 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041aa:	e010      	b.n	80041ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <UART_SetConfig+0x5c0>)
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041b0:	e00d      	b.n	80041ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fa45 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041b8:	e009      	b.n	80041ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041c0:	e005      	b.n	80041ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041cc:	bf00      	nop
    }

    if (pclk != 0U)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d028      	beq.n	8004226 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4a10      	ldr	r2, [pc, #64]	; (800421c <UART_SetConfig+0x5c4>)
 80041da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041de:	461a      	mov	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	441a      	add	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	d910      	bls.n	8004220 <UART_SetConfig+0x5c8>
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d20c      	bcs.n	8004220 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	b29a      	uxth	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	e009      	b.n	8004226 <UART_SetConfig+0x5ce>
 8004212:	bf00      	nop
 8004214:	40008000 	.word	0x40008000
 8004218:	00f42400 	.word	0x00f42400
 800421c:	080060b0 	.word	0x080060b0
      }
      else
      {
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2201      	movs	r2, #1
 800422a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2201      	movs	r2, #1
 8004232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2200      	movs	r2, #0
 800423a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004242:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004246:	4618      	mov	r0, r3
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01a      	beq.n	8004366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434e:	d10a      	bne.n	8004366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b098      	sub	sp, #96	; 0x60
 8004398:	af02      	add	r7, sp, #8
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043a4:	f7fc ff7e 	bl	80012a4 <HAL_GetTick>
 80043a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d12f      	bne.n	8004418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	2200      	movs	r2, #0
 80043c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f88e 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d022      	beq.n	8004418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
 80043f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e063      	b.n	80044e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d149      	bne.n	80044ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	2200      	movs	r2, #0
 8004430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f857 	bl	80044e8 <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d03c      	beq.n	80044ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	623b      	str	r3, [r7, #32]
   return(result);
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
 8004460:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e6      	bne.n	8004440 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3308      	adds	r3, #8
 8004478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60fb      	str	r3, [r7, #12]
   return(result);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3308      	adds	r3, #8
 8004490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004492:	61fa      	str	r2, [r7, #28]
 8004494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	617b      	str	r3, [r7, #20]
   return(result);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e012      	b.n	80044e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3758      	adds	r7, #88	; 0x58
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f8:	e049      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004500:	d045      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fc fecf 	bl	80012a4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <UART_WaitOnFlagUntilTimeout+0x30>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e048      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d031      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d110      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f95b 	bl	80047fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2208      	movs	r2, #8
 800454a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e029      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004568:	d111      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f941 	bl	80047fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00f      	b.n	80045ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d0a6      	beq.n	80044fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b0a3      	sub	sp, #140	; 0x8c
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d10e      	bne.n	800460a <UART_Start_Receive_IT+0x52>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <UART_Start_Receive_IT+0x48>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045fe:	e02d      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	; 0xff
 8004604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004608:	e028      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <UART_Start_Receive_IT+0x76>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <UART_Start_Receive_IT+0x6c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004622:	e01b      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	227f      	movs	r2, #127	; 0x7f
 8004628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800462c:	e016      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004636:	d10d      	bne.n	8004654 <UART_Start_Receive_IT+0x9c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <UART_Start_Receive_IT+0x92>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	227f      	movs	r2, #127	; 0x7f
 8004644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004648:	e008      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	223f      	movs	r2, #63	; 0x3f
 800464e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004652:	e003      	b.n	800465c <UART_Start_Receive_IT+0xa4>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2222      	movs	r2, #34	; 0x22
 8004668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800467c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004690:	673a      	str	r2, [r7, #112]	; 0x70
 8004692:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800469e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ac:	d14f      	bne.n	800474e <UART_Start_Receive_IT+0x196>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d349      	bcc.n	800474e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d107      	bne.n	80046d4 <UART_Start_Receive_IT+0x11c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a47      	ldr	r2, [pc, #284]	; (80047ec <UART_Start_Receive_IT+0x234>)
 80046d0:	675a      	str	r2, [r3, #116]	; 0x74
 80046d2:	e002      	b.n	80046da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a46      	ldr	r2, [pc, #280]	; (80047f0 <UART_Start_Receive_IT+0x238>)
 80046d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01a      	beq.n	8004718 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004706:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800470a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004738:	64ba      	str	r2, [r7, #72]	; 0x48
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800473e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e5      	bne.n	8004718 <UART_Start_Receive_IT+0x160>
 800474c:	e046      	b.n	80047dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d107      	bne.n	8004768 <UART_Start_Receive_IT+0x1b0>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <UART_Start_Receive_IT+0x23c>)
 8004764:	675a      	str	r2, [r3, #116]	; 0x74
 8004766:	e002      	b.n	800476e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <UART_Start_Receive_IT+0x240>)
 800476c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800478a:	677b      	str	r3, [r7, #116]	; 0x74
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800479a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_Start_Receive_IT+0x1be>
 80047a8:	e018      	b.n	80047dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	69f9      	ldr	r1, [r7, #28]
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	378c      	adds	r7, #140	; 0x8c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	08005029 	.word	0x08005029
 80047f0:	08004cc5 	.word	0x08004cc5
 80047f4:	08004b09 	.word	0x08004b09
 80047f8:	0800494d 	.word	0x0800494d

080047fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b095      	sub	sp, #84	; 0x54
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004822:	643b      	str	r3, [r7, #64]	; 0x40
 8004824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e6      	bne.n	8004804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3308      	adds	r3, #8
 800483c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	61fb      	str	r3, [r7, #28]
   return(result);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	64bb      	str	r3, [r7, #72]	; 0x48
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e3      	bne.n	8004836 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d118      	bne.n	80048a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	60bb      	str	r3, [r7, #8]
   return(result);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0310 	bic.w	r3, r3, #16
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6979      	ldr	r1, [r7, #20]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	613b      	str	r3, [r7, #16]
   return(result);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e6      	bne.n	8004876 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048bc:	bf00      	nop
 80048be:	3754      	adds	r7, #84	; 0x54
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff f9a0 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	60bb      	str	r3, [r7, #8]
   return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	613b      	str	r3, [r7, #16]
   return(result);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e6      	bne.n	80048fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff f96b 	bl	8003c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b09c      	sub	sp, #112	; 0x70
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800495a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	2b22      	cmp	r3, #34	; 0x22
 8004966:	f040 80be 	bne.w	8004ae6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004970:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004978:	b2d9      	uxtb	r1, r3
 800497a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800497e:	b2da      	uxtb	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	400a      	ands	r2, r1
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80a3 	bne.w	8004afa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3308      	adds	r3, #8
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	667b      	str	r3, [r7, #100]	; 0x64
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a06:	647a      	str	r2, [r7, #68]	; 0x44
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <UART_RxISR_8BIT+0x1b8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d01f      	beq.n	8004a78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	623b      	str	r3, [r7, #32]
   return(result);
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a64:	633b      	str	r3, [r7, #48]	; 0x30
 8004a66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d12e      	bne.n	8004ade <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0310 	bic.w	r3, r3, #16
 8004a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e6      	bne.n	8004a86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d103      	bne.n	8004ace <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2210      	movs	r2, #16
 8004acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff f8b2 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004adc:	e00d      	b.n	8004afa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fb fe6e 	bl	80007c0 <HAL_UART_RxCpltCallback>
}
 8004ae4:	e009      	b.n	8004afa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	8b1b      	ldrh	r3, [r3, #24]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	b292      	uxth	r2, r2
 8004af8:	831a      	strh	r2, [r3, #24]
}
 8004afa:	bf00      	nop
 8004afc:	3770      	adds	r7, #112	; 0x70
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40008000 	.word	0x40008000

08004b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b09c      	sub	sp, #112	; 0x70
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b20:	2b22      	cmp	r3, #34	; 0x22
 8004b22:	f040 80be 	bne.w	8004ca2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 80a3 	bne.w	8004cb6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b84:	667b      	str	r3, [r7, #100]	; 0x64
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bc2:	643a      	str	r2, [r7, #64]	; 0x40
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a34      	ldr	r2, [pc, #208]	; (8004cc0 <UART_RxISR_16BIT+0x1b8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01f      	beq.n	8004c34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d12e      	bne.n	8004c9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6979      	ldr	r1, [r7, #20]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e6      	bne.n	8004c42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d103      	bne.n	8004c8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2210      	movs	r2, #16
 8004c88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fe ffd4 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c98:	e00d      	b.n	8004cb6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fb fd90 	bl	80007c0 <HAL_UART_RxCpltCallback>
}
 8004ca0:	e009      	b.n	8004cb6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	8b1b      	ldrh	r3, [r3, #24]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0208 	orr.w	r2, r2, #8
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	831a      	strh	r2, [r3, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	3770      	adds	r7, #112	; 0x70
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40008000 	.word	0x40008000

08004cc4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b0ac      	sub	sp, #176	; 0xb0
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfa:	2b22      	cmp	r3, #34	; 0x22
 8004cfc:	f040 8182 	bne.w	8005004 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d06:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d0a:	e125      	b.n	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d12:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004d1a:	b2d9      	uxtb	r1, r3
 8004d1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	400a      	ands	r2, r1
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d053      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2202      	movs	r2, #2
 8004dac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f043 0202 	orr.w	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d006      	beq.n	8004e06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fe ff17 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 80a2 	bne.w	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e38:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004e3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e4      	bne.n	8004e14 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e72:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e74:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e1      	bne.n	8004e4a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a60      	ldr	r2, [pc, #384]	; (8005020 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d021      	beq.n	8004ee8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01a      	beq.n	8004ee8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004eda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e4      	bne.n	8004eb2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d130      	bne.n	8004f52 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f18:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e4      	bne.n	8004ef6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d103      	bne.n	8004f42 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2210      	movs	r2, #16
 8004f40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe fe78 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
 8004f50:	e002      	b.n	8004f58 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb fc34 	bl	80007c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f aecf 	bne.w	8004d0c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d04b      	beq.n	8005018 <UART_RxISR_8BIT_FIFOEN+0x354>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d244      	bcs.n	8005018 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e3      	bne.n	8004f8e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a16      	ldr	r2, [pc, #88]	; (8005024 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004fca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e4      	bne.n	8004fcc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005002:	e009      	b.n	8005018 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	8b1b      	ldrh	r3, [r3, #24]
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	b292      	uxth	r2, r2
 8005016:	831a      	strh	r2, [r3, #24]
}
 8005018:	bf00      	nop
 800501a:	37b0      	adds	r7, #176	; 0xb0
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40008000 	.word	0x40008000
 8005024:	0800494d 	.word	0x0800494d

08005028 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b0ae      	sub	sp, #184	; 0xb8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005036:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	2b22      	cmp	r3, #34	; 0x22
 8005060:	f040 8186 	bne.w	8005370 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800506a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800506e:	e129      	b.n	80052c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005076:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005082:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005086:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800508a:	4013      	ands	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005092:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d053      	beq.n	800516e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d011      	beq.n	80050f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80050d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2201      	movs	r2, #1
 80050e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2202      	movs	r2, #2
 8005114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f043 0204 	orr.w	r2, r3, #4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2204      	movs	r2, #4
 8005144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f043 0202 	orr.w	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	2b00      	cmp	r3, #0
 800515e:	d006      	beq.n	800516e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fe fd63 	bl	8003c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 80a4 	bne.w	80052c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800518a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051a2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e2      	bne.n	800517c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e1      	bne.n	80051b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a60      	ldr	r2, [pc, #384]	; (800538c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d021      	beq.n	8005254 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01a      	beq.n	8005254 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800522c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005240:	65bb      	str	r3, [r7, #88]	; 0x58
 8005242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800524e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e4      	bne.n	800521e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d130      	bne.n	80052be <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	f023 0310 	bic.w	r3, r3, #16
 8005276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005284:	647b      	str	r3, [r7, #68]	; 0x44
 8005286:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800528a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e4      	bne.n	8005262 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d103      	bne.n	80052ae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe fcc2 	bl	8003c40 <HAL_UARTEx_RxEventCallback>
 80052bc:	e002      	b.n	80052c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb fa7e 	bl	80007c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80052cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f aecb 	bne.w	8005070 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80052e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d04b      	beq.n	8005384 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d244      	bcs.n	8005384 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	623b      	str	r3, [r7, #32]
   return(result);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800531e:	633a      	str	r2, [r7, #48]	; 0x30
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e3      	bne.n	80052fa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a16      	ldr	r2, [pc, #88]	; (8005390 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005336:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	60fb      	str	r3, [r7, #12]
   return(result);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	617b      	str	r3, [r7, #20]
   return(result);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e4      	bne.n	8005338 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800536e:	e009      	b.n	8005384 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	8b1b      	ldrh	r3, [r3, #24]
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0208 	orr.w	r2, r2, #8
 8005380:	b292      	uxth	r2, r2
 8005382:	831a      	strh	r2, [r3, #24]
}
 8005384:	bf00      	nop
 8005386:	37b8      	adds	r7, #184	; 0xb8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40008000 	.word	0x40008000
 8005390:	08004b09 	.word	0x08004b09

08005394 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e027      	b.n	8005436 <HAL_UARTEx_DisableFifoMode+0x66>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2224      	movs	r2, #36	; 0x24
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005414:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005456:	2302      	movs	r3, #2
 8005458:	e02d      	b.n	80054b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	; 0x24
 8005466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8a0 	bl	80055dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e02d      	b.n	8005532 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	; 0x24
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f862 	bl	80055dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b08c      	sub	sp, #48	; 0x30
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	4613      	mov	r3, r2
 8005546:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005554:	2b20      	cmp	r3, #32
 8005556:	d13b      	bne.n	80055d0 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e034      	b.n	80055d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	461a      	mov	r2, r3
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff f81c 	bl	80045b8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11d      	bne.n	80055c4 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2210      	movs	r2, #16
 800558e:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	617b      	str	r3, [r7, #20]
   return(result);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f043 0310 	orr.w	r3, r3, #16
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6a39      	ldr	r1, [r7, #32]
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e6      	bne.n	8005590 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80055c2:	e002      	b.n	80055ca <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80055ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ce:	e000      	b.n	80055d2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3730      	adds	r7, #48	; 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d108      	bne.n	80055fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055fc:	e031      	b.n	8005662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055fe:	2308      	movs	r3, #8
 8005600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005602:	2308      	movs	r3, #8
 8005604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	0e5b      	lsrs	r3, r3, #25
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	0f5b      	lsrs	r3, r3, #29
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	7b3a      	ldrb	r2, [r7, #12]
 800562a:	4911      	ldr	r1, [pc, #68]	; (8005670 <UARTEx_SetNbDataToProcess+0x94>)
 800562c:	5c8a      	ldrb	r2, [r1, r2]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005632:	7b3a      	ldrb	r2, [r7, #12]
 8005634:	490f      	ldr	r1, [pc, #60]	; (8005674 <UARTEx_SetNbDataToProcess+0x98>)
 8005636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005638:	fb93 f3f2 	sdiv	r3, r3, r2
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	7b7a      	ldrb	r2, [r7, #13]
 8005648:	4909      	ldr	r1, [pc, #36]	; (8005670 <UARTEx_SetNbDataToProcess+0x94>)
 800564a:	5c8a      	ldrb	r2, [r1, r2]
 800564c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005650:	7b7a      	ldrb	r2, [r7, #13]
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <UARTEx_SetNbDataToProcess+0x98>)
 8005654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005656:	fb93 f3f2 	sdiv	r3, r3, r2
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	080060c8 	.word	0x080060c8
 8005674:	080060d0 	.word	0x080060d0

08005678 <siprintf>:
 8005678:	b40e      	push	{r1, r2, r3}
 800567a:	b500      	push	{lr}
 800567c:	b09c      	sub	sp, #112	; 0x70
 800567e:	ab1d      	add	r3, sp, #116	; 0x74
 8005680:	9002      	str	r0, [sp, #8]
 8005682:	9006      	str	r0, [sp, #24]
 8005684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005688:	4809      	ldr	r0, [pc, #36]	; (80056b0 <siprintf+0x38>)
 800568a:	9107      	str	r1, [sp, #28]
 800568c:	9104      	str	r1, [sp, #16]
 800568e:	4909      	ldr	r1, [pc, #36]	; (80056b4 <siprintf+0x3c>)
 8005690:	f853 2b04 	ldr.w	r2, [r3], #4
 8005694:	9105      	str	r1, [sp, #20]
 8005696:	6800      	ldr	r0, [r0, #0]
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	a902      	add	r1, sp, #8
 800569c:	f000 f89a 	bl	80057d4 <_svfiprintf_r>
 80056a0:	9b02      	ldr	r3, [sp, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	b01c      	add	sp, #112	; 0x70
 80056a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ac:	b003      	add	sp, #12
 80056ae:	4770      	bx	lr
 80056b0:	20000058 	.word	0x20000058
 80056b4:	ffff0208 	.word	0xffff0208

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <__errno>:
 80056c8:	4b01      	ldr	r3, [pc, #4]	; (80056d0 <__errno+0x8>)
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000058 	.word	0x20000058

080056d4 <__libc_init_array>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4d0d      	ldr	r5, [pc, #52]	; (800570c <__libc_init_array+0x38>)
 80056d8:	4c0d      	ldr	r4, [pc, #52]	; (8005710 <__libc_init_array+0x3c>)
 80056da:	1b64      	subs	r4, r4, r5
 80056dc:	10a4      	asrs	r4, r4, #2
 80056de:	2600      	movs	r6, #0
 80056e0:	42a6      	cmp	r6, r4
 80056e2:	d109      	bne.n	80056f8 <__libc_init_array+0x24>
 80056e4:	4d0b      	ldr	r5, [pc, #44]	; (8005714 <__libc_init_array+0x40>)
 80056e6:	4c0c      	ldr	r4, [pc, #48]	; (8005718 <__libc_init_array+0x44>)
 80056e8:	f000 fc6a 	bl	8005fc0 <_init>
 80056ec:	1b64      	subs	r4, r4, r5
 80056ee:	10a4      	asrs	r4, r4, #2
 80056f0:	2600      	movs	r6, #0
 80056f2:	42a6      	cmp	r6, r4
 80056f4:	d105      	bne.n	8005702 <__libc_init_array+0x2e>
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fc:	4798      	blx	r3
 80056fe:	3601      	adds	r6, #1
 8005700:	e7ee      	b.n	80056e0 <__libc_init_array+0xc>
 8005702:	f855 3b04 	ldr.w	r3, [r5], #4
 8005706:	4798      	blx	r3
 8005708:	3601      	adds	r6, #1
 800570a:	e7f2      	b.n	80056f2 <__libc_init_array+0x1e>
 800570c:	08006114 	.word	0x08006114
 8005710:	08006114 	.word	0x08006114
 8005714:	08006114 	.word	0x08006114
 8005718:	08006118 	.word	0x08006118

0800571c <__retarget_lock_acquire_recursive>:
 800571c:	4770      	bx	lr

0800571e <__retarget_lock_release_recursive>:
 800571e:	4770      	bx	lr

08005720 <__ssputs_r>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	688e      	ldr	r6, [r1, #8]
 8005726:	461f      	mov	r7, r3
 8005728:	42be      	cmp	r6, r7
 800572a:	680b      	ldr	r3, [r1, #0]
 800572c:	4682      	mov	sl, r0
 800572e:	460c      	mov	r4, r1
 8005730:	4690      	mov	r8, r2
 8005732:	d82c      	bhi.n	800578e <__ssputs_r+0x6e>
 8005734:	898a      	ldrh	r2, [r1, #12]
 8005736:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800573a:	d026      	beq.n	800578a <__ssputs_r+0x6a>
 800573c:	6965      	ldr	r5, [r4, #20]
 800573e:	6909      	ldr	r1, [r1, #16]
 8005740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005744:	eba3 0901 	sub.w	r9, r3, r1
 8005748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800574c:	1c7b      	adds	r3, r7, #1
 800574e:	444b      	add	r3, r9
 8005750:	106d      	asrs	r5, r5, #1
 8005752:	429d      	cmp	r5, r3
 8005754:	bf38      	it	cc
 8005756:	461d      	movcc	r5, r3
 8005758:	0553      	lsls	r3, r2, #21
 800575a:	d527      	bpl.n	80057ac <__ssputs_r+0x8c>
 800575c:	4629      	mov	r1, r5
 800575e:	f000 f957 	bl	8005a10 <_malloc_r>
 8005762:	4606      	mov	r6, r0
 8005764:	b360      	cbz	r0, 80057c0 <__ssputs_r+0xa0>
 8005766:	6921      	ldr	r1, [r4, #16]
 8005768:	464a      	mov	r2, r9
 800576a:	f000 fbc7 	bl	8005efc <memcpy>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	6126      	str	r6, [r4, #16]
 800577c:	6165      	str	r5, [r4, #20]
 800577e:	444e      	add	r6, r9
 8005780:	eba5 0509 	sub.w	r5, r5, r9
 8005784:	6026      	str	r6, [r4, #0]
 8005786:	60a5      	str	r5, [r4, #8]
 8005788:	463e      	mov	r6, r7
 800578a:	42be      	cmp	r6, r7
 800578c:	d900      	bls.n	8005790 <__ssputs_r+0x70>
 800578e:	463e      	mov	r6, r7
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	4632      	mov	r2, r6
 8005794:	4641      	mov	r1, r8
 8005796:	f000 fb86 	bl	8005ea6 <memmove>
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	1b9b      	subs	r3, r3, r6
 800579e:	60a3      	str	r3, [r4, #8]
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	4433      	add	r3, r6
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	2000      	movs	r0, #0
 80057a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ac:	462a      	mov	r2, r5
 80057ae:	f000 fb4b 	bl	8005e48 <_realloc_r>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e0      	bne.n	800577a <__ssputs_r+0x5a>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f000 fbac 	bl	8005f18 <_free_r>
 80057c0:	230c      	movs	r3, #12
 80057c2:	f8ca 3000 	str.w	r3, [sl]
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d2:	e7e9      	b.n	80057a8 <__ssputs_r+0x88>

080057d4 <_svfiprintf_r>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	4698      	mov	r8, r3
 80057da:	898b      	ldrh	r3, [r1, #12]
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	b09d      	sub	sp, #116	; 0x74
 80057e0:	4607      	mov	r7, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	4614      	mov	r4, r2
 80057e6:	d50e      	bpl.n	8005806 <_svfiprintf_r+0x32>
 80057e8:	690b      	ldr	r3, [r1, #16]
 80057ea:	b963      	cbnz	r3, 8005806 <_svfiprintf_r+0x32>
 80057ec:	2140      	movs	r1, #64	; 0x40
 80057ee:	f000 f90f 	bl	8005a10 <_malloc_r>
 80057f2:	6028      	str	r0, [r5, #0]
 80057f4:	6128      	str	r0, [r5, #16]
 80057f6:	b920      	cbnz	r0, 8005802 <_svfiprintf_r+0x2e>
 80057f8:	230c      	movs	r3, #12
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005800:	e0d0      	b.n	80059a4 <_svfiprintf_r+0x1d0>
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	616b      	str	r3, [r5, #20]
 8005806:	2300      	movs	r3, #0
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	2320      	movs	r3, #32
 800580c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005810:	f8cd 800c 	str.w	r8, [sp, #12]
 8005814:	2330      	movs	r3, #48	; 0x30
 8005816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059bc <_svfiprintf_r+0x1e8>
 800581a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800581e:	f04f 0901 	mov.w	r9, #1
 8005822:	4623      	mov	r3, r4
 8005824:	469a      	mov	sl, r3
 8005826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582a:	b10a      	cbz	r2, 8005830 <_svfiprintf_r+0x5c>
 800582c:	2a25      	cmp	r2, #37	; 0x25
 800582e:	d1f9      	bne.n	8005824 <_svfiprintf_r+0x50>
 8005830:	ebba 0b04 	subs.w	fp, sl, r4
 8005834:	d00b      	beq.n	800584e <_svfiprintf_r+0x7a>
 8005836:	465b      	mov	r3, fp
 8005838:	4622      	mov	r2, r4
 800583a:	4629      	mov	r1, r5
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff ff6f 	bl	8005720 <__ssputs_r>
 8005842:	3001      	adds	r0, #1
 8005844:	f000 80a9 	beq.w	800599a <_svfiprintf_r+0x1c6>
 8005848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584a:	445a      	add	r2, fp
 800584c:	9209      	str	r2, [sp, #36]	; 0x24
 800584e:	f89a 3000 	ldrb.w	r3, [sl]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80a1 	beq.w	800599a <_svfiprintf_r+0x1c6>
 8005858:	2300      	movs	r3, #0
 800585a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800585e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005862:	f10a 0a01 	add.w	sl, sl, #1
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800586e:	931a      	str	r3, [sp, #104]	; 0x68
 8005870:	4654      	mov	r4, sl
 8005872:	2205      	movs	r2, #5
 8005874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005878:	4850      	ldr	r0, [pc, #320]	; (80059bc <_svfiprintf_r+0x1e8>)
 800587a:	f7fa fcc9 	bl	8000210 <memchr>
 800587e:	9a04      	ldr	r2, [sp, #16]
 8005880:	b9d8      	cbnz	r0, 80058ba <_svfiprintf_r+0xe6>
 8005882:	06d0      	lsls	r0, r2, #27
 8005884:	bf44      	itt	mi
 8005886:	2320      	movmi	r3, #32
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	0711      	lsls	r1, r2, #28
 800588e:	bf44      	itt	mi
 8005890:	232b      	movmi	r3, #43	; 0x2b
 8005892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005896:	f89a 3000 	ldrb.w	r3, [sl]
 800589a:	2b2a      	cmp	r3, #42	; 0x2a
 800589c:	d015      	beq.n	80058ca <_svfiprintf_r+0xf6>
 800589e:	9a07      	ldr	r2, [sp, #28]
 80058a0:	4654      	mov	r4, sl
 80058a2:	2000      	movs	r0, #0
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4621      	mov	r1, r4
 80058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d94d      	bls.n	8005950 <_svfiprintf_r+0x17c>
 80058b4:	b1b0      	cbz	r0, 80058e4 <_svfiprintf_r+0x110>
 80058b6:	9207      	str	r2, [sp, #28]
 80058b8:	e014      	b.n	80058e4 <_svfiprintf_r+0x110>
 80058ba:	eba0 0308 	sub.w	r3, r0, r8
 80058be:	fa09 f303 	lsl.w	r3, r9, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	46a2      	mov	sl, r4
 80058c8:	e7d2      	b.n	8005870 <_svfiprintf_r+0x9c>
 80058ca:	9b03      	ldr	r3, [sp, #12]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	9103      	str	r1, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbb      	ittet	lt
 80058d6:	425b      	neglt	r3, r3
 80058d8:	f042 0202 	orrlt.w	r2, r2, #2
 80058dc:	9307      	strge	r3, [sp, #28]
 80058de:	9307      	strlt	r3, [sp, #28]
 80058e0:	bfb8      	it	lt
 80058e2:	9204      	strlt	r2, [sp, #16]
 80058e4:	7823      	ldrb	r3, [r4, #0]
 80058e6:	2b2e      	cmp	r3, #46	; 0x2e
 80058e8:	d10c      	bne.n	8005904 <_svfiprintf_r+0x130>
 80058ea:	7863      	ldrb	r3, [r4, #1]
 80058ec:	2b2a      	cmp	r3, #42	; 0x2a
 80058ee:	d134      	bne.n	800595a <_svfiprintf_r+0x186>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	9203      	str	r2, [sp, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfb8      	it	lt
 80058fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005900:	3402      	adds	r4, #2
 8005902:	9305      	str	r3, [sp, #20]
 8005904:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059cc <_svfiprintf_r+0x1f8>
 8005908:	7821      	ldrb	r1, [r4, #0]
 800590a:	2203      	movs	r2, #3
 800590c:	4650      	mov	r0, sl
 800590e:	f7fa fc7f 	bl	8000210 <memchr>
 8005912:	b138      	cbz	r0, 8005924 <_svfiprintf_r+0x150>
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	eba0 000a 	sub.w	r0, r0, sl
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	4082      	lsls	r2, r0
 800591e:	4313      	orrs	r3, r2
 8005920:	3401      	adds	r4, #1
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005928:	4825      	ldr	r0, [pc, #148]	; (80059c0 <_svfiprintf_r+0x1ec>)
 800592a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800592e:	2206      	movs	r2, #6
 8005930:	f7fa fc6e 	bl	8000210 <memchr>
 8005934:	2800      	cmp	r0, #0
 8005936:	d038      	beq.n	80059aa <_svfiprintf_r+0x1d6>
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <_svfiprintf_r+0x1f0>)
 800593a:	bb1b      	cbnz	r3, 8005984 <_svfiprintf_r+0x1b0>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	3307      	adds	r3, #7
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	3308      	adds	r3, #8
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594a:	4433      	add	r3, r6
 800594c:	9309      	str	r3, [sp, #36]	; 0x24
 800594e:	e768      	b.n	8005822 <_svfiprintf_r+0x4e>
 8005950:	fb0c 3202 	mla	r2, ip, r2, r3
 8005954:	460c      	mov	r4, r1
 8005956:	2001      	movs	r0, #1
 8005958:	e7a6      	b.n	80058a8 <_svfiprintf_r+0xd4>
 800595a:	2300      	movs	r3, #0
 800595c:	3401      	adds	r4, #1
 800595e:	9305      	str	r3, [sp, #20]
 8005960:	4619      	mov	r1, r3
 8005962:	f04f 0c0a 	mov.w	ip, #10
 8005966:	4620      	mov	r0, r4
 8005968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800596c:	3a30      	subs	r2, #48	; 0x30
 800596e:	2a09      	cmp	r2, #9
 8005970:	d903      	bls.n	800597a <_svfiprintf_r+0x1a6>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0c6      	beq.n	8005904 <_svfiprintf_r+0x130>
 8005976:	9105      	str	r1, [sp, #20]
 8005978:	e7c4      	b.n	8005904 <_svfiprintf_r+0x130>
 800597a:	fb0c 2101 	mla	r1, ip, r1, r2
 800597e:	4604      	mov	r4, r0
 8005980:	2301      	movs	r3, #1
 8005982:	e7f0      	b.n	8005966 <_svfiprintf_r+0x192>
 8005984:	ab03      	add	r3, sp, #12
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	462a      	mov	r2, r5
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <_svfiprintf_r+0x1f4>)
 800598c:	a904      	add	r1, sp, #16
 800598e:	4638      	mov	r0, r7
 8005990:	f3af 8000 	nop.w
 8005994:	1c42      	adds	r2, r0, #1
 8005996:	4606      	mov	r6, r0
 8005998:	d1d6      	bne.n	8005948 <_svfiprintf_r+0x174>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	065b      	lsls	r3, r3, #25
 800599e:	f53f af2d 	bmi.w	80057fc <_svfiprintf_r+0x28>
 80059a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a4:	b01d      	add	sp, #116	; 0x74
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_svfiprintf_r+0x1f4>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	4638      	mov	r0, r7
 80059b6:	f000 f919 	bl	8005bec <_printf_i>
 80059ba:	e7eb      	b.n	8005994 <_svfiprintf_r+0x1c0>
 80059bc:	080060d8 	.word	0x080060d8
 80059c0:	080060e2 	.word	0x080060e2
 80059c4:	00000000 	.word	0x00000000
 80059c8:	08005721 	.word	0x08005721
 80059cc:	080060de 	.word	0x080060de

080059d0 <sbrk_aligned>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4e0e      	ldr	r6, [pc, #56]	; (8005a0c <sbrk_aligned+0x3c>)
 80059d4:	460c      	mov	r4, r1
 80059d6:	6831      	ldr	r1, [r6, #0]
 80059d8:	4605      	mov	r5, r0
 80059da:	b911      	cbnz	r1, 80059e2 <sbrk_aligned+0x12>
 80059dc:	f000 fa7e 	bl	8005edc <_sbrk_r>
 80059e0:	6030      	str	r0, [r6, #0]
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 fa79 	bl	8005edc <_sbrk_r>
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d00a      	beq.n	8005a04 <sbrk_aligned+0x34>
 80059ee:	1cc4      	adds	r4, r0, #3
 80059f0:	f024 0403 	bic.w	r4, r4, #3
 80059f4:	42a0      	cmp	r0, r4
 80059f6:	d007      	beq.n	8005a08 <sbrk_aligned+0x38>
 80059f8:	1a21      	subs	r1, r4, r0
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fa6e 	bl	8005edc <_sbrk_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d101      	bne.n	8005a08 <sbrk_aligned+0x38>
 8005a04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a08:	4620      	mov	r0, r4
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	2000034c 	.word	0x2000034c

08005a10 <_malloc_r>:
 8005a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a14:	1ccd      	adds	r5, r1, #3
 8005a16:	f025 0503 	bic.w	r5, r5, #3
 8005a1a:	3508      	adds	r5, #8
 8005a1c:	2d0c      	cmp	r5, #12
 8005a1e:	bf38      	it	cc
 8005a20:	250c      	movcc	r5, #12
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	4607      	mov	r7, r0
 8005a26:	db01      	blt.n	8005a2c <_malloc_r+0x1c>
 8005a28:	42a9      	cmp	r1, r5
 8005a2a:	d905      	bls.n	8005a38 <_malloc_r+0x28>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	2600      	movs	r6, #0
 8005a32:	4630      	mov	r0, r6
 8005a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b0c <_malloc_r+0xfc>
 8005a3c:	f000 f9f8 	bl	8005e30 <__malloc_lock>
 8005a40:	f8d8 3000 	ldr.w	r3, [r8]
 8005a44:	461c      	mov	r4, r3
 8005a46:	bb5c      	cbnz	r4, 8005aa0 <_malloc_r+0x90>
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f7ff ffc0 	bl	80059d0 <sbrk_aligned>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	4604      	mov	r4, r0
 8005a54:	d155      	bne.n	8005b02 <_malloc_r+0xf2>
 8005a56:	f8d8 4000 	ldr.w	r4, [r8]
 8005a5a:	4626      	mov	r6, r4
 8005a5c:	2e00      	cmp	r6, #0
 8005a5e:	d145      	bne.n	8005aec <_malloc_r+0xdc>
 8005a60:	2c00      	cmp	r4, #0
 8005a62:	d048      	beq.n	8005af6 <_malloc_r+0xe6>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	4631      	mov	r1, r6
 8005a68:	4638      	mov	r0, r7
 8005a6a:	eb04 0903 	add.w	r9, r4, r3
 8005a6e:	f000 fa35 	bl	8005edc <_sbrk_r>
 8005a72:	4581      	cmp	r9, r0
 8005a74:	d13f      	bne.n	8005af6 <_malloc_r+0xe6>
 8005a76:	6821      	ldr	r1, [r4, #0]
 8005a78:	1a6d      	subs	r5, r5, r1
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff ffa7 	bl	80059d0 <sbrk_aligned>
 8005a82:	3001      	adds	r0, #1
 8005a84:	d037      	beq.n	8005af6 <_malloc_r+0xe6>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	442b      	add	r3, r5
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d038      	beq.n	8005b06 <_malloc_r+0xf6>
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	42a2      	cmp	r2, r4
 8005a98:	d12b      	bne.n	8005af2 <_malloc_r+0xe2>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	e00f      	b.n	8005ac0 <_malloc_r+0xb0>
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	1b52      	subs	r2, r2, r5
 8005aa4:	d41f      	bmi.n	8005ae6 <_malloc_r+0xd6>
 8005aa6:	2a0b      	cmp	r2, #11
 8005aa8:	d917      	bls.n	8005ada <_malloc_r+0xca>
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	6025      	str	r5, [r4, #0]
 8005ab0:	bf18      	it	ne
 8005ab2:	6059      	strne	r1, [r3, #4]
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	bf08      	it	eq
 8005ab8:	f8c8 1000 	streq.w	r1, [r8]
 8005abc:	5162      	str	r2, [r4, r5]
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f104 060b 	add.w	r6, r4, #11
 8005ac6:	f000 f9b9 	bl	8005e3c <__malloc_unlock>
 8005aca:	f026 0607 	bic.w	r6, r6, #7
 8005ace:	1d23      	adds	r3, r4, #4
 8005ad0:	1af2      	subs	r2, r6, r3
 8005ad2:	d0ae      	beq.n	8005a32 <_malloc_r+0x22>
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	50a3      	str	r3, [r4, r2]
 8005ad8:	e7ab      	b.n	8005a32 <_malloc_r+0x22>
 8005ada:	42a3      	cmp	r3, r4
 8005adc:	6862      	ldr	r2, [r4, #4]
 8005ade:	d1dd      	bne.n	8005a9c <_malloc_r+0x8c>
 8005ae0:	f8c8 2000 	str.w	r2, [r8]
 8005ae4:	e7ec      	b.n	8005ac0 <_malloc_r+0xb0>
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	6864      	ldr	r4, [r4, #4]
 8005aea:	e7ac      	b.n	8005a46 <_malloc_r+0x36>
 8005aec:	4634      	mov	r4, r6
 8005aee:	6876      	ldr	r6, [r6, #4]
 8005af0:	e7b4      	b.n	8005a5c <_malloc_r+0x4c>
 8005af2:	4613      	mov	r3, r2
 8005af4:	e7cc      	b.n	8005a90 <_malloc_r+0x80>
 8005af6:	230c      	movs	r3, #12
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 f99e 	bl	8005e3c <__malloc_unlock>
 8005b00:	e797      	b.n	8005a32 <_malloc_r+0x22>
 8005b02:	6025      	str	r5, [r4, #0]
 8005b04:	e7dc      	b.n	8005ac0 <_malloc_r+0xb0>
 8005b06:	605b      	str	r3, [r3, #4]
 8005b08:	deff      	udf	#255	; 0xff
 8005b0a:	bf00      	nop
 8005b0c:	20000348 	.word	0x20000348

08005b10 <_printf_common>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	4616      	mov	r6, r2
 8005b16:	4699      	mov	r9, r3
 8005b18:	688a      	ldr	r2, [r1, #8]
 8005b1a:	690b      	ldr	r3, [r1, #16]
 8005b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	bfb8      	it	lt
 8005b24:	4613      	movlt	r3, r2
 8005b26:	6033      	str	r3, [r6, #0]
 8005b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b10a      	cbz	r2, 8005b36 <_printf_common+0x26>
 8005b32:	3301      	adds	r3, #1
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	0699      	lsls	r1, r3, #26
 8005b3a:	bf42      	ittt	mi
 8005b3c:	6833      	ldrmi	r3, [r6, #0]
 8005b3e:	3302      	addmi	r3, #2
 8005b40:	6033      	strmi	r3, [r6, #0]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	f015 0506 	ands.w	r5, r5, #6
 8005b48:	d106      	bne.n	8005b58 <_printf_common+0x48>
 8005b4a:	f104 0a19 	add.w	sl, r4, #25
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	6832      	ldr	r2, [r6, #0]
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	dc26      	bgt.n	8005ba6 <_printf_common+0x96>
 8005b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b5c:	1e13      	subs	r3, r2, #0
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	bf18      	it	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	0692      	lsls	r2, r2, #26
 8005b66:	d42b      	bmi.n	8005bc0 <_printf_common+0xb0>
 8005b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4638      	mov	r0, r7
 8005b70:	47c0      	blx	r8
 8005b72:	3001      	adds	r0, #1
 8005b74:	d01e      	beq.n	8005bb4 <_printf_common+0xa4>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	6922      	ldr	r2, [r4, #16]
 8005b7a:	f003 0306 	and.w	r3, r3, #6
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf02      	ittt	eq
 8005b82:	68e5      	ldreq	r5, [r4, #12]
 8005b84:	6833      	ldreq	r3, [r6, #0]
 8005b86:	1aed      	subeq	r5, r5, r3
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	bf0c      	ite	eq
 8005b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b90:	2500      	movne	r5, #0
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bfc4      	itt	gt
 8005b96:	1a9b      	subgt	r3, r3, r2
 8005b98:	18ed      	addgt	r5, r5, r3
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	341a      	adds	r4, #26
 8005b9e:	42b5      	cmp	r5, r6
 8005ba0:	d11a      	bne.n	8005bd8 <_printf_common+0xc8>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e008      	b.n	8005bb8 <_printf_common+0xa8>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4652      	mov	r2, sl
 8005baa:	4649      	mov	r1, r9
 8005bac:	4638      	mov	r0, r7
 8005bae:	47c0      	blx	r8
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d103      	bne.n	8005bbc <_printf_common+0xac>
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	e7c6      	b.n	8005b4e <_printf_common+0x3e>
 8005bc0:	18e1      	adds	r1, r4, r3
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	2030      	movs	r0, #48	; 0x30
 8005bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bca:	4422      	add	r2, r4
 8005bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	e7c7      	b.n	8005b68 <_printf_common+0x58>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0e6      	beq.n	8005bb4 <_printf_common+0xa4>
 8005be6:	3601      	adds	r6, #1
 8005be8:	e7d9      	b.n	8005b9e <_printf_common+0x8e>
	...

08005bec <_printf_i>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	7e0f      	ldrb	r7, [r1, #24]
 8005bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bf4:	2f78      	cmp	r7, #120	; 0x78
 8005bf6:	4691      	mov	r9, r2
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c02:	d807      	bhi.n	8005c14 <_printf_i+0x28>
 8005c04:	2f62      	cmp	r7, #98	; 0x62
 8005c06:	d80a      	bhi.n	8005c1e <_printf_i+0x32>
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	f000 80d4 	beq.w	8005db6 <_printf_i+0x1ca>
 8005c0e:	2f58      	cmp	r7, #88	; 0x58
 8005c10:	f000 80c0 	beq.w	8005d94 <_printf_i+0x1a8>
 8005c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c1c:	e03a      	b.n	8005c94 <_printf_i+0xa8>
 8005c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c22:	2b15      	cmp	r3, #21
 8005c24:	d8f6      	bhi.n	8005c14 <_printf_i+0x28>
 8005c26:	a101      	add	r1, pc, #4	; (adr r1, 8005c2c <_printf_i+0x40>)
 8005c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c2c:	08005c85 	.word	0x08005c85
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005c15 	.word	0x08005c15
 8005c38:	08005c15 	.word	0x08005c15
 8005c3c:	08005c15 	.word	0x08005c15
 8005c40:	08005c15 	.word	0x08005c15
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005c15 	.word	0x08005c15
 8005c4c:	08005c15 	.word	0x08005c15
 8005c50:	08005c15 	.word	0x08005c15
 8005c54:	08005c15 	.word	0x08005c15
 8005c58:	08005d9d 	.word	0x08005d9d
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005d57 	.word	0x08005d57
 8005c64:	08005c15 	.word	0x08005c15
 8005c68:	08005c15 	.word	0x08005c15
 8005c6c:	08005dbf 	.word	0x08005dbf
 8005c70:	08005c15 	.word	0x08005c15
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005c15 	.word	0x08005c15
 8005c7c:	08005c15 	.word	0x08005c15
 8005c80:	08005d5f 	.word	0x08005d5f
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	602a      	str	r2, [r5, #0]
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c94:	2301      	movs	r3, #1
 8005c96:	e09f      	b.n	8005dd8 <_printf_i+0x1ec>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	0607      	lsls	r7, r0, #24
 8005c9e:	f103 0104 	add.w	r1, r3, #4
 8005ca2:	6029      	str	r1, [r5, #0]
 8005ca4:	d501      	bpl.n	8005caa <_printf_i+0xbe>
 8005ca6:	681e      	ldr	r6, [r3, #0]
 8005ca8:	e003      	b.n	8005cb2 <_printf_i+0xc6>
 8005caa:	0646      	lsls	r6, r0, #25
 8005cac:	d5fb      	bpl.n	8005ca6 <_printf_i+0xba>
 8005cae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	da03      	bge.n	8005cbe <_printf_i+0xd2>
 8005cb6:	232d      	movs	r3, #45	; 0x2d
 8005cb8:	4276      	negs	r6, r6
 8005cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbe:	485a      	ldr	r0, [pc, #360]	; (8005e28 <_printf_i+0x23c>)
 8005cc0:	230a      	movs	r3, #10
 8005cc2:	e012      	b.n	8005cea <_printf_i+0xfe>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	1d19      	adds	r1, r3, #4
 8005cca:	6029      	str	r1, [r5, #0]
 8005ccc:	0605      	lsls	r5, r0, #24
 8005cce:	d501      	bpl.n	8005cd4 <_printf_i+0xe8>
 8005cd0:	681e      	ldr	r6, [r3, #0]
 8005cd2:	e002      	b.n	8005cda <_printf_i+0xee>
 8005cd4:	0641      	lsls	r1, r0, #25
 8005cd6:	d5fb      	bpl.n	8005cd0 <_printf_i+0xe4>
 8005cd8:	881e      	ldrh	r6, [r3, #0]
 8005cda:	4853      	ldr	r0, [pc, #332]	; (8005e28 <_printf_i+0x23c>)
 8005cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cde:	bf0c      	ite	eq
 8005ce0:	2308      	moveq	r3, #8
 8005ce2:	230a      	movne	r3, #10
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cea:	6865      	ldr	r5, [r4, #4]
 8005cec:	60a5      	str	r5, [r4, #8]
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	bfa2      	ittt	ge
 8005cf2:	6821      	ldrge	r1, [r4, #0]
 8005cf4:	f021 0104 	bicge.w	r1, r1, #4
 8005cf8:	6021      	strge	r1, [r4, #0]
 8005cfa:	b90e      	cbnz	r6, 8005d00 <_printf_i+0x114>
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	d04b      	beq.n	8005d98 <_printf_i+0x1ac>
 8005d00:	4615      	mov	r5, r2
 8005d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d06:	fb03 6711 	mls	r7, r3, r1, r6
 8005d0a:	5dc7      	ldrb	r7, [r0, r7]
 8005d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d10:	4637      	mov	r7, r6
 8005d12:	42bb      	cmp	r3, r7
 8005d14:	460e      	mov	r6, r1
 8005d16:	d9f4      	bls.n	8005d02 <_printf_i+0x116>
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d10b      	bne.n	8005d34 <_printf_i+0x148>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	07de      	lsls	r6, r3, #31
 8005d20:	d508      	bpl.n	8005d34 <_printf_i+0x148>
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	6861      	ldr	r1, [r4, #4]
 8005d26:	4299      	cmp	r1, r3
 8005d28:	bfde      	ittt	le
 8005d2a:	2330      	movle	r3, #48	; 0x30
 8005d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d34:	1b52      	subs	r2, r2, r5
 8005d36:	6122      	str	r2, [r4, #16]
 8005d38:	f8cd a000 	str.w	sl, [sp]
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	aa03      	add	r2, sp, #12
 8005d40:	4621      	mov	r1, r4
 8005d42:	4640      	mov	r0, r8
 8005d44:	f7ff fee4 	bl	8005b10 <_printf_common>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d14a      	bne.n	8005de2 <_printf_i+0x1f6>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d50:	b004      	add	sp, #16
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f043 0320 	orr.w	r3, r3, #32
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	4833      	ldr	r0, [pc, #204]	; (8005e2c <_printf_i+0x240>)
 8005d60:	2778      	movs	r7, #120	; 0x78
 8005d62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	061f      	lsls	r7, r3, #24
 8005d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d70:	d402      	bmi.n	8005d78 <_printf_i+0x18c>
 8005d72:	065f      	lsls	r7, r3, #25
 8005d74:	bf48      	it	mi
 8005d76:	b2b6      	uxthmi	r6, r6
 8005d78:	07df      	lsls	r7, r3, #31
 8005d7a:	bf48      	it	mi
 8005d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d80:	6029      	str	r1, [r5, #0]
 8005d82:	bf48      	it	mi
 8005d84:	6023      	strmi	r3, [r4, #0]
 8005d86:	b91e      	cbnz	r6, 8005d90 <_printf_i+0x1a4>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	2310      	movs	r3, #16
 8005d92:	e7a7      	b.n	8005ce4 <_printf_i+0xf8>
 8005d94:	4824      	ldr	r0, [pc, #144]	; (8005e28 <_printf_i+0x23c>)
 8005d96:	e7e4      	b.n	8005d62 <_printf_i+0x176>
 8005d98:	4615      	mov	r5, r2
 8005d9a:	e7bd      	b.n	8005d18 <_printf_i+0x12c>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6826      	ldr	r6, [r4, #0]
 8005da0:	6961      	ldr	r1, [r4, #20]
 8005da2:	1d18      	adds	r0, r3, #4
 8005da4:	6028      	str	r0, [r5, #0]
 8005da6:	0635      	lsls	r5, r6, #24
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	d501      	bpl.n	8005db0 <_printf_i+0x1c4>
 8005dac:	6019      	str	r1, [r3, #0]
 8005dae:	e002      	b.n	8005db6 <_printf_i+0x1ca>
 8005db0:	0670      	lsls	r0, r6, #25
 8005db2:	d5fb      	bpl.n	8005dac <_printf_i+0x1c0>
 8005db4:	8019      	strh	r1, [r3, #0]
 8005db6:	2300      	movs	r3, #0
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	4615      	mov	r5, r2
 8005dbc:	e7bc      	b.n	8005d38 <_printf_i+0x14c>
 8005dbe:	682b      	ldr	r3, [r5, #0]
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	602a      	str	r2, [r5, #0]
 8005dc4:	681d      	ldr	r5, [r3, #0]
 8005dc6:	6862      	ldr	r2, [r4, #4]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f7fa fa20 	bl	8000210 <memchr>
 8005dd0:	b108      	cbz	r0, 8005dd6 <_printf_i+0x1ea>
 8005dd2:	1b40      	subs	r0, r0, r5
 8005dd4:	6060      	str	r0, [r4, #4]
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de0:	e7aa      	b.n	8005d38 <_printf_i+0x14c>
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	462a      	mov	r2, r5
 8005de6:	4649      	mov	r1, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	47d0      	blx	sl
 8005dec:	3001      	adds	r0, #1
 8005dee:	d0ad      	beq.n	8005d4c <_printf_i+0x160>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	079b      	lsls	r3, r3, #30
 8005df4:	d413      	bmi.n	8005e1e <_printf_i+0x232>
 8005df6:	68e0      	ldr	r0, [r4, #12]
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	bfb8      	it	lt
 8005dfe:	4618      	movlt	r0, r3
 8005e00:	e7a6      	b.n	8005d50 <_printf_i+0x164>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4632      	mov	r2, r6
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	47d0      	blx	sl
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d09d      	beq.n	8005d4c <_printf_i+0x160>
 8005e10:	3501      	adds	r5, #1
 8005e12:	68e3      	ldr	r3, [r4, #12]
 8005e14:	9903      	ldr	r1, [sp, #12]
 8005e16:	1a5b      	subs	r3, r3, r1
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	dcf2      	bgt.n	8005e02 <_printf_i+0x216>
 8005e1c:	e7eb      	b.n	8005df6 <_printf_i+0x20a>
 8005e1e:	2500      	movs	r5, #0
 8005e20:	f104 0619 	add.w	r6, r4, #25
 8005e24:	e7f5      	b.n	8005e12 <_printf_i+0x226>
 8005e26:	bf00      	nop
 8005e28:	080060e9 	.word	0x080060e9
 8005e2c:	080060fa 	.word	0x080060fa

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_lock+0x8>)
 8005e32:	f7ff bc73 	b.w	800571c <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	20000344 	.word	0x20000344

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f7ff bc6e 	b.w	800571e <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	20000344 	.word	0x20000344

08005e48 <_realloc_r>:
 8005e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4614      	mov	r4, r2
 8005e50:	460e      	mov	r6, r1
 8005e52:	b921      	cbnz	r1, 8005e5e <_realloc_r+0x16>
 8005e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	4611      	mov	r1, r2
 8005e5a:	f7ff bdd9 	b.w	8005a10 <_malloc_r>
 8005e5e:	b92a      	cbnz	r2, 8005e6c <_realloc_r+0x24>
 8005e60:	f000 f85a 	bl	8005f18 <_free_r>
 8005e64:	4625      	mov	r5, r4
 8005e66:	4628      	mov	r0, r5
 8005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e6c:	f000 f8a0 	bl	8005fb0 <_malloc_usable_size_r>
 8005e70:	4284      	cmp	r4, r0
 8005e72:	4607      	mov	r7, r0
 8005e74:	d802      	bhi.n	8005e7c <_realloc_r+0x34>
 8005e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e7a:	d812      	bhi.n	8005ea2 <_realloc_r+0x5a>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f7ff fdc6 	bl	8005a10 <_malloc_r>
 8005e84:	4605      	mov	r5, r0
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d0ed      	beq.n	8005e66 <_realloc_r+0x1e>
 8005e8a:	42bc      	cmp	r4, r7
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4631      	mov	r1, r6
 8005e90:	bf28      	it	cs
 8005e92:	463a      	movcs	r2, r7
 8005e94:	f000 f832 	bl	8005efc <memcpy>
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f000 f83c 	bl	8005f18 <_free_r>
 8005ea0:	e7e1      	b.n	8005e66 <_realloc_r+0x1e>
 8005ea2:	4635      	mov	r5, r6
 8005ea4:	e7df      	b.n	8005e66 <_realloc_r+0x1e>

08005ea6 <memmove>:
 8005ea6:	4288      	cmp	r0, r1
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	eb01 0402 	add.w	r4, r1, r2
 8005eae:	d902      	bls.n	8005eb6 <memmove+0x10>
 8005eb0:	4284      	cmp	r4, r0
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	d807      	bhi.n	8005ec6 <memmove+0x20>
 8005eb6:	1e43      	subs	r3, r0, #1
 8005eb8:	42a1      	cmp	r1, r4
 8005eba:	d008      	beq.n	8005ece <memmove+0x28>
 8005ebc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ec0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ec4:	e7f8      	b.n	8005eb8 <memmove+0x12>
 8005ec6:	4402      	add	r2, r0
 8005ec8:	4601      	mov	r1, r0
 8005eca:	428a      	cmp	r2, r1
 8005ecc:	d100      	bne.n	8005ed0 <memmove+0x2a>
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ed4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ed8:	e7f7      	b.n	8005eca <memmove+0x24>
	...

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_sbrk_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fb f902 	bl	80010f0 <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20000350 	.word	0x20000350

08005efc <memcpy>:
 8005efc:	440a      	add	r2, r1
 8005efe:	4291      	cmp	r1, r2
 8005f00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f04:	d100      	bne.n	8005f08 <memcpy+0xc>
 8005f06:	4770      	bx	lr
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f12:	4291      	cmp	r1, r2
 8005f14:	d1f9      	bne.n	8005f0a <memcpy+0xe>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <_free_r>:
 8005f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d044      	beq.n	8005fa8 <_free_r+0x90>
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f22:	9001      	str	r0, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f1a1 0404 	sub.w	r4, r1, #4
 8005f2a:	bfb8      	it	lt
 8005f2c:	18e4      	addlt	r4, r4, r3
 8005f2e:	f7ff ff7f 	bl	8005e30 <__malloc_lock>
 8005f32:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <_free_r+0x94>)
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x30>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	b003      	add	sp, #12
 8005f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f44:	f7ff bf7a 	b.w	8005e3c <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x46>
 8005f4c:	6825      	ldr	r5, [r4, #0]
 8005f4e:	1961      	adds	r1, r4, r5
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x22>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x50>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x46>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x70>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x26>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	440c      	add	r4, r1
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x26>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x78>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x26>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x26>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	20000348 	.word	0x20000348

08005fb0 <_malloc_usable_size_r>:
 8005fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb4:	1f18      	subs	r0, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfbc      	itt	lt
 8005fba:	580b      	ldrlt	r3, [r1, r0]
 8005fbc:	18c0      	addlt	r0, r0, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
