
eecs373-xbee-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800455c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800455c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd31  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dad  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000816  00000000  00000000  000305e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286b8  00000000  00000000  00030df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cff0  00000000  00000000  000594ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f96a4  00000000  00000000  0006649e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a68  00000000  00000000  0015fb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001625ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080044ac 	.word	0x080044ac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080044ac 	.word	0x080044ac

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <xbee_send_two_bytes>:
	uint8_t frame_id;
	uint16_t dest_addr;
	uint8_t options;
} xbee_frame_header_t;

void xbee_send_two_bytes(uint8_t *data, uint8_t *dest) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t checksum = 0xFF;
 8000502:	23ff      	movs	r3, #255	; 0xff
 8000504:	77fb      	strb	r3, [r7, #31]
	xbee_frame_header_t header = {
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <xbee_send_two_bytes+0x94>)
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	ca07      	ldmia	r2, {r0, r1, r2}
 800050e:	c303      	stmia	r3!, {r0, r1}
 8000510:	801a      	strh	r2, [r3, #0]
			.frame_type = 0x01, // 16-bit transmit request
			.frame_id = 0, // device will not emit a response frame
			.dest_addr = 0xD161, // broadcast address
			.options = 0, // no options set
	};
	checksum -= (header.frame_type + dest[0] + dest[1] + data[0] + data[1]);
 8000512:	7e3a      	ldrb	r2, [r7, #24]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4413      	add	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4413      	add	r3, r2
 8000536:	b2db      	uxtb	r3, r3
 8000538:	7ffa      	ldrb	r2, [r7, #31]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[] = {header.start_delim,
 800053e:	7d3b      	ldrb	r3, [r7, #20]
 8000540:	723b      	strb	r3, [r7, #8]
 8000542:	2300      	movs	r3, #0
 8000544:	727b      	strb	r3, [r7, #9]
					 0,
					 header.length,
 8000546:	8afb      	ldrh	r3, [r7, #22]
	uint8_t buf[] = {header.start_delim,
 8000548:	b2db      	uxtb	r3, r3
 800054a:	72bb      	strb	r3, [r7, #10]
					 header.frame_type,
 800054c:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buf[] = {header.start_delim,
 800054e:	72fb      	strb	r3, [r7, #11]
					 header.frame_id,
 8000550:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buf[] = {header.start_delim,
 8000552:	733b      	strb	r3, [r7, #12]
					 dest[0], // dest_addr high bits
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000558:	737b      	strb	r3, [r7, #13]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	785b      	ldrb	r3, [r3, #1]
 800055e:	73bb      	strb	r3, [r7, #14]
					 dest[1], // dest_addr low bits
					 header.options,
 8000560:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buf[] = {header.start_delim,
 8000562:	73fb      	strb	r3, [r7, #15]
					 data[0],
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000568:	743b      	strb	r3, [r7, #16]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	747b      	strb	r3, [r7, #17]
 8000570:	7ffb      	ldrb	r3, [r7, #31]
 8000572:	74bb      	strb	r3, [r7, #18]
					 data[1],
					 checksum,
	};
	HAL_UART_Transmit(XBEE1_ADDR, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
 8000574:	f107 0108 	add.w	r1, r7, #8
 8000578:	f242 7310 	movw	r3, #10000	; 0x2710
 800057c:	220b      	movs	r2, #11
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <xbee_send_two_bytes+0x98>)
 8000580:	f002 fd1c 	bl	8002fbc <HAL_UART_Transmit>
}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	080044c4 	.word	0x080044c4
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GPIO_EXTI_Callback>:
{
  HAL_UART_Receive_IT(&huart3, rx_buf, 11);
  __NOP(); // set breakpoint here
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	// this will trigger on blue push button (PC13)
	uint8_t data[2] = {0x56, 0x78};
 800059e:	f647 0356 	movw	r3, #30806	; 0x7856
 80005a2:	81bb      	strh	r3, [r7, #12]
	uint8_t dest[2] = {0x11, 0x11};
 80005a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80005a8:	813b      	strh	r3, [r7, #8]
	xbee_send_two_bytes(data, dest);
 80005aa:	f107 0208 	add.w	r2, r7, #8
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff9f 	bl	80004f8 <xbee_send_two_bytes>
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fbfa 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f805 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f895 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f847 	bl	8000664 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x14>

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 ff34 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f000 ffe9 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 fad2 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060c:	2310      	movs	r3, #16
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f889 	bl	800173c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000630:	f000 fabe 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fc8f 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000658:	f000 faaa 	bl	8000bb0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <MX_USART3_UART_Init+0x94>)
 800066c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 8000670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006ae:	f002 fc35 	bl	8002f1c <HAL_UART_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80006b8:	f000 fa7a 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006c0:	f003 fdfd 	bl	80042be <HAL_UARTEx_SetTxFifoThreshold>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80006ca:	f000 fa71 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006d2:	f003 fe32 	bl	800433a <HAL_UARTEx_SetRxFifoThreshold>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80006dc:	f000 fa68 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_USART3_UART_Init+0x90>)
 80006e2:	f003 fdb3 	bl	800424c <HAL_UARTEx_DisableFifoMode>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 fa60 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40004800 	.word	0x40004800

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	4bb2      	ldr	r3, [pc, #712]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4ab1      	ldr	r2, [pc, #708]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4baf      	ldr	r3, [pc, #700]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4bac      	ldr	r3, [pc, #688]	; (80009dc <MX_GPIO_Init+0x2e0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4aab      	ldr	r2, [pc, #684]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4ba9      	ldr	r3, [pc, #676]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	4ba6      	ldr	r3, [pc, #664]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4aa5      	ldr	r2, [pc, #660]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4ba3      	ldr	r3, [pc, #652]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4ba0      	ldr	r3, [pc, #640]	; (80009dc <MX_GPIO_Init+0x2e0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a9f      	ldr	r2, [pc, #636]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b9d      	ldr	r3, [pc, #628]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b9a      	ldr	r3, [pc, #616]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a99      	ldr	r2, [pc, #612]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b97      	ldr	r3, [pc, #604]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b94      	ldr	r3, [pc, #592]	; (80009dc <MX_GPIO_Init+0x2e0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a93      	ldr	r2, [pc, #588]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b91      	ldr	r3, [pc, #580]	; (80009dc <MX_GPIO_Init+0x2e0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b8e      	ldr	r3, [pc, #568]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a8d      	ldr	r2, [pc, #564]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b8b      	ldr	r3, [pc, #556]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	4b88      	ldr	r3, [pc, #544]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a87      	ldr	r2, [pc, #540]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b85      	ldr	r3, [pc, #532]	; (80009dc <MX_GPIO_Init+0x2e0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007d2:	f000 ffa3 	bl	800171c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d6:	230c      	movs	r3, #12
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	487b      	ldr	r0, [pc, #492]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 80007f2:	f000 fd25 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4875      	ldr	r0, [pc, #468]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 800080e:	f000 fd17 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000812:	2307      	movs	r3, #7
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000822:	2304      	movs	r3, #4
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	486e      	ldr	r0, [pc, #440]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 800082e:	f000 fd07 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000842:	230d      	movs	r3, #13
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	4866      	ldr	r0, [pc, #408]	; (80009e8 <MX_GPIO_Init+0x2ec>)
 800084e:	f000 fcf7 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000852:	233f      	movs	r3, #63	; 0x3f
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000856:	230b      	movs	r3, #11
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	485f      	ldr	r0, [pc, #380]	; (80009e4 <MX_GPIO_Init+0x2e8>)
 8000866:	f000 fceb 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800087a:	2301      	movs	r3, #1
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fcda 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088c:	2308      	movs	r3, #8
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000890:	230b      	movs	r3, #11
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fccd 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008a6:	23f0      	movs	r3, #240	; 0xf0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b6:	2305      	movs	r3, #5
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 fcbc 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008d8:	2302      	movs	r3, #2
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4842      	ldr	r0, [pc, #264]	; (80009ec <MX_GPIO_Init+0x2f0>)
 80008e4:	f000 fcac 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008e8:	2302      	movs	r3, #2
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008ec:	230b      	movs	r3, #11
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	483c      	ldr	r0, [pc, #240]	; (80009ec <MX_GPIO_Init+0x2f0>)
 80008fc:	f000 fca0 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000900:	2344      	movs	r3, #68	; 0x44
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4836      	ldr	r0, [pc, #216]	; (80009ec <MX_GPIO_Init+0x2f0>)
 8000914:	f000 fc94 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000918:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800092a:	2301      	movs	r3, #1
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	482a      	ldr	r0, [pc, #168]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000936:	f000 fc83 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800093a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800094c:	2303      	movs	r3, #3
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x2e4>)
 8000958:	f000 fc72 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800096e:	2301      	movs	r3, #1
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x2f0>)
 800097a:	f000 fc61 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800097e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000990:	230d      	movs	r3, #13
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <MX_GPIO_Init+0x2f0>)
 800099c:	f000 fc50 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80009b2:	230e      	movs	r3, #14
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <MX_GPIO_Init+0x2f0>)
 80009be:	f000 fc3f 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
 80009d8:	e00a      	b.n	80009f0 <MX_GPIO_Init+0x2f4>
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48001000 	.word	0x48001000
 80009e4:	48000800 	.word	0x48000800
 80009e8:	48001400 	.word	0x48001400
 80009ec:	48000400 	.word	0x48000400
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4869      	ldr	r0, [pc, #420]	; (8000b9c <MX_GPIO_Init+0x4a0>)
 80009f8:	f000 fc22 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <MX_GPIO_Init+0x4a4>)
 8000a1a:	f000 fc11 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a2e:	230d      	movs	r3, #13
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	485a      	ldr	r0, [pc, #360]	; (8000ba4 <MX_GPIO_Init+0x4a8>)
 8000a3a:	f000 fc01 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4852      	ldr	r0, [pc, #328]	; (8000ba4 <MX_GPIO_Init+0x4a8>)
 8000a5a:	f000 fbf1 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a5e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a70:	230c      	movs	r3, #12
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	484a      	ldr	r0, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x4a8>)
 8000a7c:	f000 fbe0 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000a80:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a92:	230a      	movs	r3, #10
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f000 fbce 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f000 fbc0 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4830      	ldr	r0, [pc, #192]	; (8000b9c <MX_GPIO_Init+0x4a0>)
 8000adc:	f000 fbb0 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000af0:	230c      	movs	r3, #12
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4828      	ldr	r0, [pc, #160]	; (8000b9c <MX_GPIO_Init+0x4a0>)
 8000afc:	f000 fba0 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b00:	2378      	movs	r3, #120	; 0x78
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4820      	ldr	r0, [pc, #128]	; (8000b9c <MX_GPIO_Init+0x4a0>)
 8000b1c:	f000 fb90 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b20:	2338      	movs	r3, #56	; 0x38
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b30:	2306      	movs	r3, #6
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <MX_GPIO_Init+0x4ac>)
 8000b3c:	f000 fb80 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b52:	2304      	movs	r3, #4
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0x4ac>)
 8000b5e:	f000 fb6f 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b72:	2302      	movs	r3, #2
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <MX_GPIO_Init+0x4b0>)
 8000b7e:	f000 fb5f 	bl	8001240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2028      	movs	r0, #40	; 0x28
 8000b88:	f000 fa69 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8c:	2028      	movs	r0, #40	; 0x28
 8000b8e:	f000 fa82 	bl	8001096 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3738      	adds	r7, #56	; 0x38
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48001800 	.word	0x48001800
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	48001000 	.word	0x48001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_MspInit+0x44>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_MspInit+0x44>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x44>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6593      	str	r3, [r2, #88]	; 0x58
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0ae      	sub	sp, #184	; 0xb8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2294      	movs	r2, #148	; 0x94
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fc15 	bl	8004454 <memset>
  if(huart->Instance==USART3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a25      	ldr	r2, [pc, #148]	; (8000cc4 <HAL_UART_MspInit+0xc0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d143      	bne.n	8000cbc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c34:	2304      	movs	r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fc53 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c4c:	f7ff ffb0 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0xc4>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0xc8>)
 8000ca8:	f000 faca 	bl	8001240 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2027      	movs	r0, #39	; 0x27
 8000cb2:	f000 f9d4 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cb6:	2027      	movs	r0, #39	; 0x27
 8000cb8:	f000 f9ed 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	37b8      	adds	r7, #184	; 0xb8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000c00 	.word	0x48000c00

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8a4 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART3_IRQHandler+0x10>)
 8000d2a:	f002 f9d7 	bl	80030dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000028 	.word	0x20000028

08000d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d40:	f000 fc10 	bl	8001564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 fb63 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fc10 	bl	80005c2 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db0:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8000db4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db8:	200000c0 	.word	0x200000c0

08000dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_IRQHandler>

08000dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f93d 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f80e 	bl	8000df0 <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e001      	b.n	8000de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de0:	f7ff feec 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_InitTick+0x6c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d023      	beq.n	8000e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_InitTick+0x70>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f949 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10f      	bne.n	8000e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d809      	bhi.n	8000e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f000 f913 	bl	800105e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e004      	b.n	8000e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e001      	b.n	8000e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200000bc 	.word	0x200000bc

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200000bc 	.word	0x200000bc

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e040      	b.n	8001176 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 020e 	bic.w	r2, r2, #14
 8001102:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001112:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f003 021c 	and.w	r2, r3, #28
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001140:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001158:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001162:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d005      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2204      	movs	r2, #4
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e047      	b.n	8001236 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 020e 	bic.w	r2, r2, #14
 80011b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 021c 	and.w	r2, r3, #28
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001214:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
    }
  }
  return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e166      	b.n	800151e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8158 	beq.w	8001518 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x40>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80b2 	beq.w	8001518 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b61      	ldr	r3, [pc, #388]	; (800153c <HAL_GPIO_Init+0x2fc>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	4a60      	ldr	r2, [pc, #384]	; (800153c <HAL_GPIO_Init+0x2fc>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6613      	str	r3, [r2, #96]	; 0x60
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <HAL_GPIO_Init+0x2fc>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013cc:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <HAL_GPIO_Init+0x300>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013f6:	d02b      	beq.n	8001450 <HAL_GPIO_Init+0x210>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x304>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d025      	beq.n	800144c <HAL_GPIO_Init+0x20c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x308>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d01f      	beq.n	8001448 <HAL_GPIO_Init+0x208>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a50      	ldr	r2, [pc, #320]	; (800154c <HAL_GPIO_Init+0x30c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d019      	beq.n	8001444 <HAL_GPIO_Init+0x204>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x310>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x200>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <HAL_GPIO_Init+0x314>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1fc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <HAL_GPIO_Init+0x318>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1f8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_GPIO_Init+0x31c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1f4>
 8001430:	2307      	movs	r3, #7
 8001432:	e00e      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001434:	2308      	movs	r3, #8
 8001436:	e00c      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001438:	2306      	movs	r3, #6
 800143a:	e00a      	b.n	8001452 <HAL_GPIO_Init+0x212>
 800143c:	2305      	movs	r3, #5
 800143e:	e008      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001440:	2304      	movs	r3, #4
 8001442:	e006      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001444:	2303      	movs	r3, #3
 8001446:	e004      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001448:	2302      	movs	r3, #2
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0x212>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_GPIO_Init+0x212>
 8001450:	2300      	movs	r3, #0
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4093      	lsls	r3, r2
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001462:	4937      	ldr	r1, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x300>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_GPIO_Init+0x320>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001494:	4a32      	ldr	r2, [pc, #200]	; (8001560 <HAL_GPIO_Init+0x320>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x320>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <HAL_GPIO_Init+0x320>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x320>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x320>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x320>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_GPIO_Init+0x320>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f ae91 	bne.w	8001250 <HAL_GPIO_Init+0x10>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	48001800 	.word	0x48001800
 800155c:	48001c00 	.word	0x48001c00
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f806 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a4:	d102      	bne.n	80015ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015aa:	e00b      	b.n	80015c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ba:	d102      	bne.n	80015c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c0:	e000      	b.n	80015c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80015c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d141      	bne.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e2:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d131      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f0:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f6:	4a46      	ldr	r2, [pc, #280]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2232      	movs	r2, #50	; 0x32
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001626:	e002      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3b01      	subs	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d102      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001642:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164e:	d158      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e057      	b.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001664:	e04d      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166c:	d141      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d131      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	e002      	b.n	80016ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d102      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f2      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d112      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e011      	b.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016f0:	e007      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001700:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40007000 	.word	0x40007000
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172a:	6053      	str	r3, [r2, #4]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007000 	.word	0x40007000

0800173c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 bc08 	b.w	8001f60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001750:	4b96      	ldr	r3, [pc, #600]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175a:	4b94      	ldr	r3, [pc, #592]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80e4 	beq.w	800193a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_RCC_OscConfig+0x4c>
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	f040 808b 	bne.w	8001896 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 8087 	bne.w	8001896 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001788:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x64>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e3df      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_RCC_OscConfig+0x7e>
 80017b0:	4b7e      	ldr	r3, [pc, #504]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_OscConfig+0x8a>
 80017ba:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d223      	bcs.n	8001812 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fdcc 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e3c0      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a72      	ldr	r2, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	496d      	ldr	r1, [pc, #436]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	4968      	ldr	r1, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e025      	b.n	800185e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a65      	ldr	r2, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4960      	ldr	r1, [pc, #384]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	495b      	ldr	r1, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fd8c 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e380      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185e:	f000 fcc1 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4950      	ldr	r1, [pc, #320]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0x278>)
 800187c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800187e:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <HAL_RCC_OscConfig+0x27c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fab4 	bl	8000df0 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d052      	beq.n	8001938 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	e364      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d032      	beq.n	8001904 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a42      	ldr	r2, [pc, #264]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018aa:	f7ff faf1 	bl	8000e90 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b2:	f7ff faed 	bl	8000e90 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e34d      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a35      	ldr	r2, [pc, #212]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b33      	ldr	r3, [pc, #204]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4930      	ldr	r1, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	492b      	ldr	r1, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e01a      	b.n	800193a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001910:	f7ff fabe 	bl	8000e90 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001918:	f7ff faba 	bl	8000e90 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e31a      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1dc>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d073      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d005      	beq.n	8001958 <HAL_RCC_OscConfig+0x21c>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d10e      	bne.n	8001970 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d063      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d15f      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e2f7      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x24c>
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e025      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001990:	d114      	bne.n	80019bc <HAL_RCC_OscConfig+0x280>
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a02      	ldr	r2, [pc, #8]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x298>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	080044d0 	.word	0x080044d0
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b9d      	ldr	r3, [pc, #628]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9c      	ldr	r2, [pc, #624]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa58 	bl	8000e90 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fa54 	bl	8000e90 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e2b4      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2a8>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa44 	bl	8000e90 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa40 	bl	8000e90 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a0      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2d0>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d060      	beq.n	8001afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x310>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d116      	bne.n	8001a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x328>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e27d      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4973      	ldr	r1, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e040      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f9ff 	bl	8000e90 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff f9fb 	bl	8000e90 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e25b      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	495f      	ldr	r1, [pc, #380]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e018      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f9db 	bl	8000e90 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff f9d7 	bl	8000e90 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e237      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d03c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff f9b6 	bl	8000e90 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff f9b2 	bl	8000e90 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e212      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ef      	beq.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
 8001b48:	e01b      	b.n	8001b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f999 	bl	8000e90 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f995 	bl	8000e90 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1f5      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ef      	bne.n	8001b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d118      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f95c 	bl	8000e90 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff f958 	bl	8000e90 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1b8      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x508>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d8>
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c12:	e029      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d115      	bne.n	8001c48 <HAL_RCC_OscConfig+0x50c>
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x52c>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	4a9c      	ldr	r2, [pc, #624]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c58:	4b99      	ldr	r3, [pc, #612]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5e:	4a98      	ldr	r2, [pc, #608]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d016      	beq.n	8001c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f90e 	bl	8000e90 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f90a 	bl	8000e90 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e168      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	4b8c      	ldr	r3, [pc, #560]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ed      	beq.n	8001c78 <HAL_RCC_OscConfig+0x53c>
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f8f7 	bl	8000e90 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f8f3 	bl	8000e90 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e151      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cbc:	4b80      	ldr	r3, [pc, #512]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ed      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4b7b      	ldr	r3, [pc, #492]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a7a      	ldr	r2, [pc, #488]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cf0:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf6:	4a72      	ldr	r2, [pc, #456]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f8c6 	bl	8000e90 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d08:	f7ff f8c2 	bl	8000e90 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e122      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCC_OscConfig+0x5cc>
 8001d28:	e01b      	b.n	8001d62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d30:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f8a9 	bl	8000e90 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d42:	f7ff f8a5 	bl	8000e90 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e105      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80f9 	beq.w	8001f5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	f040 80cf 	bne.w	8001f14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d12c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	3b01      	subs	r3, #1
 8001d96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d123      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d11b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d113      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d109      	bne.n	8001de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d071      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d068      	beq.n	8001ebc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001df6:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0ac      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e12:	f7ff f83d 	bl	8000e90 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff f839 	bl	8000e90 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e099      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x788>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e48:	3a01      	subs	r2, #1
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e5a:	0852      	lsrs	r2, r2, #1
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0552      	lsls	r2, r2, #21
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0652      	lsls	r2, r2, #25
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e72:	06d2      	lsls	r2, r2, #27
 8001e74:	430a      	orrs	r2, r1
 8001e76:	4912      	ldr	r1, [pc, #72]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e94:	f7fe fffc 	bl	8000e90 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe fff8 	bl	8000e90 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e058      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_RCC_OscConfig+0x784>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eba:	e050      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e04f      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d144      	bne.n	8001f5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eec:	f7fe ffd0 	bl	8000e90 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe ffcc 	bl	8000e90 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e02c      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x7b8>
 8001f12:	e024      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d01f      	beq.n	8001f5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe ffb3 	bl	8000e90 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe ffaf 	bl	8000e90 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4905      	ldr	r1, [pc, #20]	; (8001f68 <HAL_RCC_OscConfig+0x82c>)
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_OscConfig+0x830>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
 8001f58:	e001      	b.n	8001f5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	feeefffc 	.word	0xfeeefffc

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e11d      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b90      	ldr	r3, [pc, #576]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b8d      	ldr	r3, [pc, #564]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	498b      	ldr	r1, [pc, #556]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b89      	ldr	r3, [pc, #548]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e105      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d908      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	497b      	ldr	r1, [pc, #492]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d079      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d11e      	bne.n	8002038 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0dc      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800200a:	f000 fa09 	bl	8002420 <RCC_GetSysClockFreqFromPLLSource>
 800200e:	4603      	mov	r3, r0
 8002010:	4a70      	ldr	r2, [pc, #448]	; (80021d4 <HAL_RCC_ClockConfig+0x264>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d946      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d140      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002022:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e035      	b.n	80020a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d115      	bne.n	8002078 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b9      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ad      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0a5      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002078:	f000 f8b4 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 800207c:	4603      	mov	r3, r0
 800207e:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_RCC_ClockConfig+0x264>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d90f      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002084:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002090:	4b4f      	ldr	r3, [pc, #316]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4947      	ldr	r1, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b6:	f7fe feeb 	bl	8000e90 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020be:	f7fe fee7 	bl	8000e90 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e077      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 020c 	and.w	r2, r3, #12
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d1eb      	bne.n	80020be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4a37      	ldr	r2, [pc, #220]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	429a      	cmp	r2, r3
 8002112:	d208      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	492b      	ldr	r1, [pc, #172]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d210      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 020f 	bic.w	r2, r3, #15
 800213c:	4923      	ldr	r1, [pc, #140]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_ClockConfig+0x25c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e036      	b.n	80021c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4918      	ldr	r1, [pc, #96]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4910      	ldr	r1, [pc, #64]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002194:	f000 f826 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_ClockConfig+0x260>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <HAL_RCC_ClockConfig+0x268>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x26c>)
 80021b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fe19 	bl	8000df0 <HAL_InitTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	04c4b400 	.word	0x04c4b400
 80021d8:	080044d0 	.word	0x080044d0
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x34>
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d121      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d11e      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e005      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002254:	e00a      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d102      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	e004      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d101      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800226a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d134      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0xa6>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d003      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xac>
 8002288:	e005      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800228c:	617b      	str	r3, [r7, #20]
      break;
 800228e:	e005      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002292:	617b      	str	r3, [r7, #20]
      break;
 8002294:	e002      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3301      	adds	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	0e5b      	lsrs	r3, r3, #25
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	3301      	adds	r3, #1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022dc:	69bb      	ldr	r3, [r7, #24]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080044e8 	.word	0x080044e8
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	080044e0 	.word	0x080044e0

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002344:	f7ff ffda 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0adb      	lsrs	r3, r3, #11
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	080044e0 	.word	0x080044e0

0800236c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002384:	f7ff f906 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 8002388:	6178      	str	r0, [r7, #20]
 800238a:	e014      	b.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b22      	ldr	r3, [pc, #136]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a4:	f7ff f8f6 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 80023a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d10b      	bne.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d913      	bls.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2ba0      	cmp	r3, #160	; 0xa0
 80023c8:	d902      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ca:	2302      	movs	r3, #2
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e00d      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	e00a      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b7f      	cmp	r3, #127	; 0x7f
 80023da:	d902      	bls.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023dc:	2302      	movs	r3, #2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e004      	b.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b70      	cmp	r3, #112	; 0x70
 80023e6:	d101      	bne.n	80023ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 020f 	bic.w	r2, r3, #15
 80023f4:	4909      	ldr	r1, [pc, #36]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	40022000 	.word	0x40022000

08002420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d00b      	beq.n	800244e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d825      	bhi.n	8002488 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d008      	beq.n	8002454 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d11f      	bne.n	8002488 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002448:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800244a:	613b      	str	r3, [r7, #16]
    break;
 800244c:	e01f      	b.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002450:	613b      	str	r3, [r7, #16]
    break;
 8002452:	e01c      	b.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e005      	b.n	800247c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	613b      	str	r3, [r7, #16]
    break;
 8002486:	e002      	b.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
    break;
 800248c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	3301      	adds	r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	fb03 f202 	mul.w	r2, r3, r2
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0e5b      	lsrs	r3, r3, #25
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024ce:	683b      	ldr	r3, [r7, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	080044e8 	.word	0x080044e8

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d040      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d02a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d825      	bhi.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d026      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d821      	bhi.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d006      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d81d      	bhi.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002528:	2b20      	cmp	r3, #32
 800252a:	d010      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800252c:	e018      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4a88      	ldr	r2, [pc, #544]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253a:	e015      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fb02 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254c:	e00c      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3320      	adds	r3, #32
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fbed 	bl	8002d34 <RCCEx_PLLSAI2_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800255e:	e003      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	74fb      	strb	r3, [r7, #19]
      break;
 8002564:	e000      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800256e:	4b79      	ldr	r3, [pc, #484]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002574:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257c:	4975      	ldr	r1, [pc, #468]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002584:	e001      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d047      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d030      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d82a      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025aa:	d02a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b0:	d824      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d81e      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d010      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025c8:	e018      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a61      	ldr	r2, [pc, #388]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d6:	e015      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fab4 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e8:	e00c      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3320      	adds	r3, #32
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fb9f 	bl	8002d34 <RCCEx_PLLSAI2_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fa:	e003      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	74fb      	strb	r3, [r7, #19]
      break;
 8002600:	e000      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10b      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	494e      	ldr	r1, [pc, #312]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002620:	e001      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 809f 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002676:	f7fe fc0b 	bl	8000e90 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267c:	e009      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe fc07 	bl	8000e90 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d902      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	74fb      	strb	r3, [r7, #19]
        break;
 8002690:	e005      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ef      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d15b      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d019      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fbc6 	bl	8000e90 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	e00b      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fbc2 	bl	8000e90 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d902      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	74fb      	strb	r3, [r7, #19]
            break;
 800271e:	e006      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ec      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10c      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
 8002752:	e005      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7c7b      	ldrb	r3, [r7, #17]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4ba0      	ldr	r3, [pc, #640]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	4a9f      	ldr	r2, [pc, #636]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277e:	4b9a      	ldr	r3, [pc, #616]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	4996      	ldr	r1, [pc, #600]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 020c 	bic.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	498e      	ldr	r1, [pc, #568]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c2:	4b89      	ldr	r3, [pc, #548]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	4985      	ldr	r1, [pc, #532]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e4:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	497d      	ldr	r1, [pc, #500]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002806:	4b78      	ldr	r3, [pc, #480]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4974      	ldr	r1, [pc, #464]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002828:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	496c      	ldr	r1, [pc, #432]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002858:	4963      	ldr	r1, [pc, #396]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287a:	495b      	ldr	r1, [pc, #364]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800288e:	4b56      	ldr	r3, [pc, #344]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	4952      	ldr	r1, [pc, #328]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b0:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	494a      	ldr	r1, [pc, #296]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d2:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	4941      	ldr	r1, [pc, #260]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028f4:	4b3c      	ldr	r3, [pc, #240]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	4939      	ldr	r1, [pc, #228]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d028      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	4930      	ldr	r1, [pc, #192]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002934:	d106      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002936:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002940:	60d3      	str	r3, [r2, #12]
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f8f9 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d04d      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297c:	d108      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002984:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800298e:	e012      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ae:	490e      	ldr	r1, [pc, #56]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029be:	d106      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ca:	60d3      	str	r3, [r2, #12]
 80029cc:	e020      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d6:	d109      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a02      	ldr	r2, [pc, #8]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	e014      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f8a5 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d028      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2a:	4947      	ldr	r1, [pc, #284]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3c:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	e011      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f876 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01e      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a7a:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	492f      	ldr	r1, [pc, #188]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f851 	bl	8002b4c <RCCEx_PLLSAI1_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aca:	f023 0204 	bic.w	r2, r3, #4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad4:	491c      	ldr	r1, [pc, #112]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aee:	f023 0218 	bic.w	r2, r3, #24
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	4913      	ldr	r1, [pc, #76]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d103      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d142      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e03f      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d018      	beq.n	8002bbe <RCCEx_PLLSAI1_Config+0x72>
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d825      	bhi.n	8002bdc <RCCEx_PLLSAI1_Config+0x90>
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <RCCEx_PLLSAI1_Config+0x4e>
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d009      	beq.n	8002bac <RCCEx_PLLSAI1_Config+0x60>
 8002b98:	e020      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e01a      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bac:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e013      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bbe:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bda:	e006      	b.n	8002bea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e004      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002be2:	bf00      	nop
 8002be4:	e002      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4949      	ldr	r1, [pc, #292]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8086 	bne.w	8002d18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe f93a 	bl	8000e90 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c20:	f7fe f936 	bl	8000e90 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
        break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ef      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d168      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d113      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	06d2      	lsls	r2, r2, #27
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	3a01      	subs	r2, #1
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	492d      	ldr	r1, [pc, #180]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	610b      	str	r3, [r1, #16]
 8002c72:	e02d      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d115      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	0211      	lsls	r1, r2, #8
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6912      	ldr	r2, [r2, #16]
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0552      	lsls	r2, r2, #21
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6852      	ldr	r2, [r2, #4]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4921      	ldr	r1, [pc, #132]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	610b      	str	r3, [r1, #16]
 8002ca4:	e014      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	0211      	lsls	r1, r2, #8
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6952      	ldr	r2, [r2, #20]
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0652      	lsls	r2, r2, #25
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6852      	ldr	r2, [r2, #4]
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4916      	ldr	r1, [pc, #88]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f8d8 	bl	8000e90 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce4:	f7fe f8d4 	bl	8000e90 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	4904      	ldr	r1, [pc, #16]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	07ff800f 	.word	0x07ff800f
 8002d2c:	ff9f800f 	.word	0xff9f800f
 8002d30:	f9ff800f 	.word	0xf9ff800f

08002d34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d42:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0203 	and.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d103      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
       ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d142      	bne.n	8002dec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e03f      	b.n	8002dec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d018      	beq.n	8002da6 <RCCEx_PLLSAI2_Config+0x72>
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d825      	bhi.n	8002dc4 <RCCEx_PLLSAI2_Config+0x90>
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d002      	beq.n	8002d82 <RCCEx_PLLSAI2_Config+0x4e>
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d009      	beq.n	8002d94 <RCCEx_PLLSAI2_Config+0x60>
 8002d80:	e020      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11d      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d92:	e01a      	b.n	8002dca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d94:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d116      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da4:	e013      	b.n	8002dce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002da6:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002db2:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dc2:	e006      	b.n	8002dd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e004      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e002      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002dda:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4949      	ldr	r1, [pc, #292]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8086 	bne.w	8002f00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002df4:	4b45      	ldr	r3, [pc, #276]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e00:	f7fe f846 	bl	8000e90 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e06:	e009      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e08:	f7fe f842 	bl	8000e90 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	73fb      	strb	r3, [r7, #15]
        break;
 8002e1a:	e005      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ef      	bne.n	8002e08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d168      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	06d2      	lsls	r2, r2, #27
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	3a01      	subs	r2, #1
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	430a      	orrs	r2, r1
 8002e54:	492d      	ldr	r1, [pc, #180]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	614b      	str	r3, [r1, #20]
 8002e5a:	e02d      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d115      	bne.n	8002e8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	0211      	lsls	r1, r2, #8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6912      	ldr	r2, [r2, #16]
 8002e74:	0852      	lsrs	r2, r2, #1
 8002e76:	3a01      	subs	r2, #1
 8002e78:	0552      	lsls	r2, r2, #21
 8002e7a:	4311      	orrs	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6852      	ldr	r2, [r2, #4]
 8002e80:	3a01      	subs	r2, #1
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	430a      	orrs	r2, r1
 8002e86:	4921      	ldr	r1, [pc, #132]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	614b      	str	r3, [r1, #20]
 8002e8c:	e014      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	0211      	lsls	r1, r2, #8
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6952      	ldr	r2, [r2, #20]
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0652      	lsls	r2, r2, #25
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6852      	ldr	r2, [r2, #4]
 8002eac:	3a01      	subs	r2, #1
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4916      	ldr	r1, [pc, #88]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fd ffe4 	bl	8000e90 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eca:	e009      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ecc:	f7fd ffe0 	bl	8000e90 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d902      	bls.n	8002ee0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ede:	e005      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4904      	ldr	r1, [pc, #16]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	07ff800f 	.word	0x07ff800f
 8002f14:	ff9f800f 	.word	0xff9f800f
 8002f18:	f9ff800f 	.word	0xf9ff800f

08002f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e042      	b.n	8002fb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fe5f 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fef8 	bl	8003d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fbf9 	bl	8003764 <UART_SetConfig>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01b      	b.n	8002fb4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 ff77 	bl	8003ea0 <UART_CheckIdleState>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d17c      	bne.n	80030d0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_UART_Transmit+0x26>
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e075      	b.n	80030d2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	; 0x21
 8002ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fd ff4b 	bl	8000e90 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d108      	bne.n	8003028 <HAL_UART_Transmit+0x6c>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d104      	bne.n	8003028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e003      	b.n	8003030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003030:	e031      	b.n	8003096 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 ffd9 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e03e      	b.n	80030d2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003066:	b292      	uxth	r2, r2
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	3302      	adds	r3, #2
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e008      	b.n	8003084 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b292      	uxth	r2, r2
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1c7      	bne.n	8003032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 ffa1 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0ba      	sub	sp, #232	; 0xe8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003106:	f640 030f 	movw	r3, #2063	; 0x80f
 800310a:	4013      	ands	r3, r2
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11b      	bne.n	8003150 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 82e3 	beq.w	800370c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
      return;
 800314e:	e2dd      	b.n	800370c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8123 	beq.w	80033a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800315a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800315e:	4b8d      	ldr	r3, [pc, #564]	; (8003394 <HAL_UART_IRQHandler+0x2b8>)
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003166:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800316a:	4b8b      	ldr	r3, [pc, #556]	; (8003398 <HAL_UART_IRQHandler+0x2bc>)
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8116 	beq.w	80033a0 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_UART_IRQHandler+0xc8>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_UART_IRQHandler+0xf8>
 80031b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2202      	movs	r2, #2
 80031c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d011      	beq.n	8003204 <HAL_UART_IRQHandler+0x128>
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2204      	movs	r2, #4
 80031f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d017      	beq.n	8003240 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800321c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003220:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_UART_IRQHandler+0x2b8>)
 8003222:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_UART_IRQHandler+0x196>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8249 	beq.w	8003710 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800328a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d054      	beq.n	8003380 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fef3 	bl	80040c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	d146      	bne.n	8003378 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3308      	adds	r3, #8
 8003312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800331a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800332e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1d9      	bne.n	80032ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <HAL_UART_IRQHandler+0x2c0>)
 8003348:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd ff16 	bl	8001182 <HAL_DMA_Abort_IT>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d019      	beq.n	8003390 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800336a:	4610      	mov	r0, r2
 800336c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	e00f      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9e1 	bl	8003738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	e00b      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f9dd 	bl	8003738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	e007      	b.n	8003390 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9d9 	bl	8003738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800338e:	e1bf      	b.n	8003710 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	bf00      	nop
    return;
 8003392:	e1bd      	b.n	8003710 <HAL_UART_IRQHandler+0x634>
 8003394:	10000001 	.word	0x10000001
 8003398:	04000120 	.word	0x04000120
 800339c:	0800418f 	.word	0x0800418f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 8153 	bne.w	8003650 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 814c 	beq.w	8003650 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8145 	beq.w	8003650 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	f040 80bb 	bne.w	8003554 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 818f 	beq.w	8003714 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003400:	429a      	cmp	r2, r3
 8003402:	f080 8187 	bcs.w	8003714 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800340c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8087 	bne.w	8003532 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800344e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003452:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1da      	bne.n	8003424 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800347e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800349a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e1      	bne.n	800346e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e3      	bne.n	80034aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	f023 0310 	bic.w	r3, r3, #16
 8003504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003512:	65bb      	str	r3, [r7, #88]	; 0x58
 8003514:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e4      	bne.n	80034f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fdcc 	bl	80010ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003544:	b29b      	uxth	r3, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8fd 	bl	800374c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003552:	e0df      	b.n	8003714 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003560:	b29b      	uxth	r3, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80d1 	beq.w	8003718 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80cc 	beq.w	8003718 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
 80035a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e4      	bne.n	8003580 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	623b      	str	r3, [r7, #32]
   return(result);
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3308      	adds	r3, #8
 80035da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035de:	633a      	str	r2, [r7, #48]	; 0x30
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e1      	bne.n	80035b6 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	60fb      	str	r3, [r7, #12]
   return(result);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0310 	bic.w	r3, r3, #16
 800361a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	617b      	str	r3, [r7, #20]
   return(result);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e4      	bne.n	8003606 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f87f 	bl	800374c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800364e:	e063      	b.n	8003718 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <HAL_UART_IRQHandler+0x59e>
 800365c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fdcc 	bl	8004210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003678:	e051      	b.n	800371e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d03a      	beq.n	800371c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
    }
    return;
 80036ae:	e035      	b.n	800371c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <HAL_UART_IRQHandler+0x5f4>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fd76 	bl	80041ba <UART_EndTransmit_IT>
    return;
 80036ce:	e026      	b.n	800371e <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <HAL_UART_IRQHandler+0x614>
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fda5 	bl	8004238 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036ee:	e016      	b.n	800371e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_UART_IRQHandler+0x642>
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003700:	2b00      	cmp	r3, #0
 8003702:	da0c      	bge.n	800371e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fd8d 	bl	8004224 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800370a:	e008      	b.n	800371e <HAL_UART_IRQHandler+0x642>
      return;
 800370c:	bf00      	nop
 800370e:	e006      	b.n	800371e <HAL_UART_IRQHandler+0x642>
    return;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_UART_IRQHandler+0x642>
      return;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_UART_IRQHandler+0x642>
      return;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_UART_IRQHandler+0x642>
    return;
 800371c:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800371e:	37e8      	adds	r7, #232	; 0xe8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003768:	b08c      	sub	sp, #48	; 0x30
 800376a:	af00      	add	r7, sp, #0
 800376c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4baa      	ldr	r3, [pc, #680]	; (8003a3c <UART_SetConfig+0x2d8>)
 8003794:	4013      	ands	r3, r2
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a9f      	ldr	r2, [pc, #636]	; (8003a40 <UART_SetConfig+0x2dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	4313      	orrs	r3, r2
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80037da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f023 010f 	bic.w	r1, r3, #15
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a90      	ldr	r2, [pc, #576]	; (8003a44 <UART_SetConfig+0x2e0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0xf0>
 8003808:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <UART_SetConfig+0x2e4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d81a      	bhi.n	800384c <UART_SetConfig+0xe8>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0xb8>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800383d 	.word	0x0800383d
 8003824:	08003835 	.word	0x08003835
 8003828:	08003845 	.word	0x08003845
 800382c:	2301      	movs	r3, #1
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003832:	e116      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383a:	e112      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003842:	e10e      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384a:	e10a      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003852:	e106      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7c      	ldr	r2, [pc, #496]	; (8003a4c <UART_SetConfig+0x2e8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d138      	bne.n	80038d0 <UART_SetConfig+0x16c>
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <UART_SetConfig+0x2e4>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b0c      	cmp	r3, #12
 800386a:	d82d      	bhi.n	80038c8 <UART_SetConfig+0x164>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0x110>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038c9 	.word	0x080038c9
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038b1 	.word	0x080038b1
 8003898:	080038c9 	.word	0x080038c9
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038c1 	.word	0x080038c1
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e0d8      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b6:	e0d4      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80038b8:	2304      	movs	r3, #4
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e0d0      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80038c0:	2308      	movs	r3, #8
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c6:	e0cc      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ce:	e0c8      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <UART_SetConfig+0x2ec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d125      	bne.n	8003926 <UART_SetConfig+0x1c2>
 80038da:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <UART_SetConfig+0x2e4>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d016      	beq.n	8003916 <UART_SetConfig+0x1b2>
 80038e8:	2b30      	cmp	r3, #48	; 0x30
 80038ea:	d818      	bhi.n	800391e <UART_SetConfig+0x1ba>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d00a      	beq.n	8003906 <UART_SetConfig+0x1a2>
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d814      	bhi.n	800391e <UART_SetConfig+0x1ba>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <UART_SetConfig+0x19a>
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d008      	beq.n	800390e <UART_SetConfig+0x1aa>
 80038fc:	e00f      	b.n	800391e <UART_SetConfig+0x1ba>
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003904:	e0ad      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003906:	2302      	movs	r3, #2
 8003908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390c:	e0a9      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800390e:	2304      	movs	r3, #4
 8003910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003914:	e0a5      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003916:	2308      	movs	r3, #8
 8003918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391c:	e0a1      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800391e:	2310      	movs	r3, #16
 8003920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003924:	e09d      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4a      	ldr	r2, [pc, #296]	; (8003a54 <UART_SetConfig+0x2f0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d125      	bne.n	800397c <UART_SetConfig+0x218>
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <UART_SetConfig+0x2e4>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800393a:	2bc0      	cmp	r3, #192	; 0xc0
 800393c:	d016      	beq.n	800396c <UART_SetConfig+0x208>
 800393e:	2bc0      	cmp	r3, #192	; 0xc0
 8003940:	d818      	bhi.n	8003974 <UART_SetConfig+0x210>
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d00a      	beq.n	800395c <UART_SetConfig+0x1f8>
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d814      	bhi.n	8003974 <UART_SetConfig+0x210>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <UART_SetConfig+0x1f0>
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d008      	beq.n	8003964 <UART_SetConfig+0x200>
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x210>
 8003954:	2300      	movs	r3, #0
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e082      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800395c:	2302      	movs	r3, #2
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e07e      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003964:	2304      	movs	r3, #4
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e07a      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800396c:	2308      	movs	r3, #8
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e076      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003974:	2310      	movs	r3, #16
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397a:	e072      	b.n	8003a62 <UART_SetConfig+0x2fe>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a35      	ldr	r2, [pc, #212]	; (8003a58 <UART_SetConfig+0x2f4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d12a      	bne.n	80039dc <UART_SetConfig+0x278>
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <UART_SetConfig+0x2e4>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003994:	d01a      	beq.n	80039cc <UART_SetConfig+0x268>
 8003996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399a:	d81b      	bhi.n	80039d4 <UART_SetConfig+0x270>
 800399c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a0:	d00c      	beq.n	80039bc <UART_SetConfig+0x258>
 80039a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a6:	d815      	bhi.n	80039d4 <UART_SetConfig+0x270>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <UART_SetConfig+0x250>
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d008      	beq.n	80039c4 <UART_SetConfig+0x260>
 80039b2:	e00f      	b.n	80039d4 <UART_SetConfig+0x270>
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e052      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e04e      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ca:	e04a      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d2:	e046      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039da:	e042      	b.n	8003a62 <UART_SetConfig+0x2fe>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <UART_SetConfig+0x2dc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d13a      	bne.n	8003a5c <UART_SetConfig+0x2f8>
 80039e6:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <UART_SetConfig+0x2e4>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f4:	d01a      	beq.n	8003a2c <UART_SetConfig+0x2c8>
 80039f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039fa:	d81b      	bhi.n	8003a34 <UART_SetConfig+0x2d0>
 80039fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a00:	d00c      	beq.n	8003a1c <UART_SetConfig+0x2b8>
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	d815      	bhi.n	8003a34 <UART_SetConfig+0x2d0>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <UART_SetConfig+0x2b0>
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	d008      	beq.n	8003a24 <UART_SetConfig+0x2c0>
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x2d0>
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	e022      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a22:	e01e      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	e01a      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e016      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003a34:	2310      	movs	r3, #16
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e012      	b.n	8003a62 <UART_SetConfig+0x2fe>
 8003a3c:	cfff69f3 	.word	0xcfff69f3
 8003a40:	40008000 	.word	0x40008000
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40004400 	.word	0x40004400
 8003a50:	40004800 	.word	0x40004800
 8003a54:	40004c00 	.word	0x40004c00
 8003a58:	40005000 	.word	0x40005000
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4aae      	ldr	r2, [pc, #696]	; (8003d20 <UART_SetConfig+0x5bc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	f040 8097 	bne.w	8003b9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d823      	bhi.n	8003abe <UART_SetConfig+0x35a>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x318>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003aaf 	.word	0x08003aaf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003abf 	.word	0x08003abf
 8003a9c:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fc38 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b9e      	ldr	r3, [pc, #632]	; (8003d24 <UART_SetConfig+0x5c0>)
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fb99 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8130 	beq.w	8003d32 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	4a94      	ldr	r2, [pc, #592]	; (8003d28 <UART_SetConfig+0x5c4>)
 8003ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d305      	bcc.n	8003b02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d903      	bls.n	8003b0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b08:	e113      	b.n	8003d32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	60fa      	str	r2, [r7, #12]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	4a84      	ldr	r2, [pc, #528]	; (8003d28 <UART_SetConfig+0x5c4>)
 8003b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2200      	movs	r2, #0
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b2c:	f7fc fb66 	bl	80001fc <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	020b      	lsls	r3, r1, #8
 8003b42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b46:	0202      	lsls	r2, r0, #8
 8003b48:	6979      	ldr	r1, [r7, #20]
 8003b4a:	6849      	ldr	r1, [r1, #4]
 8003b4c:	0849      	lsrs	r1, r1, #1
 8003b4e:	2000      	movs	r0, #0
 8003b50:	460c      	mov	r4, r1
 8003b52:	4605      	mov	r5, r0
 8003b54:	eb12 0804 	adds.w	r8, r2, r4
 8003b58:	eb43 0905 	adc.w	r9, r3, r5
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	469a      	mov	sl, r3
 8003b64:	4693      	mov	fp, r2
 8003b66:	4652      	mov	r2, sl
 8003b68:	465b      	mov	r3, fp
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	f7fc fb45 	bl	80001fc <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b80:	d308      	bcc.n	8003b94 <UART_SetConfig+0x430>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b88:	d204      	bcs.n	8003b94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a3a      	ldr	r2, [r7, #32]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	e0ce      	b.n	8003d32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b9a:	e0ca      	b.n	8003d32 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	d166      	bne.n	8003c74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d827      	bhi.n	8003bfe <UART_SetConfig+0x49a>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x450>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe fb9c 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fbae 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <UART_SetConfig+0x5c0>)
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe faf9 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8003bf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8090 	beq.w	8003d32 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <UART_SetConfig+0x5c4>)
 8003c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c24:	005a      	lsls	r2, r3, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	441a      	add	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d916      	bls.n	8003c6c <UART_SetConfig+0x508>
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d212      	bcs.n	8003c6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f023 030f 	bic.w	r3, r3, #15
 8003c4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	8bfb      	ldrh	r3, [r7, #30]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	8bfa      	ldrh	r2, [r7, #30]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e062      	b.n	8003d32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c72:	e05e      	b.n	8003d32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d828      	bhi.n	8003cce <UART_SetConfig+0x56a>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x520>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003cb9 	.word	0x08003cb9
 8003c90:	08003ccf 	.word	0x08003ccf
 8003c94:	08003cbf 	.word	0x08003cbf
 8003c98:	08003ccf 	.word	0x08003ccf
 8003c9c:	08003ccf 	.word	0x08003ccf
 8003ca0:	08003ccf 	.word	0x08003ccf
 8003ca4:	08003cc7 	.word	0x08003cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f7fe fb34 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cae:	e014      	b.n	8003cda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fb46 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cb6:	e010      	b.n	8003cda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <UART_SetConfig+0x5c0>)
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cbc:	e00d      	b.n	8003cda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cbe:	f7fe fa91 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cc4:	e009      	b.n	8003cda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ccc:	e005      	b.n	8003cda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d028      	beq.n	8003d32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <UART_SetConfig+0x5c4>)
 8003ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cea:	461a      	mov	r2, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	441a      	add	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d910      	bls.n	8003d2c <UART_SetConfig+0x5c8>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d20c      	bcs.n	8003d2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e009      	b.n	8003d32 <UART_SetConfig+0x5ce>
 8003d1e:	bf00      	nop
 8003d20:	40008000 	.word	0x40008000
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	08004518 	.word	0x08004518
      }
      else
      {
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003d4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5a:	d10a      	bne.n	8003e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b098      	sub	sp, #96	; 0x60
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb0:	f7fc ffee 	bl	8000e90 <HAL_GetTick>
 8003eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d12f      	bne.n	8003f24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f88e 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d022      	beq.n	8003f24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e6      	bne.n	8003ede <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e063      	b.n	8003fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d149      	bne.n	8003fc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f857 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03c      	beq.n	8003fc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	623b      	str	r3, [r7, #32]
   return(result);
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9e:	61fa      	str	r2, [r7, #28]
 8003fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	617b      	str	r3, [r7, #20]
   return(result);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e5      	bne.n	8003f7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e012      	b.n	8003fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3758      	adds	r7, #88	; 0x58
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	e049      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400c:	d045      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fc ff3f 	bl	8000e90 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e048      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d031      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d110      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f838 	bl	80040c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2208      	movs	r2, #8
 8004056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e029      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d111      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800407e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f81e 	bl	80040c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e00f      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4013      	ands	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d0a6      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b095      	sub	sp, #84	; 0x54
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	61fb      	str	r3, [r7, #28]
   return(result);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e3      	bne.n	80040fc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d118      	bne.n	800416e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	60bb      	str	r3, [r7, #8]
   return(result);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0310 	bic.w	r3, r3, #16
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	613b      	str	r3, [r7, #16]
   return(result);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004182:	bf00      	nop
 8004184:	3754      	adds	r7, #84	; 0x54
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fac3 	bl	8003738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b088      	sub	sp, #32
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	613b      	str	r3, [r7, #16]
   return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e6      	bne.n	80041c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fa8e 	bl	8003724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004208:	bf00      	nop
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_UARTEx_DisableFifoMode+0x16>
 800425e:	2302      	movs	r3, #2
 8004260:	e027      	b.n	80042b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	; 0x24
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004290:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e02d      	b.n	8004332 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2224      	movs	r2, #36	; 0x24
 80042e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f850 	bl	80043b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800434e:	2302      	movs	r3, #2
 8004350:	e02d      	b.n	80043ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f812 	bl	80043b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043d8:	e031      	b.n	800443e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043da:	2308      	movs	r3, #8
 80043dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043de:	2308      	movs	r3, #8
 80043e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	0e5b      	lsrs	r3, r3, #25
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	0f5b      	lsrs	r3, r3, #29
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	7b3a      	ldrb	r2, [r7, #12]
 8004406:	4911      	ldr	r1, [pc, #68]	; (800444c <UARTEx_SetNbDataToProcess+0x94>)
 8004408:	5c8a      	ldrb	r2, [r1, r2]
 800440a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800440e:	7b3a      	ldrb	r2, [r7, #12]
 8004410:	490f      	ldr	r1, [pc, #60]	; (8004450 <UARTEx_SetNbDataToProcess+0x98>)
 8004412:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004414:	fb93 f3f2 	sdiv	r3, r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	7b7a      	ldrb	r2, [r7, #13]
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <UARTEx_SetNbDataToProcess+0x94>)
 8004426:	5c8a      	ldrb	r2, [r1, r2]
 8004428:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800442c:	7b7a      	ldrb	r2, [r7, #13]
 800442e:	4908      	ldr	r1, [pc, #32]	; (8004450 <UARTEx_SetNbDataToProcess+0x98>)
 8004430:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004432:	fb93 f3f2 	sdiv	r3, r3, r2
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	08004530 	.word	0x08004530
 8004450:	08004538 	.word	0x08004538

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4d0d      	ldr	r5, [pc, #52]	; (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	; (80044a0 <__libc_init_array+0x3c>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2600      	movs	r6, #0
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4d0b      	ldr	r5, [pc, #44]	; (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	; (80044a8 <__libc_init_array+0x44>)
 8004478:	f000 f818 	bl	80044ac <_init>
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2600      	movs	r6, #0
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08004548 	.word	0x08004548
 80044a0:	08004548 	.word	0x08004548
 80044a4:	08004548 	.word	0x08004548
 80044a8:	0800454c 	.word	0x0800454c

080044ac <_init>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr

080044b8 <_fini>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr
