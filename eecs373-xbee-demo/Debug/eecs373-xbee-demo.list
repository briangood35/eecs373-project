
eecs373-xbee-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005070  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b0  080052b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080052c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080052c4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd31  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dad  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002fb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000816  00000000  00000000  000305e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286b8  00000000  00000000  00030df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cff5  00000000  00000000  000594ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f96a4  00000000  00000000  000664a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a68  00000000  00000000  0015fb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001625b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005214 	.word	0x08005214

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005214 	.word	0x08005214

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <xbee_send_two_bytes>:
	uint8_t frame_id;
	uint16_t dest_addr;
	uint8_t options;
} xbee_frame_header_t;

void xbee_send_two_bytes(uint8_t *data, uint8_t *dest) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t checksum = 0xFF;
 8000502:	23ff      	movs	r3, #255	; 0xff
 8000504:	77fb      	strb	r3, [r7, #31]
	xbee_frame_header_t header = {
 8000506:	4a23      	ldr	r2, [pc, #140]	; (8000594 <xbee_send_two_bytes+0x9c>)
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	ca07      	ldmia	r2, {r0, r1, r2}
 800050e:	c303      	stmia	r3!, {r0, r1}
 8000510:	801a      	strh	r2, [r3, #0]
			.frame_type = 0x01, // 16-bit transmit request
			.frame_id = 0x00, // device will not emit a response frame
			.dest_addr = 0xD161, // broadcast address
			.options = 0, // no options set
	};
	checksum -= (header.frame_type + header.frame_id + dest[0] + dest[1] + data[0] + data[1]);
 8000512:	7e3a      	ldrb	r2, [r7, #24]
 8000514:	7e7b      	ldrb	r3, [r7, #25]
 8000516:	4413      	add	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	b2da      	uxtb	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4413      	add	r3, r2
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4413      	add	r3, r2
 8000532:	b2da      	uxtb	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	7ffa      	ldrb	r2, [r7, #31]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[] = {header.start_delim,
 8000544:	7d3b      	ldrb	r3, [r7, #20]
 8000546:	723b      	strb	r3, [r7, #8]
 8000548:	2300      	movs	r3, #0
 800054a:	727b      	strb	r3, [r7, #9]
					 0,
					 header.length,
 800054c:	8afb      	ldrh	r3, [r7, #22]
	uint8_t buf[] = {header.start_delim,
 800054e:	b2db      	uxtb	r3, r3
 8000550:	72bb      	strb	r3, [r7, #10]
					 header.frame_type,
 8000552:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buf[] = {header.start_delim,
 8000554:	72fb      	strb	r3, [r7, #11]
					 header.frame_id,
 8000556:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buf[] = {header.start_delim,
 8000558:	733b      	strb	r3, [r7, #12]
					 dest[0], // dest_addr high bits
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 800055e:	737b      	strb	r3, [r7, #13]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	73bb      	strb	r3, [r7, #14]
					 dest[1], // dest_addr low bits
					 header.options,
 8000566:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buf[] = {header.start_delim,
 8000568:	73fb      	strb	r3, [r7, #15]
					 data[0],
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 800056e:	743b      	strb	r3, [r7, #16]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	785b      	ldrb	r3, [r3, #1]
 8000574:	747b      	strb	r3, [r7, #17]
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	74bb      	strb	r3, [r7, #18]
					 data[1],
					 checksum,
	};
	HAL_UART_Transmit(XBEE1_ADDR, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
 800057a:	f107 0108 	add.w	r1, r7, #8
 800057e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000582:	220b      	movs	r2, #11
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <xbee_send_two_bytes+0xa0>)
 8000586:	f002 fd39 	bl	8002ffc <HAL_UART_Transmit>
}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	0800522c 	.word	0x0800522c
 8000598:	20000028 	.word	0x20000028

0800059c <HAL_UART_RxCpltCallback>:

uint8_t rx_buf[11] = { 0 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart3, rx_buf, 11);
 80005a4:	220b      	movs	r2, #11
 80005a6:	4904      	ldr	r1, [pc, #16]	; (80005b8 <HAL_UART_RxCpltCallback+0x1c>)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <HAL_UART_RxCpltCallback+0x20>)
 80005aa:	f002 fdb7 	bl	800311c <HAL_UART_Receive_IT>
  __NOP(); // set breakpoint here
 80005ae:	bf00      	nop
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000bc 	.word	0x200000bc
 80005bc:	20000028 	.word	0x20000028

080005c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	// this will trigger on blue push button (PC13)
	uint8_t data[2] = {0x56, 0x78};
 80005ca:	f647 0356 	movw	r3, #30806	; 0x7856
 80005ce:	81bb      	strh	r3, [r7, #12]
	uint8_t dest[2] = {0x11, 0x11};
 80005d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80005d4:	813b      	strh	r3, [r7, #8]
	xbee_send_two_bytes(data, dest);
 80005d6:	f107 0208 	add.w	r2, r7, #8
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff89 	bl	80004f8 <xbee_send_two_bytes>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc03 	bl	8000dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f80e 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f89e 	bl	800073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f850 	bl	80006a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, rx_buf, 11);
 8000604:	220b      	movs	r2, #11
 8000606:	4902      	ldr	r1, [pc, #8]	; (8000610 <main+0x20>)
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <main+0x24>)
 800060a:	f002 fd87 	bl	800311c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x1e>
 8000610:	200000bc 	.word	0x200000bc
 8000614:	20000028 	.word	0x20000028

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fdc8 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f000 ffe9 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 fad2 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064c:	2310      	movs	r3, #16
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000658:	2360      	movs	r3, #96	; 0x60
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f889 	bl	800177c <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000670:	f000 fabe 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fc8f 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000698:	f000 faaa 	bl	8000bf0 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3758      	adds	r7, #88	; 0x58
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <MX_USART3_UART_Init+0x94>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_USART3_UART_Init+0x90>)
 80006ee:	f002 fc35 	bl	8002f5c <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 fa7a 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_USART3_UART_Init+0x90>)
 8000700:	f004 fc91 	bl	8005026 <HAL_UARTEx_SetTxFifoThreshold>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 fa71 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <MX_USART3_UART_Init+0x90>)
 8000712:	f004 fcc6 	bl	80050a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 fa68 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_USART3_UART_Init+0x90>)
 8000722:	f004 fc47 	bl	8004fb4 <HAL_UARTEx_DisableFifoMode>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 fa60 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000028 	.word	0x20000028
 8000738:	40004800 	.word	0x40004800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	4bb2      	ldr	r3, [pc, #712]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4ab1      	ldr	r2, [pc, #708]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4baf      	ldr	r3, [pc, #700]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4bac      	ldr	r3, [pc, #688]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4aab      	ldr	r2, [pc, #684]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4ba9      	ldr	r3, [pc, #676]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4ba6      	ldr	r3, [pc, #664]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4aa5      	ldr	r2, [pc, #660]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4ba3      	ldr	r3, [pc, #652]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4ba0      	ldr	r3, [pc, #640]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a9f      	ldr	r2, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b9d      	ldr	r3, [pc, #628]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b9a      	ldr	r3, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a99      	ldr	r2, [pc, #612]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b97      	ldr	r3, [pc, #604]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b8e      	ldr	r3, [pc, #568]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a8d      	ldr	r2, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b8b      	ldr	r3, [pc, #556]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	4b88      	ldr	r3, [pc, #544]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a87      	ldr	r2, [pc, #540]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b85      	ldr	r3, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000812:	f000 ffa3 	bl	800175c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000816:	230c      	movs	r3, #12
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000826:	230d      	movs	r3, #13
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	487b      	ldr	r0, [pc, #492]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 8000832:	f000 fd25 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x2e8>)
 800084e:	f000 fd17 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000852:	2307      	movs	r3, #7
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000862:	2304      	movs	r3, #4
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	486e      	ldr	r0, [pc, #440]	; (8000a28 <MX_GPIO_Init+0x2ec>)
 800086e:	f000 fd07 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000882:	230d      	movs	r3, #13
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4866      	ldr	r0, [pc, #408]	; (8000a28 <MX_GPIO_Init+0x2ec>)
 800088e:	f000 fcf7 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000892:	233f      	movs	r3, #63	; 0x3f
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000896:	230b      	movs	r3, #11
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	485f      	ldr	r0, [pc, #380]	; (8000a24 <MX_GPIO_Init+0x2e8>)
 80008a6:	f000 fceb 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008aa:	2301      	movs	r3, #1
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008ba:	2301      	movs	r3, #1
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fcda 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008cc:	2308      	movs	r3, #8
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008d0:	230b      	movs	r3, #11
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f000 fccd 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23f0      	movs	r3, #240	; 0xf0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 fcbc 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000908:	2301      	movs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4842      	ldr	r0, [pc, #264]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 8000924:	f000 fcac 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800092c:	230b      	movs	r3, #11
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	483c      	ldr	r0, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 800093c:	f000 fca0 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000940:	2344      	movs	r3, #68	; 0x44
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4836      	ldr	r0, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 8000954:	f000 fc94 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000958:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800096a:	2301      	movs	r3, #1
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	482a      	ldr	r0, [pc, #168]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 8000976:	f000 fc83 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800097a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800098c:	2303      	movs	r3, #3
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4822      	ldr	r0, [pc, #136]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 8000998:	f000 fc72 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ae:	2301      	movs	r3, #1
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 80009ba:	f000 fc61 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80009be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009d0:	230d      	movs	r3, #13
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 80009dc:	f000 fc50 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80009f2:	230e      	movs	r3, #14
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0x2f0>)
 80009fe:	f000 fc3f 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a14:	2302      	movs	r3, #2
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
 8000a18:	e00a      	b.n	8000a30 <MX_GPIO_Init+0x2f4>
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48001000 	.word	0x48001000
 8000a24:	48000800 	.word	0x48000800
 8000a28:	48001400 	.word	0x48001400
 8000a2c:	48000400 	.word	0x48000400
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4869      	ldr	r0, [pc, #420]	; (8000bdc <MX_GPIO_Init+0x4a0>)
 8000a38:	f000 fc22 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4861      	ldr	r0, [pc, #388]	; (8000be0 <MX_GPIO_Init+0x4a4>)
 8000a5a:	f000 fc11 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000a6e:	230d      	movs	r3, #13
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	485a      	ldr	r0, [pc, #360]	; (8000be4 <MX_GPIO_Init+0x4a8>)
 8000a7a:	f000 fc01 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4852      	ldr	r0, [pc, #328]	; (8000be4 <MX_GPIO_Init+0x4a8>)
 8000a9a:	f000 fbf1 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a9e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	484a      	ldr	r0, [pc, #296]	; (8000be4 <MX_GPIO_Init+0x4a8>)
 8000abc:	f000 fbe0 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ac0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fbce 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fbc0 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b10:	2309      	movs	r3, #9
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4830      	ldr	r0, [pc, #192]	; (8000bdc <MX_GPIO_Init+0x4a0>)
 8000b1c:	f000 fbb0 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b20:	2304      	movs	r3, #4
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b30:	230c      	movs	r3, #12
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4828      	ldr	r0, [pc, #160]	; (8000bdc <MX_GPIO_Init+0x4a0>)
 8000b3c:	f000 fba0 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b40:	2378      	movs	r3, #120	; 0x78
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_GPIO_Init+0x4a0>)
 8000b5c:	f000 fb90 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b60:	2338      	movs	r3, #56	; 0x38
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b70:	2306      	movs	r3, #6
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <MX_GPIO_Init+0x4ac>)
 8000b7c:	f000 fb80 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b92:	2304      	movs	r3, #4
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <MX_GPIO_Init+0x4ac>)
 8000b9e:	f000 fb6f 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x4b0>)
 8000bbe:	f000 fb5f 	bl	8001280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f000 fa69 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bcc:	2028      	movs	r0, #40	; 0x28
 8000bce:	f000 fa82 	bl	80010d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48001800 	.word	0x48001800
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000400 	.word	0x48000400
 8000bec:	48001000 	.word	0x48001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ae      	sub	sp, #184	; 0xb8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2294      	movs	r2, #148	; 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 faa9 	bl	80051bc <memset>
  if(huart->Instance==USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <HAL_UART_MspInit+0xc0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d143      	bne.n	8000cfc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c74:	2304      	movs	r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fc53 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff ffb0 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xc4>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0xc8>)
 8000ce8:	f000 faca 	bl	8001280 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2027      	movs	r0, #39	; 0x27
 8000cf2:	f000 f9d4 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf6:	2027      	movs	r0, #39	; 0x27
 8000cf8:	f000 f9ed 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37b8      	adds	r7, #184	; 0xb8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000c00 	.word	0x48000c00

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8a4 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART3_IRQHandler+0x10>)
 8000d6a:	f002 fa23 	bl	80031b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000028 	.word	0x20000028

08000d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f000 fc10 	bl	80015a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f004 f9f7 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fc07 	bl	80005f0 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	080052b8 	.word	0x080052b8
  ldr r2, =_sbss
 8000df4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df8:	200000cc 	.word	0x200000cc

08000dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_IRQHandler>

08000dfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f93d 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f80e 	bl	8000e30 <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e001      	b.n	8000e24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e20:	f7ff feec 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_InitTick+0x6c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d023      	beq.n	8000e8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_InitTick+0x70>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_InitTick+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f949 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10f      	bne.n	8000e86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d809      	bhi.n	8000e80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	f000 f913 	bl	800109e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_InitTick+0x74>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e007      	b.n	8000e90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e004      	b.n	8000e90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e001      	b.n	8000e90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200000c8 	.word	0x200000c8

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200000c8 	.word	0x200000c8

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2204      	movs	r2, #4
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e040      	b.n	80011b6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 020e 	bic.w	r2, r2, #14
 8001142:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001152:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 021c 	and.w	r2, r3, #28
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001180:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00c      	beq.n	80011a4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001198:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011a2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d005      	beq.n	80011e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e047      	b.n	8001276 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 020e 	bic.w	r2, r2, #14
 80011f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f003 021c 	and.w	r2, r3, #28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001232:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00c      	beq.n	8001256 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800124a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001254:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
    }
  }
  return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e166      	b.n	800155e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8158 	beq.w	8001558 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80b2 	beq.w	8001558 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_GPIO_Init+0x2fc>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_GPIO_Init+0x2fc>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <HAL_GPIO_Init+0x2fc>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800140c:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_GPIO_Init+0x300>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001436:	d02b      	beq.n	8001490 <HAL_GPIO_Init+0x210>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_GPIO_Init+0x304>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d025      	beq.n	800148c <HAL_GPIO_Init+0x20c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a51      	ldr	r2, [pc, #324]	; (8001588 <HAL_GPIO_Init+0x308>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d01f      	beq.n	8001488 <HAL_GPIO_Init+0x208>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a50      	ldr	r2, [pc, #320]	; (800158c <HAL_GPIO_Init+0x30c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d019      	beq.n	8001484 <HAL_GPIO_Init+0x204>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4f      	ldr	r2, [pc, #316]	; (8001590 <HAL_GPIO_Init+0x310>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x200>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_GPIO_Init+0x314>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1fc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4d      	ldr	r2, [pc, #308]	; (8001598 <HAL_GPIO_Init+0x318>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1f8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4c      	ldr	r2, [pc, #304]	; (800159c <HAL_GPIO_Init+0x31c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1f4>
 8001470:	2307      	movs	r3, #7
 8001472:	e00e      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001474:	2308      	movs	r3, #8
 8001476:	e00c      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001478:	2306      	movs	r3, #6
 800147a:	e00a      	b.n	8001492 <HAL_GPIO_Init+0x212>
 800147c:	2305      	movs	r3, #5
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001480:	2304      	movs	r3, #4
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001484:	2303      	movs	r3, #3
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x212>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x212>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_GPIO_Init+0x300>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b0:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x320>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d4:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x320>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_GPIO_Init+0x320>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fe:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_GPIO_Init+0x320>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x320>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x320>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_GPIO_Init+0x320>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_GPIO_Init+0x320>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae91 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	48001800 	.word	0x48001800
 800159c:	48001c00 	.word	0x48001c00
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fffc 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e4:	d102      	bne.n	80015ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80015e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ea:	e00b      	b.n	8001604 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fa:	d102      	bne.n	8001602 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	e000      	b.n	8001604 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001602:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d141      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d131      	bne.n	8001694 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001630:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001648:	4a41      	ldr	r2, [pc, #260]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2232      	movs	r2, #50	; 0x32
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	4a3f      	ldr	r2, [pc, #252]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0c9b      	lsrs	r3, r3, #18
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001666:	e002      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3b01      	subs	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d102      	bne.n	8001682 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f2      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168e:	d158      	bne.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e057      	b.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016a4:	e04d      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ac:	d141      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d131      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d4:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2232      	movs	r2, #50	; 0x32
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	0c9b      	lsrs	r3, r3, #18
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f2:	e002      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d102      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f2      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171a:	d112      	bne.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e011      	b.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001730:	e007      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001740:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40007000 	.word	0x40007000
 8001754:	20000000 	.word	0x20000000
 8001758:	431bde83 	.word	0x431bde83

0800175c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6053      	str	r3, [r2, #4]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f000 bc08 	b.w	8001fa0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001790:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80e4 	beq.w	800197a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4c>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	f040 808b 	bne.w	80018d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	f040 8087 	bne.w	80018d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c8:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x64>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e3df      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_RCC_OscConfig+0x7e>
 80017f0:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f8:	e005      	b.n	8001806 <HAL_RCC_OscConfig+0x8a>
 80017fa:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001806:	4293      	cmp	r3, r2
 8001808:	d223      	bcs.n	8001852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fdcc 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e3c0      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181e:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	496d      	ldr	r1, [pc, #436]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183c:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	4968      	ldr	r1, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e025      	b.n	800189e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001852:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4960      	ldr	r1, [pc, #384]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	495b      	ldr	r1, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fd8c 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e380      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800189e:	f000 fcc1 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b51      	ldr	r3, [pc, #324]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	4950      	ldr	r1, [pc, #320]	; (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_RCC_OscConfig+0x278>)
 80018bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018be:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fab4 	bl	8000e30 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d052      	beq.n	8001978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	e364      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d032      	beq.n	8001944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ea:	f7ff faf1 	bl	8000ed0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f2:	f7ff faed 	bl	8000ed0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e34d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a35      	ldr	r2, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4930      	ldr	r1, [pc, #192]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	492b      	ldr	r1, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
 8001942:	e01a      	b.n	800197a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001950:	f7ff fabe 	bl	8000ed0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001958:	f7ff faba 	bl	8000ed0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e31a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1dc>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d073      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x21c>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d10b      	bne.n	80019b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d063      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d15f      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e2f7      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x24c>
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e025      	b.n	8001a14 <HAL_RCC_OscConfig+0x298>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d114      	bne.n	80019fc <HAL_RCC_OscConfig+0x280>
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a02      	ldr	r2, [pc, #8]	; (80019ec <HAL_RCC_OscConfig+0x270>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x298>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08005238 	.word	0x08005238
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004
 80019fc:	4ba0      	ldr	r3, [pc, #640]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a9f      	ldr	r2, [pc, #636]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b9d      	ldr	r3, [pc, #628]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a9c      	ldr	r2, [pc, #624]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d013      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fa58 	bl	8000ed0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fa54 	bl	8000ed0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e2b4      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2a8>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa44 	bl	8000ed0 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fa40 	bl	8000ed0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e2a0      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	4b88      	ldr	r3, [pc, #544]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2d0>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d060      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x310>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d116      	bne.n	8001aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x328>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e27d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4973      	ldr	r1, [pc, #460]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	e040      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac2:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f9ff 	bl	8000ed0 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f9fb 	bl	8000ed0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e25b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	495f      	ldr	r1, [pc, #380]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e018      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f9db 	bl	8000ed0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f9d7 	bl	8000ed0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e237      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d03c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b50:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	4a4a      	ldr	r2, [pc, #296]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f9b6 	bl	8000ed0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff f9b2 	bl	8000ed0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e212      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCC_OscConfig+0x3ec>
 8001b88:	e01b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f999 	bl	8000ed0 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f995 	bl	8000ed0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1f5      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ef      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80a6 	beq.w	8001d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d118      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c14:	f7ff f95c 	bl	8000ed0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7ff f958 	bl	8000ed0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1b8      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x508>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4d8>
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c52:	e029      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d115      	bne.n	8001c88 <HAL_RCC_OscConfig+0x50c>
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40007000 	.word	0x40007000
 8001c88:	4b9d      	ldr	r3, [pc, #628]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a9c      	ldr	r2, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	4a98      	ldr	r2, [pc, #608]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d016      	beq.n	8001cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f90e 	bl	8000ed0 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f90a 	bl	8000ed0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e168      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ed      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x53c>
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f8f7 	bl	8000ed0 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f8f3 	bl	8000ed0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e151      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cfc:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ed      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d30:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d36:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f8c6 	bl	8000ed0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d48:	f7ff f8c2 	bl	8000ed0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e122      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ef      	beq.n	8001d48 <HAL_RCC_OscConfig+0x5cc>
 8001d68:	e01b      	b.n	8001da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d70:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f8a9 	bl	8000ed0 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d82:	f7ff f8a5 	bl	8000ed0 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e105      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d94:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ef      	bne.n	8001d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80f9 	beq.w	8001f9e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	f040 80cf 	bne.w	8001f54 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 0203 	and.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d12c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d123      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d11b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d113      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d109      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d071      	beq.n	8001f08 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d068      	beq.n	8001efc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0ac      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e52:	f7ff f83d 	bl	8000ed0 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff f839 	bl	8000ed0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e099      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x788>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e92:	0212      	lsls	r2, r2, #8
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e9a:	0852      	lsrs	r2, r2, #1
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	0552      	lsls	r2, r2, #21
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea6:	0852      	lsrs	r2, r2, #1
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	0652      	lsls	r2, r2, #25
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb2:	06d2      	lsls	r2, r2, #27
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4912      	ldr	r1, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed4:	f7fe fffc 	bl	8000ed0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fff8 	bl	8000ed0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e058      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	e050      	b.n	8001f9e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e04f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d144      	bne.n	8001f9e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a20      	ldr	r2, [pc, #128]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2c:	f7fe ffd0 	bl	8000ed0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe ffcc 	bl	8000ed0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e02c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x7b8>
 8001f52:	e024      	b.n	8001f9e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d01f      	beq.n	8001f9a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe ffb3 	bl	8000ed0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ffaf 	bl	8000ed0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4905      	ldr	r1, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x82c>)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x830>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e001      	b.n	8001f9e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	feeefffc 	.word	0xfeeefffc

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e11d      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b90      	ldr	r3, [pc, #576]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b8d      	ldr	r3, [pc, #564]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 020f 	bic.w	r2, r3, #15
 8001fde:	498b      	ldr	r1, [pc, #556]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b89      	ldr	r3, [pc, #548]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e105      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	429a      	cmp	r2, r3
 8002012:	d908      	bls.n	8002026 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497b      	ldr	r1, [pc, #492]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d079      	beq.n	8002126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d11e      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0dc      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800204a:	f000 fa09 	bl	8002460 <RCC_GetSysClockFreqFromPLLSource>
 800204e:	4603      	mov	r3, r0
 8002050:	4a70      	ldr	r2, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x264>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d946      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d140      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e035      	b.n	80020e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d107      	bne.n	8002090 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002080:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b9      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002098:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0ad      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0a5      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80020b8:	f000 f8b4 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a55      	ldr	r2, [pc, #340]	; (8002214 <HAL_RCC_ClockConfig+0x264>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d90f      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d8:	4a4d      	ldr	r2, [pc, #308]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 0203 	bic.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4947      	ldr	r1, [pc, #284]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f6:	f7fe feeb 	bl	8000ed0 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7fe fee7 	bl	8000ed0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e077      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002114:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 020c 	and.w	r2, r3, #12
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	429a      	cmp	r2, r3
 8002124:	d1eb      	bne.n	80020fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d105      	bne.n	8002138 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800212c:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002136:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	492b      	ldr	r1, [pc, #172]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d210      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 020f 	bic.w	r2, r3, #15
 800217c:	4923      	ldr	r1, [pc, #140]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_ClockConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e036      	b.n	8002204 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4918      	ldr	r1, [pc, #96]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4910      	ldr	r1, [pc, #64]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d4:	f000 f826 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <HAL_RCC_ClockConfig+0x268>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x26c>)
 80021f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fe19 	bl	8000e30 <HAL_InitTick>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]

  return status;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	04c4b400 	.word	0x04c4b400
 8002218:	08005238 	.word	0x08005238
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d121      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11e      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e005      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e004      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d134      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0xa6>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d003      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xac>
 80022c8:	e005      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	e005      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022d2:	617b      	str	r3, [r7, #20]
      break;
 80022d4:	e002      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	0e5b      	lsrs	r3, r3, #25
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800231c:	69bb      	ldr	r3, [r7, #24]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	08005250 	.word	0x08005250
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCC_GetPCLK1Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08005248 	.word	0x08005248

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002384:	f7ff ffda 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0adb      	lsrs	r3, r3, #11
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08005248 	.word	0x08005248

080023ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c4:	f7ff f906 	bl	80015d4 <HAL_PWREx_GetVoltageRange>
 80023c8:	6178      	str	r0, [r7, #20]
 80023ca:	e014      	b.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e4:	f7ff f8f6 	bl	80015d4 <HAL_PWREx_GetVoltageRange>
 80023e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d10b      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b80      	cmp	r3, #128	; 0x80
 8002402:	d913      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2ba0      	cmp	r3, #160	; 0xa0
 8002408:	d902      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240a:	2302      	movs	r3, #2
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e00d      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e00a      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b7f      	cmp	r3, #127	; 0x7f
 800241a:	d902      	bls.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e004      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b70      	cmp	r3, #112	; 0x70
 8002426:	d101      	bne.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 020f 	bic.w	r2, r3, #15
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d00b      	beq.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d825      	bhi.n	80024c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d008      	beq.n	8002494 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d11f      	bne.n	80024c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800248a:	613b      	str	r3, [r7, #16]
    break;
 800248c:	e01f      	b.n	80024ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800248e:	4b25      	ldr	r3, [pc, #148]	; (8002524 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002490:	613b      	str	r3, [r7, #16]
    break;
 8002492:	e01c      	b.n	80024ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e005      	b.n	80024bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	613b      	str	r3, [r7, #16]
    break;
 80024c6:	e002      	b.n	80024ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
    break;
 80024cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	3301      	adds	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	fb03 f202 	mul.w	r2, r3, r2
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0e5b      	lsrs	r3, r3, #25
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800250e:	683b      	ldr	r3, [r7, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200
 8002528:	08005250 	.word	0x08005250

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002534:	2300      	movs	r3, #0
 8002536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002538:	2300      	movs	r3, #0
 800253a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	2b00      	cmp	r3, #0
 8002546:	d040      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d02a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d825      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d026      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d821      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d006      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d81d      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d010      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800256c:	e018      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800256e:	4b89      	ldr	r3, [pc, #548]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a88      	ldr	r2, [pc, #544]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800257a:	e015      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fb02 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800258c:	e00c      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3320      	adds	r3, #32
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fbed 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800259e:	e003      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	74fb      	strb	r3, [r7, #19]
      break;
 80025a4:	e000      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80025a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ae:	4b79      	ldr	r3, [pc, #484]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025bc:	4975      	ldr	r1, [pc, #468]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80025c4:	e001      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d047      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d030      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e4:	d82a      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ea:	d02a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025f0:	d824      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f6:	d008      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fc:	d81e      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002606:	d010      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002608:	e018      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800260a:	4b62      	ldr	r3, [pc, #392]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4a61      	ldr	r2, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002616:	e015      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fab4 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002628:	e00c      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3320      	adds	r3, #32
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fb9f 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800263a:	e003      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	74fb      	strb	r3, [r7, #19]
      break;
 8002640:	e000      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800264a:	4b52      	ldr	r3, [pc, #328]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	494e      	ldr	r1, [pc, #312]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002660:	e001      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 809f 	beq.w	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002678:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002688:	2300      	movs	r3, #0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a40      	ldr	r2, [pc, #256]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fc0b 	bl	8000ed0 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026bc:	e009      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7fe fc07 	bl	8000ed0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d902      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	74fb      	strb	r3, [r7, #19]
        break;
 80026d0:	e005      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ef      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d15b      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01f      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d019      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fbc6 	bl	8000ed0 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	e00b      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fbc2 	bl	8000ed0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d902      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	74fb      	strb	r3, [r7, #19]
            break;
 800275e:	e006      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ec      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10c      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a0:	7c7b      	ldrb	r3, [r7, #17]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4ba0      	ldr	r3, [pc, #640]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a9f      	ldr	r2, [pc, #636]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027be:	4b9a      	ldr	r3, [pc, #616]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f023 0203 	bic.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	4996      	ldr	r1, [pc, #600]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e0:	4b91      	ldr	r3, [pc, #580]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 020c 	bic.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	498e      	ldr	r1, [pc, #568]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002802:	4b89      	ldr	r3, [pc, #548]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	4985      	ldr	r1, [pc, #532]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002824:	4b80      	ldr	r3, [pc, #512]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	497d      	ldr	r1, [pc, #500]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4974      	ldr	r1, [pc, #464]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002868:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	496c      	ldr	r1, [pc, #432]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800288a:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	4963      	ldr	r1, [pc, #396]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028ac:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ba:	495b      	ldr	r1, [pc, #364]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	4952      	ldr	r1, [pc, #328]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f0:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	494a      	ldr	r1, [pc, #296]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002912:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	4941      	ldr	r1, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002934:	4b3c      	ldr	r3, [pc, #240]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	4939      	ldr	r1, [pc, #228]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002956:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	4930      	ldr	r1, [pc, #192]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002974:	d106      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f8f9 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d04d      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029bc:	d108      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029ce:	e012      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
 8002a0c:	e020      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a16:	d109      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	60d3      	str	r3, [r2, #12]
 8002a24:	e014      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f8a5 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a5c:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6a:	4947      	ldr	r1, [pc, #284]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
 8002a88:	e011      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a92:	d10c      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f876 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aba:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aca:	492f      	ldr	r1, [pc, #188]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f851 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0a:	f023 0204 	bic.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b14:	491c      	ldr	r1, [pc, #112]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2e:	f023 0218 	bic.w	r2, r3, #24
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	4913      	ldr	r1, [pc, #76]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	490a      	ldr	r1, [pc, #40]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b9a:	4b72      	ldr	r3, [pc, #456]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ba6:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d103      	bne.n	8002bbe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d142      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e03f      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d018      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x72>
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d825      	bhi.n	8002c1c <RCCEx_PLLSAI1_Config+0x90>
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d002      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x4e>
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d009      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0x60>
 8002bd8:	e020      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11d      	bne.n	8002c22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e01a      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bec:	4b5d      	ldr	r3, [pc, #372]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e013      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bfe:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c0a:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c1a:	e006      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e004      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002c32:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4949      	ldr	r1, [pc, #292]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8086 	bne.w	8002d58 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c58:	f7fe f93a 	bl	8000ed0 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c5e:	e009      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c60:	f7fe f936 	bl	8000ed0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	73fb      	strb	r3, [r7, #15]
        break;
 8002c72:	e005      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c74:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ef      	bne.n	8002c60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d168      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d113      	bne.n	8002cb4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	0211      	lsls	r1, r2, #8
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68d2      	ldr	r2, [r2, #12]
 8002c9e:	06d2      	lsls	r2, r2, #27
 8002ca0:	4311      	orrs	r1, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6852      	ldr	r2, [r2, #4]
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	430a      	orrs	r2, r1
 8002cac:	492d      	ldr	r1, [pc, #180]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	610b      	str	r3, [r1, #16]
 8002cb2:	e02d      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d115      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6912      	ldr	r2, [r2, #16]
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0552      	lsls	r2, r2, #21
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6852      	ldr	r2, [r2, #4]
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4921      	ldr	r1, [pc, #132]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	610b      	str	r3, [r1, #16]
 8002ce4:	e014      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	0211      	lsls	r1, r2, #8
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6952      	ldr	r2, [r2, #20]
 8002cf8:	0852      	lsrs	r2, r2, #1
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	0652      	lsls	r2, r2, #25
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6852      	ldr	r2, [r2, #4]
 8002d04:	3a01      	subs	r2, #1
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	4916      	ldr	r1, [pc, #88]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe f8d8 	bl	8000ed0 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d24:	f7fe f8d4 	bl	8000ed0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
          break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ef      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4904      	ldr	r1, [pc, #16]	; (8002d64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	07ff800f 	.word	0x07ff800f
 8002d6c:	ff9f800f 	.word	0xff9f800f
 8002d70:	f9ff800f 	.word	0xf9ff800f

08002d74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00e      	beq.n	8002dac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d103      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
       ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d142      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e03f      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d018      	beq.n	8002de6 <RCCEx_PLLSAI2_Config+0x72>
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d825      	bhi.n	8002e04 <RCCEx_PLLSAI2_Config+0x90>
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d002      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0x4e>
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d009      	beq.n	8002dd4 <RCCEx_PLLSAI2_Config+0x60>
 8002dc0:	e020      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc2:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11d      	bne.n	8002e0a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd2:	e01a      	b.n	8002e0a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd4:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de4:	e013      	b.n	8002e0e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e02:	e006      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      break;
 8002e08:	e004      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4949      	ldr	r1, [pc, #292]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8086 	bne.w	8002f40 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a44      	ldr	r2, [pc, #272]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f846 	bl	8000ed0 <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e46:	e009      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e48:	f7fe f842 	bl	8000ed0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	73fb      	strb	r3, [r7, #15]
        break;
 8002e5a:	e005      	b.n	8002e68 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ef      	bne.n	8002e48 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d168      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d113      	bne.n	8002e9c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	0211      	lsls	r1, r2, #8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	06d2      	lsls	r2, r2, #27
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6852      	ldr	r2, [r2, #4]
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	430a      	orrs	r2, r1
 8002e94:	492d      	ldr	r1, [pc, #180]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	614b      	str	r3, [r1, #20]
 8002e9a:	e02d      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d115      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0211      	lsls	r1, r2, #8
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6912      	ldr	r2, [r2, #16]
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0552      	lsls	r2, r2, #21
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6852      	ldr	r2, [r2, #4]
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4921      	ldr	r1, [pc, #132]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	614b      	str	r3, [r1, #20]
 8002ecc:	e014      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0211      	lsls	r1, r2, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6952      	ldr	r2, [r2, #20]
 8002ee0:	0852      	lsrs	r2, r2, #1
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	0652      	lsls	r2, r2, #25
 8002ee6:	4311      	orrs	r1, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4916      	ldr	r1, [pc, #88]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fd ffe4 	bl	8000ed0 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fd ffe0 	bl	8000ed0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	07ff800f 	.word	0x07ff800f
 8002f54:	ff9f800f 	.word	0xff9f800f
 8002f58:	f9ff800f 	.word	0xf9ff800f

08002f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e042      	b.n	8002ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd fe5f 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2224      	movs	r2, #36	; 0x24
 8002f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 ff44 	bl	8003e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc45 	bl	800383c <UART_SetConfig>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01b      	b.n	8002ff4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 ffc3 	bl	8003f78 <UART_CheckIdleState>
 8002ff2:	4603      	mov	r3, r0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	2b20      	cmp	r3, #32
 8003014:	d17c      	bne.n	8003110 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_UART_Transmit+0x26>
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e075      	b.n	8003112 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2221      	movs	r2, #33	; 0x21
 8003032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003036:	f7fd ff4b 	bl	8000ed0 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d108      	bne.n	8003068 <HAL_UART_Transmit+0x6c>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e003      	b.n	8003070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003070:	e031      	b.n	80030d6 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f001 f825 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03e      	b.n	8003112 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a6:	b292      	uxth	r2, r2
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3302      	adds	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e008      	b.n	80030c4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b292      	uxth	r2, r2
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1c7      	bne.n	8003072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 ffed 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e006      	b.n	8003112 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	2b20      	cmp	r3, #32
 8003132:	d137      	bne.n	80031a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_UART_Receive_IT+0x24>
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e030      	b.n	80031a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_UART_Receive_IT+0x94>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01f      	beq.n	8003194 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	613b      	str	r3, [r7, #16]
   return(result);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	69f9      	ldr	r1, [r7, #28]
 8003186:	6a3a      	ldr	r2, [r7, #32]
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	61bb      	str	r3, [r7, #24]
   return(result);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e6      	bne.n	8003162 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fffe 	bl	800419c <UART_Start_Receive_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40008000 	.word	0x40008000

080031b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0ba      	sub	sp, #232	; 0xe8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031de:	f640 030f 	movw	r3, #2063	; 0x80f
 80031e2:	4013      	ands	r3, r2
 80031e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11b      	bne.n	8003228 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 82e3 	beq.w	80037e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
      }
      return;
 8003226:	e2dd      	b.n	80037e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8123 	beq.w	8003478 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003232:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003236:	4b8d      	ldr	r3, [pc, #564]	; (800346c <HAL_UART_IRQHandler+0x2b8>)
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800323e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003242:	4b8b      	ldr	r3, [pc, #556]	; (8003470 <HAL_UART_IRQHandler+0x2bc>)
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8116 	beq.w	8003478 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d011      	beq.n	800327c <HAL_UART_IRQHandler+0xc8>
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d011      	beq.n	80032ac <HAL_UART_IRQHandler+0xf8>
 8003288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2202      	movs	r2, #2
 800329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d011      	beq.n	80032dc <HAL_UART_IRQHandler+0x128>
 80032b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2204      	movs	r2, #4
 80032ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032f8:	4b5c      	ldr	r3, [pc, #368]	; (800346c <HAL_UART_IRQHandler+0x2b8>)
 80032fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <HAL_UART_IRQHandler+0x196>
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8249 	beq.w	80037e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d013      	beq.n	800338a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800336e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d005      	beq.n	80033ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d054      	beq.n	8003458 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f001 f816 	bl	80043e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d146      	bne.n	8003450 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1d9      	bne.n	80033c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d017      	beq.n	8003448 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341e:	4a15      	ldr	r2, [pc, #84]	; (8003474 <HAL_UART_IRQHandler+0x2c0>)
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd feca 	bl	80011c2 <HAL_DMA_Abort_IT>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d019      	beq.n	8003468 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003442:	4610      	mov	r0, r2
 8003444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	e00f      	b.n	8003468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f9e1 	bl	8003810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	e00b      	b.n	8003468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9dd 	bl	8003810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	e007      	b.n	8003468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9d9 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003466:	e1bf      	b.n	80037e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	bf00      	nop
    return;
 800346a:	e1bd      	b.n	80037e8 <HAL_UART_IRQHandler+0x634>
 800346c:	10000001 	.word	0x10000001
 8003470:	04000120 	.word	0x04000120
 8003474:	080044ad 	.word	0x080044ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347c:	2b01      	cmp	r3, #1
 800347e:	f040 8153 	bne.w	8003728 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 814c 	beq.w	8003728 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8145 	beq.w	8003728 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	f040 80bb 	bne.w	800362c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 818f 	beq.w	80037ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034d8:	429a      	cmp	r2, r3
 80034da:	f080 8187 	bcs.w	80037ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8087 	bne.w	800360a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800352a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800353e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1da      	bne.n	80034fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800356a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800356e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800357c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e1      	bne.n	8003546 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3308      	adds	r3, #8
 8003588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e3      	bne.n	8003582 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d8:	f023 0310 	bic.w	r3, r3, #16
 80035dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e4      	bne.n	80035c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fd80 	bl	800110a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8fd 	bl	8003824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362a:	e0df      	b.n	80037ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003638:	b29b      	uxth	r3, r3
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80d1 	beq.w	80037f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800364e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80cc 	beq.w	80037f0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800366c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
 800367c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e4      	bne.n	8003658 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	623b      	str	r3, [r7, #32]
   return(result);
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3308      	adds	r3, #8
 80036b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036b6:	633a      	str	r2, [r7, #48]	; 0x30
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e1      	bne.n	800368e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	617b      	str	r3, [r7, #20]
   return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e4      	bne.n	80036de <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800371a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f87f 	bl	8003824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003726:	e063      	b.n	80037f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <HAL_UART_IRQHandler+0x59e>
 8003734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f001 fc14 	bl	8004f78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003750:	e051      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800375e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03a      	beq.n	80037f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
    }
    return;
 8003786:	e035      	b.n	80037f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_UART_IRQHandler+0x5f4>
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fe99 	bl	80044d8 <UART_EndTransmit_IT>
    return;
 80037a6:	e026      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_UART_IRQHandler+0x614>
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f001 fbed 	bl	8004fa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037c6:	e016      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_UART_IRQHandler+0x642>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da0c      	bge.n	80037f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f001 fbd5 	bl	8004f8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037e2:	e008      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
      return;
 80037e4:	bf00      	nop
 80037e6:	e006      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
    return;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
      return;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
      return;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_UART_IRQHandler+0x642>
    return;
 80037f4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80037f6:	37e8      	adds	r7, #232	; 0xe8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b08c      	sub	sp, #48	; 0x30
 8003842:	af00      	add	r7, sp, #0
 8003844:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	431a      	orrs	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	431a      	orrs	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4313      	orrs	r3, r2
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4baa      	ldr	r3, [pc, #680]	; (8003b14 <UART_SetConfig+0x2d8>)
 800386c:	4013      	ands	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003874:	430b      	orrs	r3, r1
 8003876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a9f      	ldr	r2, [pc, #636]	; (8003b18 <UART_SetConfig+0x2dc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f023 010f 	bic.w	r1, r3, #15
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a90      	ldr	r2, [pc, #576]	; (8003b1c <UART_SetConfig+0x2e0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d125      	bne.n	800392c <UART_SetConfig+0xf0>
 80038e0:	4b8f      	ldr	r3, [pc, #572]	; (8003b20 <UART_SetConfig+0x2e4>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d81a      	bhi.n	8003924 <UART_SetConfig+0xe8>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0xb8>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003915 	.word	0x08003915
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	0800391d 	.word	0x0800391d
 8003904:	2301      	movs	r3, #1
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390a:	e116      	b.n	8003b3a <UART_SetConfig+0x2fe>
 800390c:	2302      	movs	r3, #2
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003912:	e112      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003914:	2304      	movs	r3, #4
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391a:	e10e      	b.n	8003b3a <UART_SetConfig+0x2fe>
 800391c:	2308      	movs	r3, #8
 800391e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003922:	e10a      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003924:	2310      	movs	r3, #16
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800392a:	e106      	b.n	8003b3a <UART_SetConfig+0x2fe>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a7c      	ldr	r2, [pc, #496]	; (8003b24 <UART_SetConfig+0x2e8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d138      	bne.n	80039a8 <UART_SetConfig+0x16c>
 8003936:	4b7a      	ldr	r3, [pc, #488]	; (8003b20 <UART_SetConfig+0x2e4>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d82d      	bhi.n	80039a0 <UART_SetConfig+0x164>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x110>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003981 	.word	0x08003981
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039a1 	.word	0x080039a1
 8003958:	080039a1 	.word	0x080039a1
 800395c:	08003991 	.word	0x08003991
 8003960:	080039a1 	.word	0x080039a1
 8003964:	080039a1 	.word	0x080039a1
 8003968:	080039a1 	.word	0x080039a1
 800396c:	08003989 	.word	0x08003989
 8003970:	080039a1 	.word	0x080039a1
 8003974:	080039a1 	.word	0x080039a1
 8003978:	080039a1 	.word	0x080039a1
 800397c:	08003999 	.word	0x08003999
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e0d8      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398e:	e0d4      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e0d0      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e0cc      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a6:	e0c8      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <UART_SetConfig+0x2ec>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d125      	bne.n	80039fe <UART_SetConfig+0x1c2>
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <UART_SetConfig+0x2e4>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d016      	beq.n	80039ee <UART_SetConfig+0x1b2>
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d818      	bhi.n	80039f6 <UART_SetConfig+0x1ba>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d00a      	beq.n	80039de <UART_SetConfig+0x1a2>
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d814      	bhi.n	80039f6 <UART_SetConfig+0x1ba>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <UART_SetConfig+0x19a>
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d008      	beq.n	80039e6 <UART_SetConfig+0x1aa>
 80039d4:	e00f      	b.n	80039f6 <UART_SetConfig+0x1ba>
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039dc:	e0ad      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039de:	2302      	movs	r3, #2
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e4:	e0a9      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039e6:	2304      	movs	r3, #4
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ec:	e0a5      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039ee:	2308      	movs	r3, #8
 80039f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039f4:	e0a1      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039f6:	2310      	movs	r3, #16
 80039f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fc:	e09d      	b.n	8003b3a <UART_SetConfig+0x2fe>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <UART_SetConfig+0x2f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d125      	bne.n	8003a54 <UART_SetConfig+0x218>
 8003a08:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <UART_SetConfig+0x2e4>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a12:	2bc0      	cmp	r3, #192	; 0xc0
 8003a14:	d016      	beq.n	8003a44 <UART_SetConfig+0x208>
 8003a16:	2bc0      	cmp	r3, #192	; 0xc0
 8003a18:	d818      	bhi.n	8003a4c <UART_SetConfig+0x210>
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d00a      	beq.n	8003a34 <UART_SetConfig+0x1f8>
 8003a1e:	2b80      	cmp	r3, #128	; 0x80
 8003a20:	d814      	bhi.n	8003a4c <UART_SetConfig+0x210>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <UART_SetConfig+0x1f0>
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d008      	beq.n	8003a3c <UART_SetConfig+0x200>
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x210>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e082      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e07e      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e07a      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e076      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a52:	e072      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <UART_SetConfig+0x2f4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12a      	bne.n	8003ab4 <UART_SetConfig+0x278>
 8003a5e:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <UART_SetConfig+0x2e4>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6c:	d01a      	beq.n	8003aa4 <UART_SetConfig+0x268>
 8003a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a72:	d81b      	bhi.n	8003aac <UART_SetConfig+0x270>
 8003a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a78:	d00c      	beq.n	8003a94 <UART_SetConfig+0x258>
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7e:	d815      	bhi.n	8003aac <UART_SetConfig+0x270>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0x250>
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d008      	beq.n	8003a9c <UART_SetConfig+0x260>
 8003a8a:	e00f      	b.n	8003aac <UART_SetConfig+0x270>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	e052      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9a:	e04e      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa2:	e04a      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aaa:	e046      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003aac:	2310      	movs	r3, #16
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab2:	e042      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <UART_SetConfig+0x2dc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d13a      	bne.n	8003b34 <UART_SetConfig+0x2f8>
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <UART_SetConfig+0x2e4>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003acc:	d01a      	beq.n	8003b04 <UART_SetConfig+0x2c8>
 8003ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad2:	d81b      	bhi.n	8003b0c <UART_SetConfig+0x2d0>
 8003ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad8:	d00c      	beq.n	8003af4 <UART_SetConfig+0x2b8>
 8003ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ade:	d815      	bhi.n	8003b0c <UART_SetConfig+0x2d0>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <UART_SetConfig+0x2b0>
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae8:	d008      	beq.n	8003afc <UART_SetConfig+0x2c0>
 8003aea:	e00f      	b.n	8003b0c <UART_SetConfig+0x2d0>
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e022      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003af4:	2302      	movs	r3, #2
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afa:	e01e      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003afc:	2304      	movs	r3, #4
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b02:	e01a      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003b04:	2308      	movs	r3, #8
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0a:	e016      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b12:	e012      	b.n	8003b3a <UART_SetConfig+0x2fe>
 8003b14:	cfff69f3 	.word	0xcfff69f3
 8003b18:	40008000 	.word	0x40008000
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40004800 	.word	0x40004800
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	40005000 	.word	0x40005000
 8003b34:	2310      	movs	r3, #16
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4aae      	ldr	r2, [pc, #696]	; (8003df8 <UART_SetConfig+0x5bc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f040 8097 	bne.w	8003c74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d823      	bhi.n	8003b96 <UART_SetConfig+0x35a>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0x318>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b97 	.word	0x08003b97
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b97 	.word	0x08003b97
 8003b64:	08003b87 	.word	0x08003b87
 8003b68:	08003b97 	.word	0x08003b97
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003b97 	.word	0x08003b97
 8003b74:	08003b8f 	.word	0x08003b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe fbec 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b7e:	e010      	b.n	8003ba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b80:	4b9e      	ldr	r3, [pc, #632]	; (8003dfc <UART_SetConfig+0x5c0>)
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b84:	e00d      	b.n	8003ba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b86:	f7fe fb4d 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b8c:	e009      	b.n	8003ba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b94:	e005      	b.n	8003ba2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8130 	beq.w	8003e0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	4a94      	ldr	r2, [pc, #592]	; (8003e00 <UART_SetConfig+0x5c4>)
 8003bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d305      	bcc.n	8003bda <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d903      	bls.n	8003be2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003be0:	e113      	b.n	8003e0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2200      	movs	r2, #0
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	60fa      	str	r2, [r7, #12]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	4a84      	ldr	r2, [pc, #528]	; (8003e00 <UART_SetConfig+0x5c4>)
 8003bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c04:	f7fc fafa 	bl	80001fc <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	020b      	lsls	r3, r1, #8
 8003c1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c1e:	0202      	lsls	r2, r0, #8
 8003c20:	6979      	ldr	r1, [r7, #20]
 8003c22:	6849      	ldr	r1, [r1, #4]
 8003c24:	0849      	lsrs	r1, r1, #1
 8003c26:	2000      	movs	r0, #0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	eb12 0804 	adds.w	r8, r2, r4
 8003c30:	eb43 0905 	adc.w	r9, r3, r5
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	469a      	mov	sl, r3
 8003c3c:	4693      	mov	fp, r2
 8003c3e:	4652      	mov	r2, sl
 8003c40:	465b      	mov	r3, fp
 8003c42:	4640      	mov	r0, r8
 8003c44:	4649      	mov	r1, r9
 8003c46:	f7fc fad9 	bl	80001fc <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c58:	d308      	bcc.n	8003c6c <UART_SetConfig+0x430>
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c60:	d204      	bcs.n	8003c6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a3a      	ldr	r2, [r7, #32]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e0ce      	b.n	8003e0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c72:	e0ca      	b.n	8003e0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d166      	bne.n	8003d4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d827      	bhi.n	8003cd6 <UART_SetConfig+0x49a>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0x450>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7fe fb50 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cb6:	e014      	b.n	8003ce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7fe fb62 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cbe:	e010      	b.n	8003ce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <UART_SetConfig+0x5c0>)
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cc4:	e00d      	b.n	8003ce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7fe faad 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003cca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ccc:	e009      	b.n	8003ce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd4:	e005      	b.n	8003ce2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8090 	beq.w	8003e0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	4a44      	ldr	r2, [pc, #272]	; (8003e00 <UART_SetConfig+0x5c4>)
 8003cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cfc:	005a      	lsls	r2, r3, #1
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	441a      	add	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	d916      	bls.n	8003d44 <UART_SetConfig+0x508>
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d212      	bcs.n	8003d44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f023 030f 	bic.w	r3, r3, #15
 8003d26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	8bfa      	ldrh	r2, [r7, #30]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	e062      	b.n	8003e0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d4a:	e05e      	b.n	8003e0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d828      	bhi.n	8003da6 <UART_SetConfig+0x56a>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x520>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe fae8 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d86:	e014      	b.n	8003db2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fafa 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d8e:	e010      	b.n	8003db2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <UART_SetConfig+0x5c0>)
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d94:	e00d      	b.n	8003db2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe fa45 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d9c:	e009      	b.n	8003db2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003da4:	e005      	b.n	8003db2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003db0:	bf00      	nop
    }

    if (pclk != 0U)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d028      	beq.n	8003e0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <UART_SetConfig+0x5c4>)
 8003dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	441a      	add	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d910      	bls.n	8003e04 <UART_SetConfig+0x5c8>
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d20c      	bcs.n	8003e04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	e009      	b.n	8003e0a <UART_SetConfig+0x5ce>
 8003df6:	bf00      	nop
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	08005280 	.word	0x08005280
      }
      else
      {
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003e26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	; 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f32:	d10a      	bne.n	8003f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b098      	sub	sp, #96	; 0x60
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f88:	f7fc ffa2 	bl	8000ed0 <HAL_GetTick>
 8003f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d12f      	bne.n	8003ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f88e 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d022      	beq.n	8003ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e063      	b.n	80040c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b04      	cmp	r3, #4
 8004008:	d149      	bne.n	800409e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004012:	2200      	movs	r2, #0
 8004014:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f857 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d03c      	beq.n	800409e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	623b      	str	r3, [r7, #32]
   return(result);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
 8004044:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e6      	bne.n	8004024 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	60fb      	str	r3, [r7, #12]
   return(result);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	64bb      	str	r3, [r7, #72]	; 0x48
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004076:	61fa      	str	r2, [r7, #28]
 8004078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	69b9      	ldr	r1, [r7, #24]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	617b      	str	r3, [r7, #20]
   return(result);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e012      	b.n	80040c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3758      	adds	r7, #88	; 0x58
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	e049      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e4:	d045      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fc fef3 	bl	8000ed0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <UART_WaitOnFlagUntilTimeout+0x30>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e048      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d031      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d110      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f95b 	bl	80043e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2208      	movs	r2, #8
 800412e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e029      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d111      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f941 	bl	80043e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e00f      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d0a6      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419c:	b480      	push	{r7}
 800419e:	b0a3      	sub	sp, #140	; 0x8c
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d10e      	bne.n	80041ee <UART_Start_Receive_IT+0x52>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <UART_Start_Receive_IT+0x48>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041e2:	e02d      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	22ff      	movs	r2, #255	; 0xff
 80041e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041ec:	e028      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <UART_Start_Receive_IT+0x76>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <UART_Start_Receive_IT+0x6c>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	22ff      	movs	r2, #255	; 0xff
 8004202:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004206:	e01b      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	227f      	movs	r2, #127	; 0x7f
 800420c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004210:	e016      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421a:	d10d      	bne.n	8004238 <UART_Start_Receive_IT+0x9c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <UART_Start_Receive_IT+0x92>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	227f      	movs	r2, #127	; 0x7f
 8004228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800422c:	e008      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	223f      	movs	r2, #63	; 0x3f
 8004232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004236:	e003      	b.n	8004240 <UART_Start_Receive_IT+0xa4>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2222      	movs	r2, #34	; 0x22
 800424c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004274:	673a      	str	r2, [r7, #112]	; 0x70
 8004276:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800427a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e3      	bne.n	8004250 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004290:	d14f      	bne.n	8004332 <UART_Start_Receive_IT+0x196>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	429a      	cmp	r2, r3
 800429c:	d349      	bcc.n	8004332 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a6:	d107      	bne.n	80042b8 <UART_Start_Receive_IT+0x11c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a47      	ldr	r2, [pc, #284]	; (80043d0 <UART_Start_Receive_IT+0x234>)
 80042b4:	675a      	str	r2, [r3, #116]	; 0x74
 80042b6:	e002      	b.n	80042be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a46      	ldr	r2, [pc, #280]	; (80043d4 <UART_Start_Receive_IT+0x238>)
 80042bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e4      	bne.n	80042c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800431c:	64ba      	str	r2, [r7, #72]	; 0x48
 800431e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_Start_Receive_IT+0x160>
 8004330:	e046      	b.n	80043c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d107      	bne.n	800434c <UART_Start_Receive_IT+0x1b0>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <UART_Start_Receive_IT+0x23c>)
 8004348:	675a      	str	r2, [r3, #116]	; 0x74
 800434a:	e002      	b.n	8004352 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <UART_Start_Receive_IT+0x240>)
 8004350:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d019      	beq.n	800438e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800436e:	677b      	str	r3, [r7, #116]	; 0x74
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
 800437a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_Start_Receive_IT+0x1be>
 800438c:	e018      	b.n	80043c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f043 0320 	orr.w	r3, r3, #32
 80043a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	378c      	adds	r7, #140	; 0x8c
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	08004c0d 	.word	0x08004c0d
 80043d4:	080048a9 	.word	0x080048a9
 80043d8:	080046ed 	.word	0x080046ed
 80043dc:	08004531 	.word	0x08004531

080043e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b095      	sub	sp, #84	; 0x54
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
 8004408:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800440c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e6      	bne.n	80043e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	61fb      	str	r3, [r7, #28]
   return(result);
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800443e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e3      	bne.n	800441a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d118      	bne.n	800448c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	60bb      	str	r3, [r7, #8]
   return(result);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	647b      	str	r3, [r7, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6979      	ldr	r1, [r7, #20]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	613b      	str	r3, [r7, #16]
   return(result);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80044a0:	bf00      	nop
 80044a2:	3754      	adds	r7, #84	; 0x54
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff f9a0 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e6      	bne.n	80044e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff f96b 	bl	80037fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004526:	bf00      	nop
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b09c      	sub	sp, #112	; 0x70
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800453e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004548:	2b22      	cmp	r3, #34	; 0x22
 800454a:	f040 80be 	bne.w	80046ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800455c:	b2d9      	uxtb	r1, r3
 800455e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004562:	b2da      	uxtb	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	400a      	ands	r2, r1
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80a3 	bne.w	80046de <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3308      	adds	r3, #8
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	667b      	str	r3, [r7, #100]	; 0x64
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3308      	adds	r3, #8
 80045e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80045ea:	647a      	str	r2, [r7, #68]	; 0x44
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <UART_RxISR_8BIT+0x1b8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01f      	beq.n	800465c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	623b      	str	r3, [r7, #32]
   return(result);
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463e:	663b      	str	r3, [r7, #96]	; 0x60
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
 800464a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800464e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d12e      	bne.n	80046c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	60fb      	str	r3, [r7, #12]
   return(result);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	617b      	str	r3, [r7, #20]
   return(result);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d103      	bne.n	80046b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff f8b2 	bl	8003824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046c0:	e00d      	b.n	80046de <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fb ff6a 	bl	800059c <HAL_UART_RxCpltCallback>
}
 80046c8:	e009      	b.n	80046de <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	8b1b      	ldrh	r3, [r3, #24]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	b292      	uxth	r2, r2
 80046dc:	831a      	strh	r2, [r3, #24]
}
 80046de:	bf00      	nop
 80046e0:	3770      	adds	r7, #112	; 0x70
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40008000 	.word	0x40008000

080046ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b09c      	sub	sp, #112	; 0x70
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80046fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004704:	2b22      	cmp	r3, #34	; 0x22
 8004706:	f040 80be 	bne.w	8004886 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004710:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800471a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800471e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004722:	4013      	ands	r3, r2
 8004724:	b29a      	uxth	r2, r3
 8004726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 80a3 	bne.w	800489a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004768:	667b      	str	r3, [r7, #100]	; 0x64
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
 8004774:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3308      	adds	r3, #8
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	663b      	str	r3, [r7, #96]	; 0x60
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047a6:	643a      	str	r2, [r7, #64]	; 0x40
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <UART_RxISR_16BIT+0x1b8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01f      	beq.n	8004818 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004806:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e6      	bne.n	80047e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d12e      	bne.n	800487e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	60bb      	str	r3, [r7, #8]
   return(result);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0310 	bic.w	r3, r3, #16
 800483a:	65bb      	str	r3, [r7, #88]	; 0x58
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e6      	bne.n	8004826 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b10      	cmp	r3, #16
 8004864:	d103      	bne.n	800486e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2210      	movs	r2, #16
 800486c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fe ffd4 	bl	8003824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800487c:	e00d      	b.n	800489a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fb fe8c 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8004884:	e009      	b.n	800489a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	8b1b      	ldrh	r3, [r3, #24]
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0208 	orr.w	r2, r2, #8
 8004896:	b292      	uxth	r2, r2
 8004898:	831a      	strh	r2, [r3, #24]
}
 800489a:	bf00      	nop
 800489c:	3770      	adds	r7, #112	; 0x70
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40008000 	.word	0x40008000

080048a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b0ac      	sub	sp, #176	; 0xb0
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048de:	2b22      	cmp	r3, #34	; 0x22
 80048e0:	f040 8182 	bne.w	8004be8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80048ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048ee:	e125      	b.n	8004b3c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80048fe:	b2d9      	uxtb	r1, r3
 8004900:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004904:	b2da      	uxtb	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	400a      	ands	r2, r1
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	2b00      	cmp	r3, #0
 8004940:	d053      	beq.n	80049ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <UART_RxISR_8BIT_FIFOEN+0xca>
 800494e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800497e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2202      	movs	r2, #2
 8004990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f043 0204 	orr.w	r2, r3, #4
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80049ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2204      	movs	r2, #4
 80049c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f043 0202 	orr.w	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fe ff17 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 80a2 	bne.w	8004b3c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a1c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e4      	bne.n	80049f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a56:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a58:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e1      	bne.n	8004a2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a60      	ldr	r2, [pc, #384]	; (8004c04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d021      	beq.n	8004acc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01a      	beq.n	8004acc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004abe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e4      	bne.n	8004a96 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d130      	bne.n	8004b36 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afc:	643b      	str	r3, [r7, #64]	; 0x40
 8004afe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e4      	bne.n	8004ada <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d103      	bne.n	8004b26 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2210      	movs	r2, #16
 8004b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fe fe78 	bl	8003824 <HAL_UARTEx_RxEventCallback>
 8004b34:	e002      	b.n	8004b3c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fb fd30 	bl	800059c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b3c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f47f aecf 	bne.w	80048f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d04b      	beq.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0x354>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b6a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d244      	bcs.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e3      	bne.n	8004b72 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004bae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f043 0320 	orr.w	r3, r3, #32
 8004bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	613b      	str	r3, [r7, #16]
   return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e4      	bne.n	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004be6:	e009      	b.n	8004bfc <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	8b1b      	ldrh	r3, [r3, #24]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	831a      	strh	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	37b0      	adds	r7, #176	; 0xb0
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40008000 	.word	0x40008000
 8004c08:	08004531 	.word	0x08004531

08004c0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b0ae      	sub	sp, #184	; 0xb8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	2b22      	cmp	r3, #34	; 0x22
 8004c44:	f040 8186 	bne.w	8004f54 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c52:	e129      	b.n	8004ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004c6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	1c9a      	adds	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d053      	beq.n	8004d52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d011      	beq.n	8004cda <UART_RxISR_16BIT_FIFOEN+0xce>
 8004cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f043 0204 	orr.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d011      	beq.n	8004d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2204      	movs	r2, #4
 8004d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f043 0202 	orr.w	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d006      	beq.n	8004d52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fe fd63 	bl	8003810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 80a4 	bne.w	8004ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d86:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e2      	bne.n	8004d60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e1      	bne.n	8004d9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a60      	ldr	r2, [pc, #384]	; (8004f70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d021      	beq.n	8004e38 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01a      	beq.n	8004e38 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e4      	bne.n	8004e02 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d130      	bne.n	8004ea2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e4      	bne.n	8004e46 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d103      	bne.n	8004e92 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fe fcc2 	bl	8003824 <HAL_UARTEx_RxEventCallback>
 8004ea0:	e002      	b.n	8004ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fb fb7a 	bl	800059c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ea8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f47f aecb 	bne.w	8004c54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ec4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ec8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d04b      	beq.n	8004f68 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ed6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d244      	bcs.n	8004f68 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004f02:	633a      	str	r2, [r7, #48]	; 0x30
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004f1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f043 0320 	orr.w	r3, r3, #32
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	69b9      	ldr	r1, [r7, #24]
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e4      	bne.n	8004f1c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f52:	e009      	b.n	8004f68 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	8b1b      	ldrh	r3, [r3, #24]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0208 	orr.w	r2, r2, #8
 8004f64:	b292      	uxth	r2, r2
 8004f66:	831a      	strh	r2, [r3, #24]
}
 8004f68:	bf00      	nop
 8004f6a:	37b8      	adds	r7, #184	; 0xb8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40008000 	.word	0x40008000
 8004f74:	080046ed 	.word	0x080046ed

08004f78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UARTEx_DisableFifoMode+0x16>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e027      	b.n	800501a <HAL_UARTEx_DisableFifoMode+0x66>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800503a:	2302      	movs	r3, #2
 800503c:	e02d      	b.n	800509a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f850 	bl	8005120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e02d      	b.n	8005116 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f812 	bl	8005120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512c:	2b00      	cmp	r3, #0
 800512e:	d108      	bne.n	8005142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005140:	e031      	b.n	80051a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005142:	2308      	movs	r3, #8
 8005144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005146:	2308      	movs	r3, #8
 8005148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	0e5b      	lsrs	r3, r3, #25
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	0f5b      	lsrs	r3, r3, #29
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	7b3a      	ldrb	r2, [r7, #12]
 800516e:	4911      	ldr	r1, [pc, #68]	; (80051b4 <UARTEx_SetNbDataToProcess+0x94>)
 8005170:	5c8a      	ldrb	r2, [r1, r2]
 8005172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005176:	7b3a      	ldrb	r2, [r7, #12]
 8005178:	490f      	ldr	r1, [pc, #60]	; (80051b8 <UARTEx_SetNbDataToProcess+0x98>)
 800517a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800517c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	7b7a      	ldrb	r2, [r7, #13]
 800518c:	4909      	ldr	r1, [pc, #36]	; (80051b4 <UARTEx_SetNbDataToProcess+0x94>)
 800518e:	5c8a      	ldrb	r2, [r1, r2]
 8005190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005194:	7b7a      	ldrb	r2, [r7, #13]
 8005196:	4908      	ldr	r1, [pc, #32]	; (80051b8 <UARTEx_SetNbDataToProcess+0x98>)
 8005198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800519a:	fb93 f3f2 	sdiv	r3, r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	08005298 	.word	0x08005298
 80051b8:	080052a0 	.word	0x080052a0

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4d0d      	ldr	r5, [pc, #52]	; (8005204 <__libc_init_array+0x38>)
 80051d0:	4c0d      	ldr	r4, [pc, #52]	; (8005208 <__libc_init_array+0x3c>)
 80051d2:	1b64      	subs	r4, r4, r5
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2600      	movs	r6, #0
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	4d0b      	ldr	r5, [pc, #44]	; (800520c <__libc_init_array+0x40>)
 80051de:	4c0c      	ldr	r4, [pc, #48]	; (8005210 <__libc_init_array+0x44>)
 80051e0:	f000 f818 	bl	8005214 <_init>
 80051e4:	1b64      	subs	r4, r4, r5
 80051e6:	10a4      	asrs	r4, r4, #2
 80051e8:	2600      	movs	r6, #0
 80051ea:	42a6      	cmp	r6, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f4:	4798      	blx	r3
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fe:	4798      	blx	r3
 8005200:	3601      	adds	r6, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	080052b0 	.word	0x080052b0
 8005208:	080052b0 	.word	0x080052b0
 800520c:	080052b0 	.word	0x080052b0
 8005210:	080052b4 	.word	0x080052b4

08005214 <_init>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr

08005220 <_fini>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	bf00      	nop
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr
