
lockbox_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b1c  08008b1c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b24  08008b24  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000014  08008b40  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08008b40  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019570  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca4  00000000  00000000  000395f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001106  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c773  00000000  00000000  0003e946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab69  00000000  00000000  0006b0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011acfa  00000000  00000000  00085c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d48  00000000  00000000  001a091c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001a6664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008a44 	.word	0x08008a44

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08008a44 	.word	0x08008a44

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x50) // 0x40 if ignoring r/w // for small LCD 0x4E // change this according to ur setup

extern uint32_t* tim_4_ccr2;

void lcd_send_cmd (char cmd) //everything needs to start with FE then the comand. Dont know why its a char
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af02      	add	r7, sp, #8
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[2];
	data_t[0] = 0xFE;
 8000526:	23fe      	movs	r3, #254	; 0xfe
 8000528:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 2, 100);
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2302      	movs	r3, #2
 8000538:	2150      	movs	r1, #80	; 0x50
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <lcd_send_cmd+0x2c>)
 800053c:	f003 f8de 	bl	80036fc <HAL_I2C_Master_Transmit>


}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000098 	.word	0x20000098

0800054c <lcd_send_cmd_param>:

void lcd_send_cmd_param (char cmd, char param) //everything needs to start with FE then the comand. Dont know why its a char
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t data_t[3];
	data_t[0] = 0xFE;
 800055c:	23fe      	movs	r3, #254	; 0xfe
 800055e:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	737b      	strb	r3, [r7, #13]
	data_t[2] = param;
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 3, 100);
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2303      	movs	r3, #3
 8000572:	2150      	movs	r1, #80	; 0x50
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <lcd_send_cmd_param+0x38>)
 8000576:	f003 f8c1 	bl	80036fc <HAL_I2C_Master_Transmit>


}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000098 	.word	0x20000098

08000588 <lcd_send_data>:

void lcd_send_data (char data_in)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	//data_t[1] = 0xFE;
	data_t[0] = data_in;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 8000596:	f107 020c 	add.w	r2, r7, #12
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2150      	movs	r1, #80	; 0x50
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <lcd_send_data+0x28>)
 80005a4:	f003 f8aa 	bl	80036fc <HAL_I2C_Master_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000098 	.word	0x20000098

080005b4 <lcd_init>:


void lcd_init (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f001 fbaf 	bl	8001d1c <HAL_Delay>
	lcd_send_cmd (0x41); //turn on display
 80005be:	2041      	movs	r0, #65	; 0x41
 80005c0:	f7ff ffac 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x51); //clear display
 80005c4:	2051      	movs	r0, #81	; 0x51
 80005c6:	f7ff ffa9 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x46); //home the curser
 80005ca:	2046      	movs	r0, #70	; 0x46
 80005cc:	f7ff ffa6 	bl	800051c <lcd_send_cmd>

	//write password
	lcd_send_string("Password: ");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <lcd_init+0x34>)
 80005d2:	f000 f8c9 	bl	8000768 <lcd_send_string>

	lcd_send_cmd (0x47); //turn on underlying cursur
 80005d6:	2047      	movs	r0, #71	; 0x47
 80005d8:	f7ff ffa0 	bl	800051c <lcd_send_cmd>
	lcd_send_cmd (0x4B);
 80005dc:	204b      	movs	r0, #75	; 0x4b
 80005de:	f7ff ff9d 	bl	800051c <lcd_send_cmd>

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08008a5c 	.word	0x08008a5c

080005ec <close_door>:

void close_door (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//close door
		lcd_send_string("CLOSING");
 80005f0:	4812      	ldr	r0, [pc, #72]	; (800063c <close_door+0x50>)
 80005f2:	f000 f8b9 	bl	8000768 <lcd_send_string>
		HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG1, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <close_door+0x54>)
 80005fc:	f002 ffca 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG2, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2102      	movs	r1, #2
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <close_door+0x54>)
 8000606:	f002 ffc5 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800060a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800060e:	f001 fb85 	bl	8001d1c <HAL_Delay>
		lcd_send_cmd (0x51); //clear display
 8000612:	2051      	movs	r0, #81	; 0x51
 8000614:	f7ff ff82 	bl	800051c <lcd_send_cmd>
		lcd_send_cmd (0x46); //home the curser
 8000618:	2046      	movs	r0, #70	; 0x46
 800061a:	f7ff ff7f 	bl	800051c <lcd_send_cmd>
		lcd_send_string("Password: ");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <close_door+0x58>)
 8000620:	f000 f8a2 	bl	8000768 <lcd_send_string>

		lcd_send_cmd (0x47); //turn on underlying cursur
 8000624:	2047      	movs	r0, #71	; 0x47
 8000626:	f7ff ff79 	bl	800051c <lcd_send_cmd>
		lcd_send_cmd (0x4B);
 800062a:	204b      	movs	r0, #75	; 0x4b
 800062c:	f7ff ff76 	bl	800051c <lcd_send_cmd>
		open = false;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <close_door+0x5c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08008a68 	.word	0x08008a68
 8000640:	48001800 	.word	0x48001800
 8000644:	08008a5c 	.word	0x08008a5c
 8000648:	20000000 	.word	0x20000000

0800064c <read_IR>:

void read_IR (void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	if(open == true){
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <read_IR+0x60>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d024      	beq.n	80006a4 <read_IR+0x58>
		uint32_t ADC_VAL = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]

		//check if open or closed
		HAL_ADC_Start(&hadc1);//start conversion
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <read_IR+0x64>)
 8000660:	f001 fea0 	bl	80023a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <read_IR+0x64>)
 800066a:	f001 fefe 	bl	800246a <HAL_ADC_PollForConversion>
		ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <read_IR+0x64>)
 8000670:	f001 ff8a 	bl	8002588 <HAL_ADC_GetValue>
 8000674:	6078      	str	r0, [r7, #4]

		if(ADC_VAL > 750){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f240 22ee 	movw	r2, #750	; 0x2ee
 800067c:	4293      	cmp	r3, r2
 800067e:	d905      	bls.n	800068c <read_IR+0x40>
			IR_count++;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <read_IR+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <read_IR+0x68>)
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e002      	b.n	8000692 <read_IR+0x46>
		}
		else{IR_count = 0;}
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <read_IR+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
		if(IR_count >= 10){
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <read_IR+0x68>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b09      	cmp	r3, #9
 8000698:	dd04      	ble.n	80006a4 <read_IR+0x58>
			close_door();
 800069a:	f7ff ffa7 	bl	80005ec <close_door>
			IR_count = 0;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <read_IR+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
//		HAL_Delay(500);
//		lcd_send_cmd (0x51); //clear display


	}
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000030 	.word	0x20000030
 80006b4:	20000264 	.word	0x20000264

080006b8 <lcd_correct_pass>:
void lcd_correct_pass (void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	//write correct
	lcd_send_cmd_param(0x45, 0x40);
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	2045      	movs	r0, #69	; 0x45
 80006c0:	f7ff ff44 	bl	800054c <lcd_send_cmd_param>
	lcd_send_string("Correct$$$");
 80006c4:	4812      	ldr	r0, [pc, #72]	; (8000710 <lcd_correct_pass+0x58>)
 80006c6:	f000 f84f 	bl	8000768 <lcd_send_string>


	*tim_4_ccr2 =190 ;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <lcd_correct_pass+0x5c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	22be      	movs	r2, #190	; 0xbe
 80006d0:	601a      	str	r2, [r3, #0]
	HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f001 fb21 	bl	8001d1c <HAL_Delay>
	HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG1, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <lcd_correct_pass+0x60>)
 80006e0:	f002 ff58 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG2, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <lcd_correct_pass+0x60>)
 80006ea:	f002 ff53 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f001 fb13 	bl	8001d1c <HAL_Delay>
	*tim_4_ccr2 = 150;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <lcd_correct_pass+0x5c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2296      	movs	r2, #150	; 0x96
 80006fc:	601a      	str	r2, [r3, #0]
	HAL_Delay(3000);
 80006fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000702:	f001 fb0b 	bl	8001d1c <HAL_Delay>
	open = true;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <lcd_correct_pass+0x64>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	08008a70 	.word	0x08008a70
 8000714:	20000004 	.word	0x20000004
 8000718:	48001800 	.word	0x48001800
 800071c:	20000000 	.word	0x20000000

08000720 <lcd_incorrect_pass>:


void lcd_incorrect_pass (void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	//write correct
		lcd_send_cmd_param(0x45, 0x40);
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	2045      	movs	r0, #69	; 0x45
 8000728:	f7ff ff10 	bl	800054c <lcd_send_cmd_param>
		lcd_send_string("Incorrect :(");
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <lcd_incorrect_pass+0x20>)
 800072e:	f000 f81b 	bl	8000768 <lcd_send_string>

		//open lock funciton
		HAL_Delay(2000);
 8000732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000736:	f001 faf1 	bl	8001d1c <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08008a7c 	.word	0x08008a7c

08000744 <lcd_nice>:

void lcd_nice(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	lcd_send_cmd_param(0x45, 0x40);
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	2045      	movs	r0, #69	; 0x45
 800074c:	f7ff fefe 	bl	800054c <lcd_send_cmd_param>
	lcd_send_string("Nice! :D");
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <lcd_nice+0x20>)
 8000752:	f000 f809 	bl	8000768 <lcd_send_string>
	HAL_Delay(2000);
 8000756:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800075a:	f001 fadf 	bl	8001d1c <HAL_Delay>


}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08008a8c 	.word	0x08008a8c

08000768 <lcd_send_string>:

void lcd_send_string (char *str) //just going to do it manually
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000770:	e006      	b.n	8000780 <lcd_send_string+0x18>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff04 	bl	8000588 <lcd_send_data>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f4      	bne.n	8000772 <lcd_send_string+0xa>
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t key;

char read_keypad (void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	read_IR();// probably shouldn't be here but it works
 8000796:	f7ff ff59 	bl	800064c <read_IR>
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 0);  //Pull the R1 low
 800079a:	2200      	movs	r2, #0
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f002 fef7 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 80007a6:	2201      	movs	r2, #1
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f002 fef1 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f002 feeb 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f002 fee5 	bl	8003594 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80007ca:	2108      	movs	r1, #8
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f002 fec8 	bl	8003564 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10d      	bne.n	80007f6 <read_keypad+0x64>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80007da:	bf00      	nop
 80007dc:	2108      	movs	r1, #8
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f002 febf 	bl	8003564 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f7      	beq.n	80007dc <read_keypad+0x4a>
		lcd_send_data(0x31); // i
 80007ec:	2031      	movs	r0, #49	; 0x31
 80007ee:	f7ff fecb 	bl	8000588 <lcd_send_data>
		return '1';
 80007f2:	2331      	movs	r3, #49	; 0x31
 80007f4:	e18c      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80007f6:	2104      	movs	r1, #4
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f002 feb2 	bl	8003564 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10d      	bne.n	8000822 <read_keypad+0x90>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000806:	bf00      	nop
 8000808:	2104      	movs	r1, #4
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f002 fea9 	bl	8003564 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f7      	beq.n	8000808 <read_keypad+0x76>
		lcd_send_data(0x32); // i
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f7ff feb5 	bl	8000588 <lcd_send_data>
		return '2';
 800081e:	2332      	movs	r3, #50	; 0x32
 8000820:	e176      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000822:	2102      	movs	r1, #2
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f002 fe9c 	bl	8003564 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10d      	bne.n	800084e <read_keypad+0xbc>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000832:	bf00      	nop
 8000834:	2102      	movs	r1, #2
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f002 fe93 	bl	8003564 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f7      	beq.n	8000834 <read_keypad+0xa2>
		lcd_send_data(0x33); // i
 8000844:	2033      	movs	r0, #51	; 0x33
 8000846:	f7ff fe9f 	bl	8000588 <lcd_send_data>
		return '3';
 800084a:	2333      	movs	r3, #51	; 0x33
 800084c:	e160      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800084e:	2101      	movs	r1, #1
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f002 fe86 	bl	8003564 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10d      	bne.n	800087a <read_keypad+0xe8>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2101      	movs	r1, #1
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 fe7d 	bl	8003564 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f7      	beq.n	8000860 <read_keypad+0xce>
		lcd_send_data(0x41); // i
 8000870:	2041      	movs	r0, #65	; 0x41
 8000872:	f7ff fe89 	bl	8000588 <lcd_send_data>
		return 'A';
 8000876:	2341      	movs	r3, #65	; 0x41
 8000878:	e14a      	b.n	8000b10 <read_keypad+0x37e>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 800087a:	2201      	movs	r2, #1
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f002 fe87 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 0);  // Pull the R2 High
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f002 fe81 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 8000892:	2201      	movs	r2, #1
 8000894:	2120      	movs	r1, #32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f002 fe7b 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f002 fe75 	bl	8003594 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80008aa:	2108      	movs	r1, #8
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f002 fe58 	bl	8003564 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10d      	bne.n	80008d6 <read_keypad+0x144>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80008ba:	bf00      	nop
 80008bc:	2108      	movs	r1, #8
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f002 fe4f 	bl	8003564 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0f7      	beq.n	80008bc <read_keypad+0x12a>
		lcd_send_data(0x34); // i
 80008cc:	2034      	movs	r0, #52	; 0x34
 80008ce:	f7ff fe5b 	bl	8000588 <lcd_send_data>
		return '4';
 80008d2:	2334      	movs	r3, #52	; 0x34
 80008d4:	e11c      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80008d6:	2104      	movs	r1, #4
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f002 fe42 	bl	8003564 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10d      	bne.n	8000902 <read_keypad+0x170>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	2104      	movs	r1, #4
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f002 fe39 	bl	8003564 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f7      	beq.n	80008e8 <read_keypad+0x156>
		lcd_send_data(0x35); // i
 80008f8:	2035      	movs	r0, #53	; 0x35
 80008fa:	f7ff fe45 	bl	8000588 <lcd_send_data>
		return '5';
 80008fe:	2335      	movs	r3, #53	; 0x35
 8000900:	e106      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000902:	2102      	movs	r1, #2
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f002 fe2c 	bl	8003564 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10d      	bne.n	800092e <read_keypad+0x19c>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000912:	bf00      	nop
 8000914:	2102      	movs	r1, #2
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f002 fe23 	bl	8003564 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f7      	beq.n	8000914 <read_keypad+0x182>
		lcd_send_data(0x36); // i
 8000924:	2036      	movs	r0, #54	; 0x36
 8000926:	f7ff fe2f 	bl	8000588 <lcd_send_data>
		return '6';
 800092a:	2336      	movs	r3, #54	; 0x36
 800092c:	e0f0      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800092e:	2101      	movs	r1, #1
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f002 fe16 	bl	8003564 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10d      	bne.n	800095a <read_keypad+0x1c8>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800093e:	bf00      	nop
 8000940:	2101      	movs	r1, #1
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f002 fe0d 	bl	8003564 <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f7      	beq.n	8000940 <read_keypad+0x1ae>
		lcd_send_data(0x42); // i
 8000950:	2042      	movs	r0, #66	; 0x42
 8000952:	f7ff fe19 	bl	8000588 <lcd_send_data>
		return 'B';
 8000956:	2342      	movs	r3, #66	; 0x42
 8000958:	e0da      	b.n	8000b10 <read_keypad+0x37e>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 800095a:	2201      	movs	r2, #1
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f002 fe17 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 8000966:	2201      	movs	r2, #1
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 fe11 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 0);  // Pull the R3 High
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f002 fe0b 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f002 fe05 	bl	8003594 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 800098a:	2108      	movs	r1, #8
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f002 fde8 	bl	8003564 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <read_keypad+0x224>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 800099a:	bf00      	nop
 800099c:	2108      	movs	r1, #8
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f002 fddf 	bl	8003564 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f7      	beq.n	800099c <read_keypad+0x20a>
		lcd_send_data(0x37); // i
 80009ac:	2037      	movs	r0, #55	; 0x37
 80009ae:	f7ff fdeb 	bl	8000588 <lcd_send_data>
		return '7';
 80009b2:	2337      	movs	r3, #55	; 0x37
 80009b4:	e0ac      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80009b6:	2104      	movs	r1, #4
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f002 fdd2 	bl	8003564 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10d      	bne.n	80009e2 <read_keypad+0x250>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80009c6:	bf00      	nop
 80009c8:	2104      	movs	r1, #4
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f002 fdc9 	bl	8003564 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f7      	beq.n	80009c8 <read_keypad+0x236>
		lcd_send_data(0x38); // i
 80009d8:	2038      	movs	r0, #56	; 0x38
 80009da:	f7ff fdd5 	bl	8000588 <lcd_send_data>
		return '8';
 80009de:	2338      	movs	r3, #56	; 0x38
 80009e0:	e096      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80009e2:	2102      	movs	r1, #2
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f002 fdbc 	bl	8003564 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10d      	bne.n	8000a0e <read_keypad+0x27c>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80009f2:	bf00      	nop
 80009f4:	2102      	movs	r1, #2
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f002 fdb3 	bl	8003564 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f7      	beq.n	80009f4 <read_keypad+0x262>
		lcd_send_data(0x39); // i
 8000a04:	2039      	movs	r0, #57	; 0x39
 8000a06:	f7ff fdbf 	bl	8000588 <lcd_send_data>
		return '9';
 8000a0a:	2339      	movs	r3, #57	; 0x39
 8000a0c:	e080      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000a0e:	2101      	movs	r1, #1
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f002 fda6 	bl	8003564 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10a      	bne.n	8000a34 <read_keypad+0x2a2>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000a1e:	bf00      	nop
 8000a20:	2101      	movs	r1, #1
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f002 fd9d 	bl	8003564 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f7      	beq.n	8000a20 <read_keypad+0x28e>
		return 'C';
 8000a30:	2343      	movs	r3, #67	; 0x43
 8000a32:	e06d      	b.n	8000b10 <read_keypad+0x37e>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000a34:	2201      	movs	r2, #1
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f002 fdaa 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 8000a40:	2201      	movs	r2, #1
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f002 fda4 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f002 fd9e 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 0);  // Pull the R4 High
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f002 fd98 	bl	8003594 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000a64:	2108      	movs	r1, #8
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f002 fd7b 	bl	8003564 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10a      	bne.n	8000a8a <read_keypad+0x2f8>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000a74:	bf00      	nop
 8000a76:	2108      	movs	r1, #8
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f002 fd72 	bl	8003564 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f7      	beq.n	8000a76 <read_keypad+0x2e4>
		return '*';
 8000a86:	232a      	movs	r3, #42	; 0x2a
 8000a88:	e042      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f002 fd68 	bl	8003564 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10d      	bne.n	8000ab6 <read_keypad+0x324>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000a9a:	bf00      	nop
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f002 fd5f 	bl	8003564 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f7      	beq.n	8000a9c <read_keypad+0x30a>
		lcd_send_data(0x30); // i
 8000aac:	2030      	movs	r0, #48	; 0x30
 8000aae:	f7ff fd6b 	bl	8000588 <lcd_send_data>
		return '0';
 8000ab2:	2330      	movs	r3, #48	; 0x30
 8000ab4:	e02c      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f002 fd52 	bl	8003564 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10d      	bne.n	8000ae2 <read_keypad+0x350>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 8000ac6:	bf00      	nop
 8000ac8:	2102      	movs	r1, #2
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f002 fd49 	bl	8003564 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f7      	beq.n	8000ac8 <read_keypad+0x336>
		lcd_send_data(0x23); // i
 8000ad8:	2023      	movs	r0, #35	; 0x23
 8000ada:	f7ff fd55 	bl	8000588 <lcd_send_data>
		return '#';
 8000ade:	2323      	movs	r3, #35	; 0x23
 8000ae0:	e016      	b.n	8000b10 <read_keypad+0x37e>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f002 fd3c 	bl	8003564 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10d      	bne.n	8000b0e <read_keypad+0x37c>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000af2:	bf00      	nop
 8000af4:	2101      	movs	r1, #1
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f002 fd33 	bl	8003564 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f7      	beq.n	8000af4 <read_keypad+0x362>
		lcd_send_data(0x44); // i
 8000b04:	2044      	movs	r0, #68	; 0x44
 8000b06:	f7ff fd3f 	bl	8000588 <lcd_send_data>
		return 'D';
 8000b0a:	2344      	movs	r3, #68	; 0x44
 8000b0c:	e000      	b.n	8000b10 <read_keypad+0x37e>
	}

	return 0; // if returned, 0, we got an error
 8000b0e:	2300      	movs	r3, #0

}
 8000b10:	4618      	mov	r0, r3
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_UART_RxCpltCallback>:
					};
	HAL_UART_Transmit(XBEE_ADDR, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  // handle received message
  uint8_t data[2] = {xbee_buff[8], xbee_buff[9]};
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_UART_RxCpltCallback+0x40>)
 8000b1e:	7a1b      	ldrb	r3, [r3, #8]
 8000b20:	733b      	strb	r3, [r7, #12]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_UART_RxCpltCallback+0x40>)
 8000b24:	7a5b      	ldrb	r3, [r3, #9]
 8000b26:	737b      	strb	r3, [r7, #13]

  if (data[0] == UNLOCK_DOOR) {
 8000b28:	7b3b      	ldrb	r3, [r7, #12]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d103      	bne.n	8000b36 <HAL_UART_RxCpltCallback+0x22>
	  lcd_correct_pass();
 8000b2e:	f7ff fdc3 	bl	80006b8 <lcd_correct_pass>
	  lcd_init();
 8000b32:	f7ff fd3f 	bl	80005b4 <lcd_init>
  }
  if (data[0] == LOCK_DOOR) {
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <HAL_UART_RxCpltCallback+0x2c>
	  close_door();
 8000b3c:	f7ff fd56 	bl	80005ec <close_door>
  }

  HAL_UART_Receive_IT(&huart3, xbee_buff, 11);
 8000b40:	220b      	movs	r2, #11
 8000b42:	4904      	ldr	r1, [pc, #16]	; (8000b54 <HAL_UART_RxCpltCallback+0x40>)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <HAL_UART_RxCpltCallback+0x44>)
 8000b46:	f005 ff01 	bl	800694c <HAL_UART_Receive_IT>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000268 	.word	0x20000268
 8000b58:	200001d0 	.word	0x200001d0

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f001 f866 	bl	8001c32 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f8cb 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 fb65 	bl	8001238 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b6e:	f000 f90d 	bl	8000d8c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b72:	f000 f9ad 	bl	8000ed0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b76:	f000 fa23 	bl	8000fc0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b7a:	f000 f96b 	bl	8000e54 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000b7e:	f000 fa97 	bl	80010b0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000b82:	f000 fb0d 	bl	80011a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000b86:	f7ff fd15 	bl	80005b4 <lcd_init>
  close_door();
 8000b8a:	f7ff fd2f 	bl	80005ec <close_door>
  HAL_UART_Receive_IT(&huart3, xbee_buff, 11);
 8000b8e:	220b      	movs	r2, #11
 8000b90:	4953      	ldr	r1, [pc, #332]	; (8000ce0 <main+0x184>)
 8000b92:	4854      	ldr	r0, [pc, #336]	; (8000ce4 <main+0x188>)
 8000b94:	f005 feda 	bl	800694c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char real_password[8] = "D";
 8000b98:	2344      	movs	r3, #68	; 0x44
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
char nice[] = "69420";
 8000ba0:	4a51      	ldr	r2, [pc, #324]	; (8000ce8 <main+0x18c>)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000baa:	6018      	str	r0, [r3, #0]
 8000bac:	3304      	adds	r3, #4
 8000bae:	8019      	strh	r1, [r3, #0]
char pass[11] = "\0";
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f8c3 2003 	str.w	r2, [r3, #3]
int index = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24


HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	4849      	ldr	r0, [pc, #292]	; (8000cec <main+0x190>)
 8000bc8:	f004 fed4 	bl	8005974 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bcc:	2108      	movs	r1, #8
 8000bce:	4848      	ldr	r0, [pc, #288]	; (8000cf0 <main+0x194>)
 8000bd0:	f004 fed0 	bl	8005974 <HAL_TIM_PWM_Start>
*tim_4_ccr2 &= 0xffff;
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <main+0x198>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <main+0x198>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b292      	uxth	r2, r2
 8000be0:	601a      	str	r2, [r3, #0]
*tim_4_ccr2 |= 150;
 8000be2:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <main+0x198>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <main+0x198>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f042 0296 	orr.w	r2, r2, #150	; 0x96
 8000bf0:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 // Initialize an empty password of size 10 because of Null
	    char key = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 8000bf8:	e004      	b.n	8000c04 <main+0xa8>
	    	key = read_keypad ();
 8000bfa:	f7ff fdca 	bl	8000792 <read_keypad>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 8000c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f6      	beq.n	8000bfa <main+0x9e>
	    }
		if (key != 'C' && key != '*' && strlen(pass) < 10) {
 8000c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c10:	2b43      	cmp	r3, #67	; 0x43
 8000c12:	d018      	beq.n	8000c46 <main+0xea>
 8000c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c18:	2b2a      	cmp	r3, #42	; 0x2a
 8000c1a:	d014      	beq.n	8000c46 <main+0xea>
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff faf6 	bl	8000210 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b09      	cmp	r3, #9
 8000c28:	d80d      	bhi.n	8000c46 <main+0xea>
		    // Append the key to the string
			pass[index++] = key;
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000c30:	3328      	adds	r3, #40	; 0x28
 8000c32:	443b      	add	r3, r7
 8000c34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c38:	f803 2c24 	strb.w	r2, [r3, #-36]
			pass[index] = '\0';
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	4413      	add	r3, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
		}
		if (key == 'C'){
 8000c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c4a:	2b43      	cmp	r3, #67	; 0x43
 8000c4c:	d112      	bne.n	8000c74 <main+0x118>
			pass[0] = '\0';
 8000c4e:	2300      	movs	r3, #0
 8000c50:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 8000c56:	f7ff fcad 	bl	80005b4 <lcd_init>
			open = false;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <main+0x19c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG1, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4825      	ldr	r0, [pc, #148]	; (8000cfc <main+0x1a0>)
 8000c66:	f002 fc95 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORLOGPORT, MOTORLOG2, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4823      	ldr	r0, [pc, #140]	; (8000cfc <main+0x1a0>)
 8000c70:	f002 fc90 	bl	8003594 <HAL_GPIO_WritePin>

  	  	  }
		if (key == '*'){
 8000c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c78:	2b2a      	cmp	r3, #42	; 0x2a
 8000c7a:	d121      	bne.n	8000cc0 <main+0x164>
			if (!strcmp(pass, nice)){
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fab9 	bl	80001fc <strcmp>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <main+0x13a>
				lcd_nice();
 8000c90:	f7ff fd58 	bl	8000744 <lcd_nice>
 8000c94:	e00e      	b.n	8000cb4 <main+0x158>
			}
			else if (!strcmp(pass, real_password)) {
 8000c96:	f107 0218 	add.w	r2, r7, #24
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff faac 	bl	80001fc <strcmp>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <main+0x154>
			     lcd_correct_pass();
 8000caa:	f7ff fd05 	bl	80006b8 <lcd_correct_pass>
 8000cae:	e001      	b.n	8000cb4 <main+0x158>
			} else {
			     lcd_incorrect_pass();
 8000cb0:	f7ff fd36 	bl	8000720 <lcd_incorrect_pass>
			}
			pass[0] = '\0';
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 8000cbc:	f7ff fc7a 	bl	80005b4 <lcd_init>
		}
		if (strlen(pass) >= 10){
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff faa4 	bl	8000210 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d991      	bls.n	8000bf2 <main+0x96>
			lcd_incorrect_pass();
 8000cce:	f7ff fd27 	bl	8000720 <lcd_incorrect_pass>
			pass[0] = '\0';
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	713b      	strb	r3, [r7, #4]
			index = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 8000cda:	f7ff fc6b 	bl	80005b4 <lcd_init>
  {
 8000cde:	e788      	b.n	8000bf2 <main+0x96>
 8000ce0:	20000268 	.word	0x20000268
 8000ce4:	200001d0 	.word	0x200001d0
 8000ce8:	08008aa4 	.word	0x08008aa4
 8000cec:	20000184 	.word	0x20000184
 8000cf0:	200000ec 	.word	0x200000ec
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	48001800 	.word	0x48001800

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b096      	sub	sp, #88	; 0x58
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2244      	movs	r2, #68	; 0x44
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 fe6c 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d26:	f003 f8c9 	bl	8003ebc <HAL_PWREx_ControlVoltageScaling>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d30:	f000 fc74 	bl	800161c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d34:	2310      	movs	r3, #16
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 f969 	bl	8004024 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d58:	f000 fc60 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fd6f 	bl	8004858 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d80:	f000 fc4c 	bl	800161c <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <MX_ADC1_Init+0xc0>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000e06:	f001 f987 	bl	8002118 <HAL_ADC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000e10:	f000 fc04 	bl	800161c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_ADC1_Init+0xc4>)
 8000e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e20:	237f      	movs	r3, #127	; 0x7f
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e24:	2304      	movs	r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_ADC1_Init+0xbc>)
 8000e32:	f001 fbb7 	bl	80025a4 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e3c:	f000 fbee 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000030 	.word	0x20000030
 8000e4c:	50040000 	.word	0x50040000
 8000e50:	0c900008 	.word	0x0c900008

08000e54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_I2C1_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E50;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e60:	f44f 6265 	mov.w	r2, #3664	; 0xe50
 8000e64:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000e92:	f002 fb97 	bl	80035c4 <HAL_I2C_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 fbbe 	bl	800161c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000ea4:	f002 ff52 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000eae:	f000 fbb5 	bl	800161c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x74>)
 8000eb6:	f002 ff94 	bl	8003de2 <HAL_I2CEx_ConfigDigitalFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ec0:	f000 fbac 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	40005400 	.word	0x40005400

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f0c:	2227      	movs	r2, #39	; 0x27
 8000f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2a:	4824      	ldr	r0, [pc, #144]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f2c:	f004 fc6a 	bl	8005804 <HAL_TIM_Base_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f36:	f000 fb71 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f44:	4619      	mov	r1, r3
 8000f46:	481d      	ldr	r0, [pc, #116]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f48:	f004 ff2e 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f52:	f000 fb63 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f56:	4819      	ldr	r0, [pc, #100]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f58:	f004 fcab 	bl	80058b2 <HAL_TIM_PWM_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f62:	f000 fb5b 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f76:	f005 fc11 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f80:	f000 fb4c 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f84:	2360      	movs	r3, #96	; 0x60
 8000f86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 8000f88:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000f9e:	f004 fdef 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000fa8:	f000 fb38 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM2_Init+0xec>)
 8000fae:	f000 fceb 	bl	8001988 <HAL_TIM_MspPostInit>

}
 8000fb2:	bf00      	nop
 8000fb4:	3738      	adds	r7, #56	; 0x38
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000ec 	.word	0x200000ec

08000fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <MX_TIM3_Init+0xec>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8000ffa:	2227      	movs	r2, #39	; 0x27
 8000ffc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001006:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800100a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_TIM3_Init+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001018:	4823      	ldr	r0, [pc, #140]	; (80010a8 <MX_TIM3_Init+0xe8>)
 800101a:	f004 fbf3 	bl	8005804 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001024:	f000 fafa 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	4619      	mov	r1, r3
 8001034:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001036:	f004 feb7 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001040:	f000 faec 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001046:	f004 fc34 	bl	80058b2 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001050:	f000 fae4 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_TIM3_Init+0xe8>)
 8001064:	f005 fb9a 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800106e:	f000 fad5 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	; 0x60
 8001074:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001076:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800107a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM3_Init+0xe8>)
 800108c:	f004 fd78 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001096:	f000 fac1 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM3_Init+0xe8>)
 800109c:	f000 fc74 	bl	8001988 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000138 	.word	0x20000138
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_TIM4_Init+0xe8>)
 80010e4:	4a2d      	ldr	r2, [pc, #180]	; (800119c <MX_TIM4_Init+0xec>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_TIM4_Init+0xe8>)
 80010ea:	2227      	movs	r2, #39	; 0x27
 80010ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_TIM4_Init+0xe8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_TIM4_Init+0xe8>)
 80010f6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_TIM4_Init+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <MX_TIM4_Init+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <MX_TIM4_Init+0xe8>)
 800110a:	f004 fb7b 	bl	8005804 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001114:	f000 fa82 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001122:	4619      	mov	r1, r3
 8001124:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_TIM4_Init+0xe8>)
 8001126:	f004 fe3f 	bl	8005da8 <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001130:	f000 fa74 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001134:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM4_Init+0xe8>)
 8001136:	f004 fbbc 	bl	80058b2 <HAL_TIM_PWM_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001140:	f000 fa6c 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	; (8001198 <MX_TIM4_Init+0xe8>)
 8001154:	f005 fb22 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800115e:	f000 fa5d 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 8001166:	2396      	movs	r3, #150	; 0x96
 8001168:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2204      	movs	r2, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM4_Init+0xe8>)
 800117a:	f004 fd01 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001184:	f000 fa4a 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM4_Init+0xe8>)
 800118a:	f000 fbfd 	bl	8001988 <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000184 	.word	0x20000184
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <MX_USART3_UART_Init+0x94>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011ea:	f005 fb5f 	bl	80068ac <HAL_UART_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011f4:	f000 fa12 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_USART3_UART_Init+0x90>)
 80011fc:	f007 fb2b 	bl	8008856 <HAL_UARTEx_SetTxFifoThreshold>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001206:	f000 fa09 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_USART3_UART_Init+0x90>)
 800120e:	f007 fb60 	bl	80088d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 fa00 	bl	800161c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_USART3_UART_Init+0x90>)
 800121e:	f007 fae1 	bl	80087e4 <HAL_UARTEx_DisableFifoMode>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f9f8 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001d0 	.word	0x200001d0
 8001234:	40004800 	.word	0x40004800

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	4bb4      	ldr	r3, [pc, #720]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4ab3      	ldr	r2, [pc, #716]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4bb1      	ldr	r3, [pc, #708]	; (8001520 <MX_GPIO_Init+0x2e8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4bae      	ldr	r3, [pc, #696]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4aad      	ldr	r2, [pc, #692]	; (8001520 <MX_GPIO_Init+0x2e8>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4bab      	ldr	r3, [pc, #684]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4ba8      	ldr	r3, [pc, #672]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4aa7      	ldr	r2, [pc, #668]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4ba5      	ldr	r3, [pc, #660]	; (8001520 <MX_GPIO_Init+0x2e8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4ba2      	ldr	r3, [pc, #648]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4aa1      	ldr	r2, [pc, #644]	; (8001520 <MX_GPIO_Init+0x2e8>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b9f      	ldr	r3, [pc, #636]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b9c      	ldr	r3, [pc, #624]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a9b      	ldr	r2, [pc, #620]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b99      	ldr	r3, [pc, #612]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b96      	ldr	r3, [pc, #600]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a95      	ldr	r2, [pc, #596]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b93      	ldr	r3, [pc, #588]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012de:	4b90      	ldr	r3, [pc, #576]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a8f      	ldr	r2, [pc, #572]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b8d      	ldr	r3, [pc, #564]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b8a      	ldr	r3, [pc, #552]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a89      	ldr	r2, [pc, #548]	; (8001520 <MX_GPIO_Init+0x2e8>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b87      	ldr	r3, [pc, #540]	; (8001520 <MX_GPIO_Init+0x2e8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800130e:	f002 fe79 	bl	8004004 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f002 f93a 	bl	8003594 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2103      	movs	r1, #3
 8001324:	487f      	ldr	r0, [pc, #508]	; (8001524 <MX_GPIO_Init+0x2ec>)
 8001326:	f002 f935 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001330:	487d      	ldr	r0, [pc, #500]	; (8001528 <MX_GPIO_Init+0x2f0>)
 8001332:	f002 f92f 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001336:	230c      	movs	r3, #12
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001346:	230d      	movs	r3, #13
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	4876      	ldr	r0, [pc, #472]	; (800152c <MX_GPIO_Init+0x2f4>)
 8001352:	f001 ff75 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001356:	2307      	movs	r3, #7
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135a:	2312      	movs	r3, #18
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001366:	2304      	movs	r3, #4
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	486f      	ldr	r0, [pc, #444]	; (8001530 <MX_GPIO_Init+0x2f8>)
 8001372:	f001 ff65 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001386:	230d      	movs	r3, #13
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4867      	ldr	r0, [pc, #412]	; (8001530 <MX_GPIO_Init+0x2f8>)
 8001392:	f001 ff55 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001396:	230f      	movs	r3, #15
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f001 ff48 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b0:	23f0      	movs	r3, #240	; 0xf0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013b4:	2311      	movs	r3, #17
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f001 ff39 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80013ce:	2344      	movs	r3, #68	; 0x44
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4854      	ldr	r0, [pc, #336]	; (8001534 <MX_GPIO_Init+0x2fc>)
 80013e2:	f001 ff2d 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e6:	2303      	movs	r3, #3
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4849      	ldr	r0, [pc, #292]	; (8001524 <MX_GPIO_Init+0x2ec>)
 80013fe:	f001 ff1f 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001402:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001414:	2301      	movs	r3, #1
 8001416:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	4619      	mov	r1, r3
 800141e:	4843      	ldr	r0, [pc, #268]	; (800152c <MX_GPIO_Init+0x2f4>)
 8001420:	f001 ff0e 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001436:	2303      	movs	r3, #3
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	483a      	ldr	r0, [pc, #232]	; (800152c <MX_GPIO_Init+0x2f4>)
 8001442:	f001 fefd 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001446:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001458:	230d      	movs	r3, #13
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4834      	ldr	r0, [pc, #208]	; (8001534 <MX_GPIO_Init+0x2fc>)
 8001464:	f001 feec 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800147a:	230e      	movs	r3, #14
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	482b      	ldr	r0, [pc, #172]	; (8001534 <MX_GPIO_Init+0x2fc>)
 8001486:	f001 fedb 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800148a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800149c:	2308      	movs	r3, #8
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <MX_GPIO_Init+0x2ec>)
 80014a8:	f001 feca 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014bc:	230d      	movs	r3, #13
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_GPIO_Init+0x2f0>)
 80014c8:	f001 feba 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_GPIO_Init+0x2f0>)
 80014e6:	f001 feab 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f001 fe9b 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800150a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	e00b      	b.n	8001538 <MX_GPIO_Init+0x300>
 8001520:	40021000 	.word	0x40021000
 8001524:	48001800 	.word	0x48001800
 8001528:	48000800 	.word	0x48000800
 800152c:	48001000 	.word	0x48001000
 8001530:	48001400 	.word	0x48001400
 8001534:	48000400 	.word	0x48000400
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f001 fe80 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001552:	230a      	movs	r3, #10
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fe6e 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001564:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001576:	230c      	movs	r3, #12
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_GPIO_Init+0x3d8>)
 8001582:	f001 fe5d 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001596:	2309      	movs	r3, #9
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_GPIO_Init+0x3dc>)
 80015a2:	f001 fe4d 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015b6:	230c      	movs	r3, #12
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_GPIO_Init+0x3dc>)
 80015c2:	f001 fe3d 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015c6:	2378      	movs	r3, #120	; 0x78
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_GPIO_Init+0x3dc>)
 80015e2:	f001 fe2d 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015e6:	2338      	movs	r3, #56	; 0x38
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f6:	2306      	movs	r3, #6
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_GPIO_Init+0x3e0>)
 8001602:	f001 fe1d 	bl	8003240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001606:	bf00      	nop
 8001608:	3738      	adds	r7, #56	; 0x38
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	48000800 	.word	0x48000800
 8001614:	48000c00 	.word	0x48000c00
 8001618:	48000400 	.word	0x48000400

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x44>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x44>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6613      	str	r3, [r2, #96]	; 0x60
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x44>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x44>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x44>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6593      	str	r3, [r2, #88]	; 0x58
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x44>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0b0      	sub	sp, #192	; 0xc0
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	2294      	movs	r2, #148	; 0x94
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 f9a9 	bl	80089ec <memset>
  if(hadc->Instance==ADC1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a34      	ldr	r2, [pc, #208]	; (8001770 <HAL_ADC_MspInit+0xfc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d161      	bne.n	8001768 <HAL_ADC_MspInit+0xf4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80016ba:	2310      	movs	r3, #16
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fb7d 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016e0:	f7ff ff9c 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_ADC_MspInit+0x100>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_ADC_MspInit+0x100>)
 80016ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_ADC_MspInit+0x100>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_ADC_MspInit+0x100>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_ADC_MspInit+0x100>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_ADC_MspInit+0x100>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_ADC_MspInit+0x100>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_ADC_MspInit+0x100>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_ADC_MspInit+0x100>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 800172c:	2334      	movs	r3, #52	; 0x34
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001732:	230b      	movs	r3, #11
 8001734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <HAL_ADC_MspInit+0x104>)
 8001746:	f001 fd7b 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001750:	230b      	movs	r3, #11
 8001752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_ADC_MspInit+0x108>)
 8001764:	f001 fd6c 	bl	8003240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	37c0      	adds	r7, #192	; 0xc0
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	50040000 	.word	0x50040000
 8001774:	40021000 	.word	0x40021000
 8001778:	48000800 	.word	0x48000800
 800177c:	48000400 	.word	0x48000400

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ae      	sub	sp, #184	; 0xb8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2294      	movs	r2, #148	; 0x94
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 f923 	bl	80089ec <memset>
  if(hi2c->Instance==I2C1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_I2C_MspInit+0xb0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13b      	bne.n	8001828 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fb09 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff ff28 	bl	800161c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	2312      	movs	r3, #18
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fe:	2304      	movs	r3, #4
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001808:	4619      	mov	r1, r3
 800180a:	480b      	ldr	r0, [pc, #44]	; (8001838 <HAL_I2C_MspInit+0xb8>)
 800180c:	f001 fd18 	bl	8003240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 8001816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181a:	6593      	str	r3, [r2, #88]	; 0x58
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_I2C_MspInit+0xb4>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	37b8      	adds	r7, #184	; 0xb8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005400 	.word	0x40005400
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d10c      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a43      	ldr	r2, [pc, #268]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001876:	e077      	b.n	8001968 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_TIM_Base_MspInit+0x138>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d128      	bne.n	80018d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	4a3a      	ldr	r2, [pc, #232]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6593      	str	r3, [r2, #88]	; 0x58
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018c2:	2302      	movs	r3, #2
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	482a      	ldr	r0, [pc, #168]	; (8001978 <HAL_TIM_Base_MspInit+0x13c>)
 80018ce:	f001 fcb7 	bl	8003240 <HAL_GPIO_Init>
}
 80018d2:	e049      	b.n	8001968 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM4)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_TIM_Base_MspInit+0x140>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d144      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_TIM_Base_MspInit+0x134>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001938:	2302      	movs	r3, #2
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	480f      	ldr	r0, [pc, #60]	; (8001980 <HAL_TIM_Base_MspInit+0x144>)
 8001944:	f001 fc7c 	bl	8003240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001958:	2302      	movs	r3, #2
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <HAL_TIM_Base_MspInit+0x148>)
 8001964:	f001 fc6c 	bl	8003240 <HAL_GPIO_Init>
}
 8001968:	bf00      	nop
 800196a:	3738      	adds	r7, #56	; 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	40000400 	.word	0x40000400
 8001978:	48000400 	.word	0x48000400
 800197c:	40000800 	.word	0x40000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001000 	.word	0x48001000

08001988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d11d      	bne.n	80019e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <HAL_TIM_MspPostInit+0xf0>)
 80019e0:	f001 fc2e 	bl	8003240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019e4:	e042      	b.n	8001a6c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_TIM_MspPostInit+0xf4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11c      	bne.n	8001a2a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4817      	ldr	r0, [pc, #92]	; (8001a80 <HAL_TIM_MspPostInit+0xf8>)
 8001a24:	f001 fc0c 	bl	8003240 <HAL_GPIO_Init>
}
 8001a28:	e020      	b.n	8001a6c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <HAL_TIM_MspPostInit+0xfc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_TIM_MspPostInit+0xec>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <HAL_TIM_MspPostInit+0xf0>)
 8001a68:	f001 fbea 	bl	8003240 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	48000800 	.word	0x48000800
 8001a84:	40000800 	.word	0x40000800

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0ae      	sub	sp, #184	; 0xb8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2294      	movs	r2, #148	; 0x94
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f006 ff9f 	bl	80089ec <memset>
  if(huart->Instance==USART3)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_UART_MspInit+0xc0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d143      	bne.n	8001b40 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f985 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff fda4 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_UART_MspInit+0xc4>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4809      	ldr	r0, [pc, #36]	; (8001b50 <HAL_UART_MspInit+0xc8>)
 8001b2c:	f001 fb88 	bl	8003240 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2101      	movs	r1, #1
 8001b34:	2027      	movs	r0, #39	; 0x27
 8001b36:	f001 fa92 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b3a:	2027      	movs	r0, #39	; 0x27
 8001b3c:	f001 faab 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	37b8      	adds	r7, #184	; 0xb8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000c00 	.word	0x48000c00

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f89c 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <USART3_IRQHandler+0x10>)
 8001bae:	f004 ff19 	bl	80069e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001d0 	.word	0x200001d0

08001bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be4:	f7ff ffea 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <LoopForever+0xe>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c00:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <LoopForever+0x16>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f006 fef5 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c12:	f7fe ffa3 	bl	8000b5c <main>

08001c16 <LoopForever>:

LoopForever:
    b LoopForever
 8001c16:	e7fe      	b.n	8001c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001c24:	08008b2c 	.word	0x08008b2c
  ldr r2, =_sbss
 8001c28:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001c2c:	200002d0 	.word	0x200002d0

08001c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC1_IRQHandler>

08001c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f001 fa03 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f80e 	bl	8001c64 <HAL_InitTick>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	e001      	b.n	8001c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c54:	f7ff fcea 	bl	800162c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_InitTick+0x70>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 fa0f 	bl	80030b2 <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10f      	bne.n	8001cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d809      	bhi.n	8001cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f001 f9d9 	bl	800305e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_InitTick+0x74>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e004      	b.n	8001cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e001      	b.n	8001cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000010 	.word	0x20000010
 8001d00:	200002cc 	.word	0x200002cc

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	200002cc 	.word	0x200002cc

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000010 	.word	0x20000010

08001d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3360      	adds	r3, #96	; 0x60
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <LL_ADC_SetOffset+0x44>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	03fff000 	.word	0x03fff000

08001e14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3360      	adds	r3, #96	; 0x60
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3360      	adds	r3, #96	; 0x60
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	615a      	str	r2, [r3, #20]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b087      	sub	sp, #28
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3330      	adds	r3, #48	; 0x30
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	211f      	movs	r1, #31
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 011f 	and.w	r1, r3, #31
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0e5b      	lsrs	r3, r3, #25
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0d1b      	lsrs	r3, r3, #20
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2107      	movs	r1, #7
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0d1b      	lsrs	r3, r3, #20
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0318 	and.w	r3, r3, #24
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f94:	40d9      	lsrs	r1, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	400b      	ands	r3, r1
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	0007ffff 	.word	0x0007ffff

08001fb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002018:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002040:	d101      	bne.n	8002046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <LL_ADC_IsEnabled+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_ADC_IsEnabled+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d101      	bne.n	8002108 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e129      	b.n	8002386 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fa97 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff3f 	bl	8001fdc <LL_ADC_IsDeepPowerDownEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff25 	bl	8001fb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff5a 	bl	800202c <LL_ADC_IsInternalRegulatorEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff3e 	bl	8002004 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_ADC_Init+0x278>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a81      	ldr	r2, [pc, #516]	; (8002394 <HAL_ADC_Init+0x27c>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff3c 	bl	800202c <LL_ADC_IsInternalRegulatorEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff75 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 80c2 	bne.w	8002374 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 80be 	bne.w	8002374 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002200:	f043 0202 	orr.w	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff35 	bl	800207c <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002218:	485f      	ldr	r0, [pc, #380]	; (8002398 <HAL_ADC_Init+0x280>)
 800221a:	f7ff ff2f 	bl	800207c <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	485c      	ldr	r0, [pc, #368]	; (800239c <HAL_ADC_Init+0x284>)
 800222c:	f7ff fd9a 	bl	8001d64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e5b      	ldrb	r3, [r3, #25]
 8002234:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002240:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002246:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	045b      	lsls	r3, r3, #17
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_ADC_Init+0x288>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff25 	bl	80020f0 <LL_ADC_INJ_IsConversionOngoing>
 80022a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d140      	bne.n	8002330 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13d      	bne.n	8002330 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
 80022bc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022be:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d6:	f023 0306 	bic.w	r3, r3, #6
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d118      	bne.n	8002320 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002310:	430a      	orrs	r2, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	e007      	b.n	8002330 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10c      	bne.n	8002352 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f023 010f 	bic.w	r1, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
 8002350:	e007      	b.n	8002362 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 020f 	bic.w	r2, r2, #15
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	659a      	str	r2, [r3, #88]	; 0x58
 8002372:	e007      	b.n	8002384 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f043 0210 	orr.w	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002384:	7ffb      	ldrb	r3, [r7, #31]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	053e2d63 	.word	0x053e2d63
 8002398:	50040000 	.word	0x50040000
 800239c:	50040300 	.word	0x50040300
 80023a0:	fff0c007 	.word	0xfff0c007

080023a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fe8a 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d14f      	bne.n	800245c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Start+0x26>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e04b      	b.n	8002462 <HAL_ADC_Start+0xbe>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fce2 	bl	8002d9c <ADC_Enable>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d137      	bne.n	8002452 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d106      	bne.n	8002412 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	f023 0206 	bic.w	r2, r3, #6
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	221c      	movs	r2, #28
 800241e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800243e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe29 	bl	80020a2 <LL_ADC_REG_StartConversion>
 8002450:	e006      	b.n	8002460 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800245a:	e001      	b.n	8002460 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d102      	bne.n	8002482 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800247c:	2308      	movs	r3, #8
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e010      	b.n	80024a4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e06f      	b.n	8002580 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80024a0:	2304      	movs	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024a4:	f7ff fc2e 	bl	8001d04 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024aa:	e021      	b.n	80024f0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d01d      	beq.n	80024f0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024b4:	f7ff fc26 	bl	8001d04 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <HAL_ADC_PollForConversion+0x60>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d112      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e047      	b.n	8002580 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0d6      	beq.n	80024ac <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fcc4 	bl	8001e9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01c      	beq.n	8002554 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e5b      	ldrb	r3, [r3, #25]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d111      	bne.n	8002554 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d104      	bne.n	800256c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2208      	movs	r2, #8
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e008      	b.n	800257e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0b6      	sub	sp, #216	; 0xd8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x22>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e3d5      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x7ce>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fd79 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 83ba 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d824      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	3b02      	subs	r3, #2
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d81b      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x8e>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_ADC_ConfigChannel+0x5c>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	08002611 	.word	0x08002611
 8002604:	08002619 	.word	0x08002619
 8002608:	08002621 	.word	0x08002621
 800260c:	08002629 	.word	0x08002629
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002610:	230c      	movs	r3, #12
 8002612:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002616:	e010      	b.n	800263a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002618:	2312      	movs	r3, #18
 800261a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800261e:	e00c      	b.n	800263a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002620:	2318      	movs	r3, #24
 8002622:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002626:	e008      	b.n	800263a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800262c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002632:	2306      	movs	r3, #6
 8002634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002638:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002648:	f7ff fc3b 	bl	8001ec2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd3a 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002656:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fd46 	bl	80020f0 <LL_ADC_INJ_IsConversionOngoing>
 8002664:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002668:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 81bf 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 81ba 	bne.w	80029f0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002684:	d10f      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	4619      	mov	r1, r3
 8002692:	f7ff fc42 	bl	8001f1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fbe9 	bl	8001e76 <LL_ADC_SetSamplingTimeCommonConfig>
 80026a4:	e00e      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7ff fc31 	bl	8001f1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fbd9 	bl	8001e76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00a      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6919      	ldr	r1, [r3, #16]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026f6:	f7ff fb69 	bl	8001dcc <LL_ADC_SetOffset>
 80026fa:	e179      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fb86 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x184>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb7b 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	e01e      	b.n	8002766 <HAL_ADC_ConfigChannel+0x1c2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fb70 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800274a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800274e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800275a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1da>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e018      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x20c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800279a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e004      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80027a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb3f 	bl	8001e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fb23 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x24a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fb18 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	e01e      	b.n	800282c <HAL_ADC_ConfigChannel+0x288>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fb0d 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800280c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002814:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e004      	b.n	800282a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2a0>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	e018      	b.n	8002876 <HAL_ADC_ConfigChannel+0x2d2>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800285c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002868:	2320      	movs	r3, #32
 800286a:	e004      	b.n	8002876 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800286c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002876:	429a      	cmp	r2, r3
 8002878:	d106      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fadc 	bl	8001e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fac0 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x310>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fab5 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 021f 	and.w	r2, r3, #31
 80028b2:	e01e      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x34e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2102      	movs	r1, #2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff faaa 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80028d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80028da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_ConfigChannel+0x366>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	e014      	b.n	8002934 <HAL_ADC_ConfigChannel+0x390>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800291a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800291e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800292a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002934:	429a      	cmp	r2, r3
 8002936:	d106      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fa7d 	bl	8001e40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fa61 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x3ce>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2103      	movs	r1, #3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fa56 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	e017      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x3fe>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2103      	movs	r1, #3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fa4b 	bl	8001e14 <LL_ADC_GetOffsetChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x416>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	e011      	b.n	80029de <HAL_ADC_ConfigChannel+0x43a>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80029c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e003      	b.n	80029de <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80029d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029de:	429a      	cmp	r2, r3
 80029e0:	d106      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2103      	movs	r1, #3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa28 	bl	8001e40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fb41 	bl	800207c <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 813f 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7ff faae 	bl	8001f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a8e      	ldr	r2, [pc, #568]	; (8002c54 <HAL_ADC_ConfigChannel+0x6b0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 8130 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x4a4>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2b09      	cmp	r3, #9
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e019      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x4d8>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	bf94      	ite	ls
 8002a76:	2301      	movls	r3, #1
 8002a78:	2300      	movhi	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d079      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x4f8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	3301      	adds	r3, #1
 8002a94:	069b      	lsls	r3, r3, #26
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	e015      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x524>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	e003      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x544>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	e017      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x574>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b00:	2320      	movs	r3, #32
 8002b02:	e003      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	ea42 0103 	orr.w	r1, r2, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x59a>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	051b      	lsls	r3, r3, #20
 8002b3c:	e018      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x5cc>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b70:	430b      	orrs	r3, r1
 8002b72:	e080      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x5ec>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	069b      	lsls	r3, r3, #26
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	e015      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x618>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x638>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	e017      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x668>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	61bb      	str	r3, [r7, #24]
  return result;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x694>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	3301      	adds	r3, #1
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3b1e      	subs	r3, #30
 8002c30:	051b      	lsls	r3, r3, #20
 8002c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c36:	e01d      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6d0>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	60fb      	str	r3, [r7, #12]
  return result;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e005      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x6bc>
 8002c54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b1e      	subs	r3, #30
 8002c6e:	051b      	lsls	r3, r3, #20
 8002c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7ff f94d 	bl	8001f1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_ADC_ConfigChannel+0x7d8>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d06c      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c8c:	483c      	ldr	r0, [pc, #240]	; (8002d80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c8e:	f7ff f88f 	bl	8001db0 <LL_ADC_GetCommonPathInternalCh>
 8002c92:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d127      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d121      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a35      	ldr	r2, [pc, #212]	; (8002d88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d157      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	482f      	ldr	r0, [pc, #188]	; (8002d80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cc2:	f7ff f862 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <HAL_ADC_ConfigChannel+0x7e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <HAL_ADC_ConfigChannel+0x7ec>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ce0:	e002      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f9      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cee:	e03a      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_ADC_ConfigChannel+0x7f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d113      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d12a      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4819      	ldr	r0, [pc, #100]	; (8002d80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d1c:	f7ff f835 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d20:	e021      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d11c      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d111      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d4e:	f7ff f81c 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
 8002d52:	e008      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	37d8      	adds	r7, #216	; 0xd8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	80080000 	.word	0x80080000
 8002d80:	50040300 	.word	0x50040300
 8002d84:	c7520000 	.word	0xc7520000
 8002d88:	50040000 	.word	0x50040000
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	053e2d63 	.word	0x053e2d63
 8002d94:	cb840000 	.word	0xcb840000
 8002d98:	80000001 	.word	0x80000001

08002d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff f965 	bl	800207c <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d169      	bne.n	8002e8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <ADC_Enable+0xfc>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e055      	b.n	8002e8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f934 	bl	8002054 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dec:	482b      	ldr	r0, [pc, #172]	; (8002e9c <ADC_Enable+0x100>)
 8002dee:	f7fe ffdf 	bl	8001db0 <LL_ADC_GetCommonPathInternalCh>
 8002df2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <ADC_Enable+0x104>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <ADC_Enable+0x108>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e24:	f7fe ff6e 	bl	8001d04 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e2a:	e028      	b.n	8002e7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f923 	bl	800207c <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f907 	bl	8002054 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e46:	f7fe ff5d 	bl	8001d04 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d914      	bls.n	8002e7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00d      	beq.n	8002e7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f043 0210 	orr.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1cf      	bne.n	8002e2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	8000003f 	.word	0x8000003f
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	20000008 	.word	0x20000008
 8002ea4:	053e2d63 	.word	0x053e2d63

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d008      	beq.n	80030f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e040      	b.n	8003176 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020e 	bic.w	r2, r2, #14
 8003102:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003112:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f003 021c 	and.w	r2, r3, #28
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003140:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003162:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d005      	beq.n	80031a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	e047      	b.n	8003236 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 020e 	bic.w	r2, r2, #14
 80031b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	f003 021c 	and.w	r2, r3, #28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003214:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	4798      	blx	r3
    }
  }
  return status;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324e:	e166      	b.n	800351e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8158 	beq.w	8003518 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d005      	beq.n	8003280 <HAL_GPIO_Init+0x40>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d130      	bne.n	80032e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b6:	2201      	movs	r2, #1
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0201 	and.w	r2, r3, #1
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d017      	beq.n	800331e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d123      	bne.n	8003372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80b2 	beq.w	8003518 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b4:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_GPIO_Init+0x2fc>)
 80033b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b8:	4a60      	ldr	r2, [pc, #384]	; (800353c <HAL_GPIO_Init+0x2fc>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6613      	str	r3, [r2, #96]	; 0x60
 80033c0:	4b5e      	ldr	r3, [pc, #376]	; (800353c <HAL_GPIO_Init+0x2fc>)
 80033c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033cc:	4a5c      	ldr	r2, [pc, #368]	; (8003540 <HAL_GPIO_Init+0x300>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	3302      	adds	r3, #2
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	220f      	movs	r2, #15
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033f6:	d02b      	beq.n	8003450 <HAL_GPIO_Init+0x210>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_GPIO_Init+0x304>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d025      	beq.n	800344c <HAL_GPIO_Init+0x20c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a51      	ldr	r2, [pc, #324]	; (8003548 <HAL_GPIO_Init+0x308>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01f      	beq.n	8003448 <HAL_GPIO_Init+0x208>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_GPIO_Init+0x30c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d019      	beq.n	8003444 <HAL_GPIO_Init+0x204>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a4f      	ldr	r2, [pc, #316]	; (8003550 <HAL_GPIO_Init+0x310>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_GPIO_Init+0x200>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_GPIO_Init+0x314>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00d      	beq.n	800343c <HAL_GPIO_Init+0x1fc>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <HAL_GPIO_Init+0x318>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <HAL_GPIO_Init+0x1f8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_GPIO_Init+0x31c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_GPIO_Init+0x1f4>
 8003430:	2307      	movs	r3, #7
 8003432:	e00e      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003434:	2308      	movs	r3, #8
 8003436:	e00c      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003438:	2306      	movs	r3, #6
 800343a:	e00a      	b.n	8003452 <HAL_GPIO_Init+0x212>
 800343c:	2305      	movs	r3, #5
 800343e:	e008      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003440:	2304      	movs	r3, #4
 8003442:	e006      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003444:	2303      	movs	r3, #3
 8003446:	e004      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003448:	2302      	movs	r3, #2
 800344a:	e002      	b.n	8003452 <HAL_GPIO_Init+0x212>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_GPIO_Init+0x212>
 8003450:	2300      	movs	r3, #0
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	f002 0203 	and.w	r2, r2, #3
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	4093      	lsls	r3, r2
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003462:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_GPIO_Init+0x300>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003470:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_GPIO_Init+0x320>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003494:	4a32      	ldr	r2, [pc, #200]	; (8003560 <HAL_GPIO_Init+0x320>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_GPIO_Init+0x320>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034be:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_GPIO_Init+0x320>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_GPIO_Init+0x320>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_GPIO_Init+0x320>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_GPIO_Init+0x320>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_GPIO_Init+0x320>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3301      	adds	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	f47f ae91 	bne.w	8003250 <HAL_GPIO_Init+0x10>
  }
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40021000 	.word	0x40021000
 8003540:	40010000 	.word	0x40010000
 8003544:	48000400 	.word	0x48000400
 8003548:	48000800 	.word	0x48000800
 800354c:	48000c00 	.word	0x48000c00
 8003550:	48001000 	.word	0x48001000
 8003554:	48001400 	.word	0x48001400
 8003558:	48001800 	.word	0x48001800
 800355c:	48001c00 	.word	0x48001c00
 8003560:	40010400 	.word	0x40010400

08003564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e001      	b.n	8003586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08d      	b.n	80036f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe f8c8 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	; 0x24
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e006      	b.n	800364c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800364a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d108      	bne.n	8003666 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	e007      	b.n	8003676 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003674:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003688:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003698:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
 800370c:	4613      	mov	r3, r2
 800370e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 80fd 	bne.w	8003918 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_I2C_Master_Transmit+0x30>
 8003728:	2302      	movs	r3, #2
 800372a:	e0f6      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003734:	f7fe fae6 	bl	8001d04 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f914 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0e1      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2221      	movs	r2, #33	; 0x21
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2210      	movs	r2, #16
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	893a      	ldrh	r2, [r7, #8]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2bff      	cmp	r3, #255	; 0xff
 8003786:	d906      	bls.n	8003796 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	22ff      	movs	r2, #255	; 0xff
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800378e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	e007      	b.n	80037a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d024      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8979      	ldrh	r1, [r7, #10]
 80037ea:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <HAL_I2C_Master_Transmit+0x228>)
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fa79 	bl	8003ce8 <I2C_TransferConfig>
 80037f6:	e066      	b.n	80038c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	4b48      	ldr	r3, [pc, #288]	; (8003924 <HAL_I2C_Master_Transmit+0x228>)
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fa6e 	bl	8003ce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800380c:	e05b      	b.n	80038c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	6a39      	ldr	r1, [r7, #32]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f8fd 	bl	8003a12 <I2C_WaitOnTXISFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07b      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d034      	beq.n	80038c6 <HAL_I2C_Master_Transmit+0x1ca>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d130      	bne.n	80038c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2200      	movs	r2, #0
 800386c:	2180      	movs	r1, #128	; 0x80
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f880 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e04d      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	d90e      	bls.n	80038a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	22ff      	movs	r2, #255	; 0xff
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	b2da      	uxtb	r2, r3
 8003894:	8979      	ldrh	r1, [r7, #10]
 8003896:	2300      	movs	r3, #0
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa22 	bl	8003ce8 <I2C_TransferConfig>
 80038a4:	e00f      	b.n	80038c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fa11 	bl	8003ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d19e      	bne.n	800380e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	6a39      	ldr	r1, [r7, #32]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f8e3 	bl	8003aa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e01a      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2220      	movs	r2, #32
 80038ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_I2C_Master_Transmit+0x22c>)
 80038f8:	400b      	ands	r3, r1
 80038fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	80002000 	.word	0x80002000
 8003928:	fe00e800 	.word	0xfe00e800

0800392c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d103      	bne.n	800394a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d007      	beq.n	8003968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	619a      	str	r2, [r3, #24]
  }
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	e031      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d02d      	beq.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe f9b9 	bl	8001d04 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d122      	bne.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d113      	bne.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d0be      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a1e:	e033      	b.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f87f 	bl	8003b28 <I2C_IsErrorOccurred>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e031      	b.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d025      	beq.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe f962 	bl	8001d04 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11a      	bne.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d013      	beq.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e007      	b.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d1c4      	bne.n	8003a20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aac:	e02f      	b.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f838 	bl	8003b28 <I2C_IsErrorOccurred>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02d      	b.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe f91f 	bl	8001d04 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11a      	bne.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d013      	beq.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e007      	b.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d1c8      	bne.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d068      	beq.n	8003c26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b5c:	e049      	b.n	8003bf2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d045      	beq.n	8003bf2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe f8cd 	bl	8001d04 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_IsErrorOccurred+0x54>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13a      	bne.n	8003bf2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9e:	d121      	bne.n	8003be4 <I2C_IsErrorOccurred+0xbc>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba6:	d01d      	beq.n	8003be4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d01a      	beq.n	8003be4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bbe:	f7fe f8a1 	bl	8001d04 <HAL_GetTick>
 8003bc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc4:	e00e      	b.n	8003be4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bc6:	f7fe f89d 	bl	8001d04 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b19      	cmp	r3, #25
 8003bd2:	d907      	bls.n	8003be4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003be2:	e006      	b.n	8003bf2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d1e9      	bne.n	8003bc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d003      	beq.n	8003c08 <I2C_IsErrorOccurred+0xe0>
 8003c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0aa      	beq.n	8003b5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2220      	movs	r2, #32
 8003c16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f043 0302 	orr.w	r3, r3, #2
 8003c82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01c      	beq.n	8003cd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fe45 	bl	800392c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <I2C_IsErrorOccurred+0x1bc>)
 8003cae:	400b      	ands	r3, r1
 8003cb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	fe00e800 	.word	0xfe00e800

08003ce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d00:	7a7b      	ldrb	r3, [r7, #9]
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	0d5b      	lsrs	r3, r3, #21
 8003d22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <I2C_TransferConfig+0x60>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	ea02 0103 	and.w	r1, r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	03ff63ff 	.word	0x03ff63ff

08003d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d138      	bne.n	8003dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e032      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d139      	bne.n	8003e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e033      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2224      	movs	r2, #36	; 0x24
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8c:	d102      	bne.n	8003e94 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e92:	e00b      	b.n	8003eac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d102      	bne.n	8003eaa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea8:	e000      	b.n	8003eac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003eaa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40007000 	.word	0x40007000

08003ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d141      	bne.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eca:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d131      	bne.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed8:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ede:	4a46      	ldr	r2, [pc, #280]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee8:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ef0:	4a41      	ldr	r2, [pc, #260]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ef8:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2232      	movs	r2, #50	; 0x32
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	4a3f      	ldr	r2, [pc, #252]	; (8004000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	0c9b      	lsrs	r3, r3, #18
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f0e:	e002      	b.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f16:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d102      	bne.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f2      	bne.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d158      	bne.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e057      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f42:	4a2d      	ldr	r2, [pc, #180]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f4c:	e04d      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d141      	bne.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f56:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f62:	d131      	bne.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6a:	4a23      	ldr	r2, [pc, #140]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2232      	movs	r2, #50	; 0x32
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0c9b      	lsrs	r3, r3, #18
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9a:	e002      	b.n	8003fa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d102      	bne.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f2      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d112      	bne.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e011      	b.n	8003fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fd8:	e007      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	20000008 	.word	0x20000008
 8004000:	431bde83 	.word	0x431bde83

08004004 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_PWREx_EnableVddIO2+0x1c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_PWREx_EnableVddIO2+0x1c>)
 800400e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004012:	6053      	str	r3, [r2, #4]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f000 bc08 	b.w	8004848 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004038:	4b96      	ldr	r3, [pc, #600]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004042:	4b94      	ldr	r3, [pc, #592]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80e4 	beq.w	8004222 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_RCC_OscConfig+0x4c>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	f040 808b 	bne.w	800417e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b01      	cmp	r3, #1
 800406c:	f040 8087 	bne.w	800417e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x64>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e3df      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_RCC_OscConfig+0x7e>
 8004098:	4b7e      	ldr	r3, [pc, #504]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a0:	e005      	b.n	80040ae <HAL_RCC_OscConfig+0x8a>
 80040a2:	4b7c      	ldr	r3, [pc, #496]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d223      	bcs.n	80040fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fdcc 	bl	8004c54 <RCC_SetFlashLatencyFromMSIRange>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e3c0      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c6:	4b73      	ldr	r3, [pc, #460]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a72      	ldr	r2, [pc, #456]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b70      	ldr	r3, [pc, #448]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	496d      	ldr	r1, [pc, #436]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040e4:	4b6b      	ldr	r3, [pc, #428]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	4968      	ldr	r1, [pc, #416]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	e025      	b.n	8004146 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040fa:	4b66      	ldr	r3, [pc, #408]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a65      	ldr	r2, [pc, #404]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4960      	ldr	r1, [pc, #384]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004118:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	495b      	ldr	r1, [pc, #364]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fd8c 	bl	8004c54 <RCC_SetFlashLatencyFromMSIRange>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e380      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004146:	f000 fcc1 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	4950      	ldr	r1, [pc, #320]	; (8004298 <HAL_RCC_OscConfig+0x274>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a4e      	ldr	r2, [pc, #312]	; (800429c <HAL_RCC_OscConfig+0x278>)
 8004164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004166:	4b4e      	ldr	r3, [pc, #312]	; (80042a0 <HAL_RCC_OscConfig+0x27c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fd7a 	bl	8001c64 <HAL_InitTick>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d052      	beq.n	8004220 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	e364      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d032      	beq.n	80041ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004186:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a42      	ldr	r2, [pc, #264]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004192:	f7fd fdb7 	bl	8001d04 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800419a:	f7fd fdb3 	bl	8001d04 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e34d      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041be:	f043 0308 	orr.w	r3, r3, #8
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4930      	ldr	r1, [pc, #192]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	492b      	ldr	r1, [pc, #172]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
 80041ea:	e01a      	b.n	8004222 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ec:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a28      	ldr	r2, [pc, #160]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f8:	f7fd fd84 	bl	8001d04 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004200:	f7fd fd80 	bl	8001d04 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e31a      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x1dc>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d073      	beq.n	8004316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d005      	beq.n	8004240 <HAL_RCC_OscConfig+0x21c>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d10e      	bne.n	8004258 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d063      	beq.n	8004314 <HAL_RCC_OscConfig+0x2f0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d15f      	bne.n	8004314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e2f7      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x24c>
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e025      	b.n	80042bc <HAL_RCC_OscConfig+0x298>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d114      	bne.n	80042a4 <HAL_RCC_OscConfig+0x280>
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a02      	ldr	r2, [pc, #8]	; (8004294 <HAL_RCC_OscConfig+0x270>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e013      	b.n	80042bc <HAL_RCC_OscConfig+0x298>
 8004294:	40021000 	.word	0x40021000
 8004298:	08008aac 	.word	0x08008aac
 800429c:	20000008 	.word	0x20000008
 80042a0:	2000000c 	.word	0x2000000c
 80042a4:	4ba0      	ldr	r3, [pc, #640]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a9f      	ldr	r2, [pc, #636]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b9d      	ldr	r3, [pc, #628]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a9c      	ldr	r2, [pc, #624]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fd1e 	bl	8001d04 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd fd1a 	bl	8001d04 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e2b4      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042de:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x2a8>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fd0a 	bl	8001d04 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fd06 	bl	8001d04 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e2a0      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004306:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2d0>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d060      	beq.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d005      	beq.n	8004334 <HAL_RCC_OscConfig+0x310>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d119      	bne.n	8004362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d116      	bne.n	8004362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004334:	4b7c      	ldr	r3, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_OscConfig+0x328>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e27d      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	4b76      	ldr	r3, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	4973      	ldr	r1, [pc, #460]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004360:	e040      	b.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d023      	beq.n	80043b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436a:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6e      	ldr	r2, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd fcc5 	bl	8001d04 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437e:	f7fd fcc1 	bl	8001d04 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e25b      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004390:	4b65      	ldr	r3, [pc, #404]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b62      	ldr	r3, [pc, #392]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	495f      	ldr	r1, [pc, #380]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
 80043b0:	e018      	b.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fd fca1 	bl	8001d04 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fd fc9d 	bl	8001d04 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e237      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03c      	beq.n	800446a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01c      	beq.n	8004432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	4a4a      	ldr	r2, [pc, #296]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fd fc7c 	bl	8001d04 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fd fc78 	bl	8001d04 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e212      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ef      	beq.n	8004410 <HAL_RCC_OscConfig+0x3ec>
 8004430:	e01b      	b.n	800446a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004438:	4a3b      	ldr	r2, [pc, #236]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fd fc5f 	bl	8001d04 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444a:	f7fd fc5b 	bl	8001d04 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1f5      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800445e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ef      	bne.n	800444a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a6 	beq.w	80045c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004478:	2300      	movs	r3, #0
 800447a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6593      	str	r3, [r2, #88]	; 0x58
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a0:	2301      	movs	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <HAL_RCC_OscConfig+0x508>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d118      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b0:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_RCC_OscConfig+0x508>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_RCC_OscConfig+0x508>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044bc:	f7fd fc22 	bl	8001d04 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c4:	f7fd fc1e 	bl	8001d04 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1b8      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCC_OscConfig+0x508>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d108      	bne.n	80044fc <HAL_RCC_OscConfig+0x4d8>
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044fa:	e029      	b.n	8004550 <HAL_RCC_OscConfig+0x52c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d115      	bne.n	8004530 <HAL_RCC_OscConfig+0x50c>
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800450c:	f043 0304 	orr.w	r3, r3, #4
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a03      	ldr	r2, [pc, #12]	; (8004528 <HAL_RCC_OscConfig+0x504>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004524:	e014      	b.n	8004550 <HAL_RCC_OscConfig+0x52c>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
 8004530:	4b9d      	ldr	r3, [pc, #628]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a9c      	ldr	r2, [pc, #624]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004540:	4b99      	ldr	r3, [pc, #612]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	4a98      	ldr	r2, [pc, #608]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d016      	beq.n	8004586 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fbd4 	bl	8001d04 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd fbd0 	bl	8001d04 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e168      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004576:	4b8c      	ldr	r3, [pc, #560]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ed      	beq.n	8004560 <HAL_RCC_OscConfig+0x53c>
 8004584:	e015      	b.n	80045b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004586:	f7fd fbbd 	bl	8001d04 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fd fbb9 	bl	8001d04 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	; 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e151      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a4:	4b80      	ldr	r3, [pc, #512]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ed      	bne.n	800458e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b2:	7ffb      	ldrb	r3, [r7, #31]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	4a7a      	ldr	r2, [pc, #488]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03c      	beq.n	800464a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d8:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80045da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045de:	4a72      	ldr	r2, [pc, #456]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd fb8c 	bl	8001d04 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045f0:	f7fd fb88 	bl	8001d04 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e122      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004602:	4b69      	ldr	r3, [pc, #420]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <HAL_RCC_OscConfig+0x5cc>
 8004610:	e01b      	b.n	800464a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004612:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004618:	4a63      	ldr	r2, [pc, #396]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fd fb6f 	bl	8001d04 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800462a:	f7fd fb6b 	bl	8001d04 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e105      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 800463e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80f9 	beq.w	8004846 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	2b02      	cmp	r3, #2
 800465a:	f040 80cf 	bne.w	80047fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800465e:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	429a      	cmp	r2, r3
 8004670:	d12c      	bne.n	80046cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	3b01      	subs	r3, #1
 800467e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d123      	bne.n	80046cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d11b      	bne.n	80046cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d113      	bne.n	80046cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d109      	bne.n	80046cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	3b01      	subs	r3, #1
 80046c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d071      	beq.n	80047b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d068      	beq.n	80047a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046d2:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046de:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0ac      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 80046f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046fa:	f7fd fb03 	bl	8001d04 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd faff 	bl	8001d04 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e099      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <HAL_RCC_OscConfig+0x788>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004730:	3a01      	subs	r2, #1
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800473a:	0212      	lsls	r2, r2, #8
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004742:	0852      	lsrs	r2, r2, #1
 8004744:	3a01      	subs	r2, #1
 8004746:	0552      	lsls	r2, r2, #21
 8004748:	4311      	orrs	r1, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800474e:	0852      	lsrs	r2, r2, #1
 8004750:	3a01      	subs	r2, #1
 8004752:	0652      	lsls	r2, r2, #25
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800475a:	06d2      	lsls	r2, r2, #27
 800475c:	430a      	orrs	r2, r1
 800475e:	4912      	ldr	r1, [pc, #72]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 800476a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800477c:	f7fd fac2 	bl	8001d04 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fd fabe 	bl	8001d04 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e058      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004796:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <HAL_RCC_OscConfig+0x784>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a2:	e050      	b.n	8004846 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04f      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d144      	bne.n	8004846 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d4:	f7fd fa96 	bl	8001d04 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd fa92 	bl	8001d04 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e02c      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x7b8>
 80047fa:	e024      	b.n	8004846 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d01f      	beq.n	8004842 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a12      	ldr	r2, [pc, #72]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 8004808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd fa79 	bl	8001d04 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd fa75 	bl	8001d04 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e00f      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	4905      	ldr	r1, [pc, #20]	; (8004850 <HAL_RCC_OscConfig+0x82c>)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x830>)
 800483c:	4013      	ands	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
 8004840:	e001      	b.n	8004846 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	feeefffc 	.word	0xfeeefffc

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e11d      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b90      	ldr	r3, [pc, #576]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d910      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b8d      	ldr	r3, [pc, #564]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	498b      	ldr	r1, [pc, #556]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b89      	ldr	r3, [pc, #548]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e105      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d908      	bls.n	80048ce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b7e      	ldr	r3, [pc, #504]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	497b      	ldr	r1, [pc, #492]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d079      	beq.n	80049ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d11e      	bne.n	8004920 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b75      	ldr	r3, [pc, #468]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0dc      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80048f2:	f000 fa09 	bl	8004d08 <RCC_GetSysClockFreqFromPLLSource>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d946      	bls.n	800498c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048fe:	4b6e      	ldr	r3, [pc, #440]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d140      	bne.n	800498c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800490a:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004912:	4a69      	ldr	r2, [pc, #420]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e035      	b.n	800498c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d107      	bne.n	8004938 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004928:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d115      	bne.n	8004960 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0b9      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004940:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0ad      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004950:	4b59      	ldr	r3, [pc, #356]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0a5      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004960:	f000 f8b4 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004964:	4603      	mov	r3, r0
 8004966:	4a55      	ldr	r2, [pc, #340]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d90f      	bls.n	800498c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800496c:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004980:	4a4d      	ldr	r2, [pc, #308]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800498c:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4947      	ldr	r1, [pc, #284]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fd f9b1 	bl	8001d04 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a6:	f7fd f9ad 	bl	8001d04 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e077      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049bc:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 020c 	and.w	r2, r3, #12
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d1eb      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d105      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a37      	ldr	r2, [pc, #220]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d010      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d208      	bcs.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	492b      	ldr	r1, [pc, #172]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d210      	bcs.n	8004a3e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 020f 	bic.w	r2, r3, #15
 8004a24:	4923      	ldr	r1, [pc, #140]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <HAL_RCC_ClockConfig+0x25c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e036      	b.n	8004aac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4918      	ldr	r1, [pc, #96]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4910      	ldr	r1, [pc, #64]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a7c:	f000 f826 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <HAL_RCC_ClockConfig+0x268>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <HAL_RCC_ClockConfig+0x26c>)
 8004a9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x270>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fd f8df 	bl	8001c64 <HAL_InitTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	73fb      	strb	r3, [r7, #15]

  return status;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	04c4b400 	.word	0x04c4b400
 8004ac0:	08008aac 	.word	0x08008aac
 8004ac4:	20000008 	.word	0x20000008
 8004ac8:	2000000c 	.word	0x2000000c

08004acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	4b3e      	ldr	r3, [pc, #248]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x34>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d121      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d11e      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b00:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b28:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d102      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e004      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d134      	bne.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0xac>
 8004b70:	e005      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b74:	617b      	str	r3, [r7, #20]
      break;
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b7a:	617b      	str	r3, [r7, #20]
      break;
 8004b7c:	e002      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	617b      	str	r3, [r7, #20]
      break;
 8004b82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	3301      	adds	r3, #1
 8004b90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	fb03 f202 	mul.w	r2, r3, r2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	0e5b      	lsrs	r3, r3, #25
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08008ac4 	.word	0x08008ac4
 8004bdc:	00f42400 	.word	0x00f42400
 8004be0:	007a1200 	.word	0x007a1200

08004be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bea:	681b      	ldr	r3, [r3, #0]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000008 	.word	0x20000008

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c00:	f7ff fff0 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	08008abc 	.word	0x08008abc

08004c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c2c:	f7ff ffda 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	0adb      	lsrs	r3, r3, #11
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4904      	ldr	r1, [pc, #16]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	08008abc 	.word	0x08008abc

08004c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c6c:	f7ff f906 	bl	8003e7c <HAL_PWREx_GetVoltageRange>
 8004c70:	6178      	str	r0, [r7, #20]
 8004c72:	e014      	b.n	8004c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c8c:	f7ff f8f6 	bl	8003e7c <HAL_PWREx_GetVoltageRange>
 8004c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d10b      	bne.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d913      	bls.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2ba0      	cmp	r3, #160	; 0xa0
 8004cb0:	d902      	bls.n	8004cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e00d      	b.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb8:	2301      	movs	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e00a      	b.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc2:	d902      	bls.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e004      	b.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b70      	cmp	r3, #112	; 0x70
 8004cce:	d101      	bne.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 020f 	bic.w	r2, r3, #15
 8004cdc:	4909      	ldr	r1, [pc, #36]	; (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d001      	beq.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40022000 	.word	0x40022000

08004d08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d00b      	beq.n	8004d36 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d825      	bhi.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d008      	beq.n	8004d3c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d11f      	bne.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d32:	613b      	str	r3, [r7, #16]
    break;
 8004d34:	e01f      	b.n	8004d76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d36:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d38:	613b      	str	r3, [r7, #16]
    break;
 8004d3a:	e01c      	b.n	8004d76 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e005      	b.n	8004d64 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6c:	613b      	str	r3, [r7, #16]
    break;
 8004d6e:	e002      	b.n	8004d76 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
    break;
 8004d74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	3301      	adds	r3, #1
 8004d82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	fb03 f202 	mul.w	r2, r3, r2
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0e5b      	lsrs	r3, r3, #25
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004db6:	683b      	ldr	r3, [r7, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	08008ac4 	.word	0x08008ac4

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d040      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d02a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d825      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d026      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d821      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d006      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d81d      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d010      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e14:	e018      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e16:	4b89      	ldr	r3, [pc, #548]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a88      	ldr	r2, [pc, #544]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e22:	e015      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb02 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3320      	adds	r3, #32
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fbed 	bl	800561c <RCCEx_PLLSAI2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	74fb      	strb	r3, [r7, #19]
      break;
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e56:	4b79      	ldr	r3, [pc, #484]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	4975      	ldr	r1, [pc, #468]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d030      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d82a      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d824      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea4:	d81e      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004eb0:	e018      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eb2:	4b62      	ldr	r3, [pc, #392]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a61      	ldr	r2, [pc, #388]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ebe:	e015      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fab4 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ed0:	e00c      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fb9f 	bl	800561c <RCCEx_PLLSAI2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef2:	4b52      	ldr	r3, [pc, #328]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	494e      	ldr	r1, [pc, #312]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 809f 	beq.w	800505a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f20:	4b46      	ldr	r3, [pc, #280]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b41      	ldr	r3, [pc, #260]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3a:	4a40      	ldr	r2, [pc, #256]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6593      	str	r3, [r2, #88]	; 0x58
 8004f42:	4b3e      	ldr	r3, [pc, #248]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f52:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fed1 	bl	8001d04 <HAL_GetTick>
 8004f62:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f64:	e009      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f66:	f7fc fecd 	bl	8001d04 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	74fb      	strb	r3, [r7, #19]
        break;
 8004f78:	e005      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f7a:	4b31      	ldr	r3, [pc, #196]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d15b      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d019      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb6:	4b21      	ldr	r3, [pc, #132]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fd6:	4a19      	ldr	r2, [pc, #100]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d016      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fc fe8c 	bl	8001d04 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fee:	e00b      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fc fe88 	bl	8001d04 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d902      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	74fb      	strb	r3, [r7, #19]
            break;
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ec      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10c      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	4903      	ldr	r1, [pc, #12]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	74bb      	strb	r3, [r7, #18]
 800503a:	e005      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800503c:	40021000 	.word	0x40021000
 8005040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005048:	7c7b      	ldrb	r3, [r7, #17]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d105      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504e:	4ba0      	ldr	r3, [pc, #640]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	4a9f      	ldr	r2, [pc, #636]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005058:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005066:	4b9a      	ldr	r3, [pc, #616]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f023 0203 	bic.w	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	4996      	ldr	r1, [pc, #600]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005088:	4b91      	ldr	r3, [pc, #580]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f023 020c 	bic.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	498e      	ldr	r1, [pc, #568]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050aa:	4b89      	ldr	r3, [pc, #548]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	4985      	ldr	r1, [pc, #532]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050cc:	4b80      	ldr	r3, [pc, #512]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	497d      	ldr	r1, [pc, #500]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050ee:	4b78      	ldr	r3, [pc, #480]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fc:	4974      	ldr	r1, [pc, #464]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005110:	4b6f      	ldr	r3, [pc, #444]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	496c      	ldr	r1, [pc, #432]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005132:	4b67      	ldr	r3, [pc, #412]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005140:	4963      	ldr	r1, [pc, #396]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005154:	4b5e      	ldr	r3, [pc, #376]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005162:	495b      	ldr	r1, [pc, #364]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005176:	4b56      	ldr	r3, [pc, #344]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	4952      	ldr	r1, [pc, #328]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005198:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	494a      	ldr	r1, [pc, #296]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	4941      	ldr	r1, [pc, #260]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051dc:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e2:	f023 0203 	bic.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	4939      	ldr	r1, [pc, #228]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d028      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051fe:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	4930      	ldr	r1, [pc, #192]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521c:	d106      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005228:	60d3      	str	r3, [r2, #12]
 800522a:	e011      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f8f9 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d04d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005264:	d108      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005272:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005276:	e012      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005278:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527e:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005284:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005296:	490e      	ldr	r1, [pc, #56]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a6:	d106      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b2:	60d3      	str	r3, [r2, #12]
 80052b4:	e020      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a02      	ldr	r2, [pc, #8]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	60d3      	str	r3, [r2, #12]
 80052cc:	e014      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
 80052e2:	2101      	movs	r1, #1
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f8a5 	bl	8005434 <RCCEx_PLLSAI1_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ee:	7cfb      	ldrb	r3, [r7, #19]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d028      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005312:	4947      	ldr	r1, [pc, #284]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800531e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005322:	d106      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005324:	4b42      	ldr	r3, [pc, #264]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a41      	ldr	r2, [pc, #260]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532e:	60d3      	str	r3, [r2, #12]
 8005330:	e011      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800533a:	d10c      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	2101      	movs	r1, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f876 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01e      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005362:	4b33      	ldr	r3, [pc, #204]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	492f      	ldr	r1, [pc, #188]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2102      	movs	r1, #2
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f851 	bl	8005434 <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b2:	f023 0204 	bic.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	491c      	ldr	r1, [pc, #112]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053d0:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053d6:	f023 0218 	bic.w	r2, r3, #24
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	4913      	ldr	r1, [pc, #76]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d017      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005404:	490a      	ldr	r1, [pc, #40]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a04      	ldr	r2, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005422:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005424:	7cbb      	ldrb	r3, [r7, #18]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000

08005434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005442:	4b72      	ldr	r3, [pc, #456]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800544e:	4b6f      	ldr	r3, [pc, #444]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0203 	and.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d103      	bne.n	8005466 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
       ||
 8005462:	2b00      	cmp	r3, #0
 8005464:	d142      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e03f      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d018      	beq.n	80054a6 <RCCEx_PLLSAI1_Config+0x72>
 8005474:	2b03      	cmp	r3, #3
 8005476:	d825      	bhi.n	80054c4 <RCCEx_PLLSAI1_Config+0x90>
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <RCCEx_PLLSAI1_Config+0x4e>
 800547c:	2b02      	cmp	r3, #2
 800547e:	d009      	beq.n	8005494 <RCCEx_PLLSAI1_Config+0x60>
 8005480:	e020      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005482:	4b62      	ldr	r3, [pc, #392]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11d      	bne.n	80054ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005492:	e01a      	b.n	80054ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005494:	4b5d      	ldr	r3, [pc, #372]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d116      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a4:	e013      	b.n	80054ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054a6:	4b59      	ldr	r3, [pc, #356]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054b2:	4b56      	ldr	r3, [pc, #344]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054c2:	e006      	b.n	80054d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e004      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054ca:	bf00      	nop
 80054cc:	e002      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f023 0203 	bic.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4949      	ldr	r1, [pc, #292]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 8086 	bne.w	8005600 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054f4:	4b45      	ldr	r3, [pc, #276]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a44      	ldr	r2, [pc, #272]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fc fc00 	bl	8001d04 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005506:	e009      	b.n	800551c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005508:	f7fc fbfc 	bl	8001d04 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	73fb      	strb	r3, [r7, #15]
        break;
 800551a:	e005      	b.n	8005528 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800551c:	4b3b      	ldr	r3, [pc, #236]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ef      	bne.n	8005508 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d168      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d113      	bne.n	800555c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005534:	4b35      	ldr	r3, [pc, #212]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	4b35      	ldr	r3, [pc, #212]	; (8005610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800553a:	4013      	ands	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6892      	ldr	r2, [r2, #8]
 8005540:	0211      	lsls	r1, r2, #8
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68d2      	ldr	r2, [r2, #12]
 8005546:	06d2      	lsls	r2, r2, #27
 8005548:	4311      	orrs	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6852      	ldr	r2, [r2, #4]
 800554e:	3a01      	subs	r2, #1
 8005550:	0112      	lsls	r2, r2, #4
 8005552:	430a      	orrs	r2, r1
 8005554:	492d      	ldr	r1, [pc, #180]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
 800555a:	e02d      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d115      	bne.n	800558e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005562:	4b2a      	ldr	r3, [pc, #168]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6892      	ldr	r2, [r2, #8]
 800556e:	0211      	lsls	r1, r2, #8
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6912      	ldr	r2, [r2, #16]
 8005574:	0852      	lsrs	r2, r2, #1
 8005576:	3a01      	subs	r2, #1
 8005578:	0552      	lsls	r2, r2, #21
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6852      	ldr	r2, [r2, #4]
 8005580:	3a01      	subs	r2, #1
 8005582:	0112      	lsls	r2, r2, #4
 8005584:	430a      	orrs	r2, r1
 8005586:	4921      	ldr	r1, [pc, #132]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
 800558c:	e014      	b.n	80055b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558e:	4b1f      	ldr	r3, [pc, #124]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6892      	ldr	r2, [r2, #8]
 800559a:	0211      	lsls	r1, r2, #8
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6952      	ldr	r2, [r2, #20]
 80055a0:	0852      	lsrs	r2, r2, #1
 80055a2:	3a01      	subs	r2, #1
 80055a4:	0652      	lsls	r2, r2, #25
 80055a6:	4311      	orrs	r1, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	430a      	orrs	r2, r1
 80055b2:	4916      	ldr	r1, [pc, #88]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fc fb9e 	bl	8001d04 <HAL_GetTick>
 80055c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ca:	e009      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055cc:	f7fc fb9a 	bl	8001d04 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d902      	bls.n	80055e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	73fb      	strb	r3, [r7, #15]
          break;
 80055de:	e005      	b.n	80055ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ef      	beq.n	80055cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <RCCEx_PLLSAI1_Config+0x1d8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	07ff800f 	.word	0x07ff800f
 8005614:	ff9f800f 	.word	0xff9f800f
 8005618:	f9ff800f 	.word	0xf9ff800f

0800561c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800562a:	4b72      	ldr	r3, [pc, #456]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005636:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0203 	and.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d103      	bne.n	800564e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
       ||
 800564a:	2b00      	cmp	r3, #0
 800564c:	d142      	bne.n	80056d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e03f      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d018      	beq.n	800568e <RCCEx_PLLSAI2_Config+0x72>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d825      	bhi.n	80056ac <RCCEx_PLLSAI2_Config+0x90>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <RCCEx_PLLSAI2_Config+0x4e>
 8005664:	2b02      	cmp	r3, #2
 8005666:	d009      	beq.n	800567c <RCCEx_PLLSAI2_Config+0x60>
 8005668:	e020      	b.n	80056ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800566a:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11d      	bne.n	80056b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567a:	e01a      	b.n	80056b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800567c:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d116      	bne.n	80056b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e013      	b.n	80056b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800568e:	4b59      	ldr	r3, [pc, #356]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800569a:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056aa:	e006      	b.n	80056ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e004      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d108      	bne.n	80056d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80056c2:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 0203 	bic.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4949      	ldr	r1, [pc, #292]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 8086 	bne.w	80057e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a44      	ldr	r2, [pc, #272]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e8:	f7fc fb0c 	bl	8001d04 <HAL_GetTick>
 80056ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056ee:	e009      	b.n	8005704 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056f0:	f7fc fb08 	bl	8001d04 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d902      	bls.n	8005704 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	73fb      	strb	r3, [r7, #15]
        break;
 8005702:	e005      	b.n	8005710 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005704:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ef      	bne.n	80056f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d168      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d113      	bne.n	8005744 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	0211      	lsls	r1, r2, #8
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68d2      	ldr	r2, [r2, #12]
 800572e:	06d2      	lsls	r2, r2, #27
 8005730:	4311      	orrs	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6852      	ldr	r2, [r2, #4]
 8005736:	3a01      	subs	r2, #1
 8005738:	0112      	lsls	r2, r2, #4
 800573a:	430a      	orrs	r2, r1
 800573c:	492d      	ldr	r1, [pc, #180]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800573e:	4313      	orrs	r3, r2
 8005740:	614b      	str	r3, [r1, #20]
 8005742:	e02d      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d115      	bne.n	8005776 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	0211      	lsls	r1, r2, #8
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6912      	ldr	r2, [r2, #16]
 800575c:	0852      	lsrs	r2, r2, #1
 800575e:	3a01      	subs	r2, #1
 8005760:	0552      	lsls	r2, r2, #21
 8005762:	4311      	orrs	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6852      	ldr	r2, [r2, #4]
 8005768:	3a01      	subs	r2, #1
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	430a      	orrs	r2, r1
 800576e:	4921      	ldr	r1, [pc, #132]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005770:	4313      	orrs	r3, r2
 8005772:	614b      	str	r3, [r1, #20]
 8005774:	e014      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005776:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <RCCEx_PLLSAI2_Config+0x1e4>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6952      	ldr	r2, [r2, #20]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0652      	lsls	r2, r2, #25
 800578e:	4311      	orrs	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6852      	ldr	r2, [r2, #4]
 8005794:	3a01      	subs	r2, #1
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	430a      	orrs	r2, r1
 800579a:	4916      	ldr	r1, [pc, #88]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc faaa 	bl	8001d04 <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b4:	f7fc faa6 	bl	8001d04 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
          break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000
 80057f8:	07ff800f 	.word	0x07ff800f
 80057fc:	ff9f800f 	.word	0xff9f800f
 8005800:	f9ff800f 	.word	0xf9ff800f

08005804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e049      	b.n	80058aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc f806 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f000 fb7a 	bl	8005f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e049      	b.n	8005958 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f841 	bl	8005960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f000 fb23 	bl	8005f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <HAL_TIM_PWM_Start+0x24>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e03c      	b.n	8005a12 <HAL_TIM_PWM_Start+0x9e>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d109      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x3e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e02f      	b.n	8005a12 <HAL_TIM_PWM_Start+0x9e>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_PWM_Start+0x58>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e022      	b.n	8005a12 <HAL_TIM_PWM_Start+0x9e>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d109      	bne.n	80059e6 <HAL_TIM_PWM_Start+0x72>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e015      	b.n	8005a12 <HAL_TIM_PWM_Start+0x9e>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d109      	bne.n	8005a00 <HAL_TIM_PWM_Start+0x8c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	bf14      	ite	ne
 80059f8:	2301      	movne	r3, #1
 80059fa:	2300      	moveq	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e008      	b.n	8005a12 <HAL_TIM_PWM_Start+0x9e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e09c      	b.n	8005b54 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xb6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a28:	e023      	b.n	8005a72 <HAL_TIM_PWM_Start+0xfe>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d104      	bne.n	8005a3a <HAL_TIM_PWM_Start+0xc6>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a38:	e01b      	b.n	8005a72 <HAL_TIM_PWM_Start+0xfe>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_PWM_Start+0xd6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a48:	e013      	b.n	8005a72 <HAL_TIM_PWM_Start+0xfe>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0xe6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a58:	e00b      	b.n	8005a72 <HAL_TIM_PWM_Start+0xfe>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0xf6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a68:	e003      	b.n	8005a72 <HAL_TIM_PWM_Start+0xfe>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2201      	movs	r2, #1
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fe68 	bl	8006750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <HAL_TIM_PWM_Start+0x1e8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x13e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a34      	ldr	r2, [pc, #208]	; (8005b60 <HAL_TIM_PWM_Start+0x1ec>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x13e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a32      	ldr	r2, [pc, #200]	; (8005b64 <HAL_TIM_PWM_Start+0x1f0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x13e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <HAL_TIM_PWM_Start+0x1f4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x13e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2f      	ldr	r2, [pc, #188]	; (8005b6c <HAL_TIM_PWM_Start+0x1f8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x142>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <HAL_TIM_PWM_Start+0x144>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <HAL_TIM_PWM_Start+0x1e8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01d      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d018      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <HAL_TIM_PWM_Start+0x1fc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <HAL_TIM_PWM_Start+0x200>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00e      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <HAL_TIM_PWM_Start+0x204>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <HAL_TIM_PWM_Start+0x1ec>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_TIM_PWM_Start+0x19e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <HAL_TIM_PWM_Start+0x1f0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d115      	bne.n	8005b3e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	4b18      	ldr	r3, [pc, #96]	; (8005b7c <HAL_TIM_PWM_Start+0x208>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d015      	beq.n	8005b50 <HAL_TIM_PWM_Start+0x1dc>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2a:	d011      	beq.n	8005b50 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3c:	e008      	b.n	8005b50 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e000      	b.n	8005b52 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	00010007 	.word	0x00010007

08005b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0ff      	b.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b14      	cmp	r3, #20
 8005baa:	f200 80f0 	bhi.w	8005d8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005d8f 	.word	0x08005d8f
 8005bbc:	08005d8f 	.word	0x08005d8f
 8005bc0:	08005d8f 	.word	0x08005d8f
 8005bc4:	08005c49 	.word	0x08005c49
 8005bc8:	08005d8f 	.word	0x08005d8f
 8005bcc:	08005d8f 	.word	0x08005d8f
 8005bd0:	08005d8f 	.word	0x08005d8f
 8005bd4:	08005c8b 	.word	0x08005c8b
 8005bd8:	08005d8f 	.word	0x08005d8f
 8005bdc:	08005d8f 	.word	0x08005d8f
 8005be0:	08005d8f 	.word	0x08005d8f
 8005be4:	08005ccb 	.word	0x08005ccb
 8005be8:	08005d8f 	.word	0x08005d8f
 8005bec:	08005d8f 	.word	0x08005d8f
 8005bf0:	08005d8f 	.word	0x08005d8f
 8005bf4:	08005d0d 	.word	0x08005d0d
 8005bf8:	08005d8f 	.word	0x08005d8f
 8005bfc:	08005d8f 	.word	0x08005d8f
 8005c00:	08005d8f 	.word	0x08005d8f
 8005c04:	08005d4d 	.word	0x08005d4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa2e 	bl	8006070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e0a5      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa9e 	bl	8006190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e084      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fb07 	bl	80062a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e064      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fb6f 	bl	80063b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e043      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fbb8 	bl	8006488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0204 	bic.w	r2, r2, #4
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d4a:	e023      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fbfc 	bl	8006550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d8c:	e002      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0b6      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x18a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e00:	d03e      	beq.n	8005e80 <HAL_TIM_ConfigClockSource+0xd8>
 8005e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e06:	f200 8087 	bhi.w	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0e:	f000 8086 	beq.w	8005f1e <HAL_TIM_ConfigClockSource+0x176>
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e16:	d87f      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e18:	2b70      	cmp	r3, #112	; 0x70
 8005e1a:	d01a      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0xaa>
 8005e1c:	2b70      	cmp	r3, #112	; 0x70
 8005e1e:	d87b      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e20:	2b60      	cmp	r3, #96	; 0x60
 8005e22:	d050      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0x11e>
 8005e24:	2b60      	cmp	r3, #96	; 0x60
 8005e26:	d877      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e28:	2b50      	cmp	r3, #80	; 0x50
 8005e2a:	d03c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0xfe>
 8005e2c:	2b50      	cmp	r3, #80	; 0x50
 8005e2e:	d873      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d058      	beq.n	8005ee6 <HAL_TIM_ConfigClockSource+0x13e>
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d86f      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d064      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x15e>
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d86b      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d060      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x15e>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d867      	bhi.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d05c      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x15e>
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d05a      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0x15e>
 8005e50:	e062      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e62:	f000 fc55 	bl	8006710 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	609a      	str	r2, [r3, #8]
      break;
 8005e7e:	e04f      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e90:	f000 fc3e 	bl	8006710 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea2:	609a      	str	r2, [r3, #8]
      break;
 8005ea4:	e03c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f000 fbb2 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2150      	movs	r1, #80	; 0x50
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fc0b 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e02c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f000 fbd1 	bl	800667a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2160      	movs	r1, #96	; 0x60
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fbfb 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8005ee4:	e01c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f000 fb92 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fbeb 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8005f04:	e00c      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f000 fbe2 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8005f16:	e003      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a40      	ldr	r2, [pc, #256]	; (8006050 <TIM_Base_SetConfig+0x114>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d00f      	beq.n	8005f7c <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a3d      	ldr	r2, [pc, #244]	; (8006054 <TIM_Base_SetConfig+0x118>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3c      	ldr	r2, [pc, #240]	; (8006058 <TIM_Base_SetConfig+0x11c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3b      	ldr	r2, [pc, #236]	; (800605c <TIM_Base_SetConfig+0x120>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3a      	ldr	r2, [pc, #232]	; (8006060 <TIM_Base_SetConfig+0x124>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2f      	ldr	r2, [pc, #188]	; (8006050 <TIM_Base_SetConfig+0x114>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01f      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d01b      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2c      	ldr	r2, [pc, #176]	; (8006054 <TIM_Base_SetConfig+0x118>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d017      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <TIM_Base_SetConfig+0x11c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2a      	ldr	r2, [pc, #168]	; (800605c <TIM_Base_SetConfig+0x120>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a29      	ldr	r2, [pc, #164]	; (8006060 <TIM_Base_SetConfig+0x124>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a28      	ldr	r2, [pc, #160]	; (8006064 <TIM_Base_SetConfig+0x128>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a27      	ldr	r2, [pc, #156]	; (8006068 <TIM_Base_SetConfig+0x12c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_Base_SetConfig+0x9a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	; (800606c <TIM_Base_SetConfig+0x130>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d108      	bne.n	8005fe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <TIM_Base_SetConfig+0x114>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0xf8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <TIM_Base_SetConfig+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0xf8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a11      	ldr	r2, [pc, #68]	; (8006064 <TIM_Base_SetConfig+0x128>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0xf8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <TIM_Base_SetConfig+0x12c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0xf8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a0f      	ldr	r2, [pc, #60]	; (800606c <TIM_Base_SetConfig+0x130>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d103      	bne.n	800603c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	615a      	str	r2, [r3, #20]
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800

08006070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f023 0201 	bic.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f023 0302 	bic.w	r3, r3, #2
 80060bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a2c      	ldr	r2, [pc, #176]	; (800617c <TIM_OC1_SetConfig+0x10c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00f      	beq.n	80060f0 <TIM_OC1_SetConfig+0x80>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a2b      	ldr	r2, [pc, #172]	; (8006180 <TIM_OC1_SetConfig+0x110>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <TIM_OC1_SetConfig+0x80>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <TIM_OC1_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_OC1_SetConfig+0x80>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a29      	ldr	r2, [pc, #164]	; (8006188 <TIM_OC1_SetConfig+0x118>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC1_SetConfig+0x80>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a28      	ldr	r2, [pc, #160]	; (800618c <TIM_OC1_SetConfig+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10c      	bne.n	800610a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0308 	bic.w	r3, r3, #8
 80060f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1b      	ldr	r2, [pc, #108]	; (800617c <TIM_OC1_SetConfig+0x10c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00f      	beq.n	8006132 <TIM_OC1_SetConfig+0xc2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <TIM_OC1_SetConfig+0x110>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00b      	beq.n	8006132 <TIM_OC1_SetConfig+0xc2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <TIM_OC1_SetConfig+0x114>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d007      	beq.n	8006132 <TIM_OC1_SetConfig+0xc2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a18      	ldr	r2, [pc, #96]	; (8006188 <TIM_OC1_SetConfig+0x118>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_OC1_SetConfig+0xc2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <TIM_OC1_SetConfig+0x11c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d111      	bne.n	8006156 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800

08006190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f023 0210 	bic.w	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0320 	bic.w	r3, r3, #32
 80061de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a28      	ldr	r2, [pc, #160]	; (8006290 <TIM_OC2_SetConfig+0x100>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC2_SetConfig+0x6c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a27      	ldr	r2, [pc, #156]	; (8006294 <TIM_OC2_SetConfig+0x104>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10d      	bne.n	8006218 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <TIM_OC2_SetConfig+0x100>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC2_SetConfig+0xb0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <TIM_OC2_SetConfig+0x104>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC2_SetConfig+0xb0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a1b      	ldr	r2, [pc, #108]	; (8006298 <TIM_OC2_SetConfig+0x108>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC2_SetConfig+0xb0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1a      	ldr	r2, [pc, #104]	; (800629c <TIM_OC2_SetConfig+0x10c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC2_SetConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <TIM_OC2_SetConfig+0x110>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d113      	bne.n	8006268 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800

080062a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <TIM_OC3_SetConfig+0xfc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC3_SetConfig+0x6a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <TIM_OC3_SetConfig+0x100>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10d      	bne.n	800632a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <TIM_OC3_SetConfig+0xfc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_OC3_SetConfig+0xae>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <TIM_OC3_SetConfig+0x100>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_OC3_SetConfig+0xae>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <TIM_OC3_SetConfig+0x104>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_OC3_SetConfig+0xae>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a19      	ldr	r2, [pc, #100]	; (80063ac <TIM_OC3_SetConfig+0x108>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_OC3_SetConfig+0xae>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <TIM_OC3_SetConfig+0x10c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d113      	bne.n	800637a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	40012c00 	.word	0x40012c00
 80063a4:	40013400 	.word	0x40013400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800

080063b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a18      	ldr	r2, [pc, #96]	; (8006474 <TIM_OC4_SetConfig+0xc0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <TIM_OC4_SetConfig+0x84>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a17      	ldr	r2, [pc, #92]	; (8006478 <TIM_OC4_SetConfig+0xc4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_OC4_SetConfig+0x84>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <TIM_OC4_SetConfig+0xc8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_OC4_SetConfig+0x84>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a15      	ldr	r2, [pc, #84]	; (8006480 <TIM_OC4_SetConfig+0xcc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC4_SetConfig+0x84>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a14      	ldr	r2, [pc, #80]	; (8006484 <TIM_OC4_SetConfig+0xd0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d109      	bne.n	800644c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40013400 	.word	0x40013400
 800647c:	40014000 	.word	0x40014000
 8006480:	40014400 	.word	0x40014400
 8006484:	40014800 	.word	0x40014800

08006488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <TIM_OC5_SetConfig+0xb4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_OC5_SetConfig+0x7a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a16      	ldr	r2, [pc, #88]	; (8006540 <TIM_OC5_SetConfig+0xb8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_OC5_SetConfig+0x7a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <TIM_OC5_SetConfig+0xbc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_OC5_SetConfig+0x7a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a14      	ldr	r2, [pc, #80]	; (8006548 <TIM_OC5_SetConfig+0xc0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC5_SetConfig+0x7a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a13      	ldr	r2, [pc, #76]	; (800654c <TIM_OC5_SetConfig+0xc4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d109      	bne.n	8006516 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800

08006550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	051b      	lsls	r3, r3, #20
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <TIM_OC6_SetConfig+0xb8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00f      	beq.n	80065cc <TIM_OC6_SetConfig+0x7c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <TIM_OC6_SetConfig+0xbc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00b      	beq.n	80065cc <TIM_OC6_SetConfig+0x7c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a16      	ldr	r2, [pc, #88]	; (8006610 <TIM_OC6_SetConfig+0xc0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <TIM_OC6_SetConfig+0x7c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a15      	ldr	r2, [pc, #84]	; (8006614 <TIM_OC6_SetConfig+0xc4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC6_SetConfig+0x7c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a14      	ldr	r2, [pc, #80]	; (8006618 <TIM_OC6_SetConfig+0xc8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d109      	bne.n	80065e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 030a 	bic.w	r3, r3, #10
 8006658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f023 0210 	bic.w	r2, r3, #16
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	031b      	lsls	r3, r3, #12
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f043 0307 	orr.w	r3, r3, #7
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	431a      	orrs	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2201      	movs	r2, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1a      	ldr	r2, [r3, #32]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	fa01 f303 	lsl.w	r3, r1, r3
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e068      	b.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01d      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006826:	d018      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a13      	ldr	r2, [pc, #76]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d10c      	bne.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4313      	orrs	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40014000 	.word	0x40014000

080068ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e042      	b.n	8006944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fb f8d9 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2224      	movs	r2, #36	; 0x24
 80068da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 feb4 	bl	8007664 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fbb5 	bl	800706c <UART_SetConfig>
 8006902:	4603      	mov	r3, r0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e01b      	b.n	8006944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800691a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800692a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 ff33 	bl	80077a8 <UART_CheckIdleState>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006960:	2b20      	cmp	r3, #32
 8006962:	d137      	bne.n	80069d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_UART_Receive_IT+0x24>
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e030      	b.n	80069d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_UART_Receive_IT+0x94>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01f      	beq.n	80069c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fffe 	bl	80079cc <UART_Start_Receive_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	e000      	b.n	80069d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3728      	adds	r7, #40	; 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40008000 	.word	0x40008000

080069e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b0ba      	sub	sp, #232	; 0xe8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a12:	4013      	ands	r3, r2
 8006a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11b      	bne.n	8006a58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d015      	beq.n	8006a58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 82e3 	beq.w	8007014 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
      }
      return;
 8006a56:	e2dd      	b.n	8007014 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8123 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a66:	4b8d      	ldr	r3, [pc, #564]	; (8006c9c <HAL_UART_IRQHandler+0x2b8>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a72:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <HAL_UART_IRQHandler+0x2bc>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8116 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <HAL_UART_IRQHandler+0xc8>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <HAL_UART_IRQHandler+0xf8>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f043 0204 	orr.w	r2, r3, #4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0x128>
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2204      	movs	r2, #4
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b28:	4b5c      	ldr	r3, [pc, #368]	; (8006c9c <HAL_UART_IRQHandler+0x2b8>)
 8006b2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3e:	f043 0208 	orr.w	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <HAL_UART_IRQHandler+0x196>
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8249 	beq.w	8007018 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d013      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d054      	beq.n	8006c88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f816 	bl	8007c10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d146      	bne.n	8006c80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1d9      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <HAL_UART_IRQHandler+0x2c0>)
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fc fa92 	bl	8003182 <HAL_DMA_Abort_IT>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006c72:	4610      	mov	r0, r2
 8006c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c76:	e00f      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9e1 	bl	8007040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7e:	e00b      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9dd 	bl	8007040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c86:	e007      	b.n	8006c98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9d9 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c96:	e1bf      	b.n	8007018 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	bf00      	nop
    return;
 8006c9a:	e1bd      	b.n	8007018 <HAL_UART_IRQHandler+0x634>
 8006c9c:	10000001 	.word	0x10000001
 8006ca0:	04000120 	.word	0x04000120
 8006ca4:	08007cdd 	.word	0x08007cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 8153 	bne.w	8006f58 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 814c 	beq.w	8006f58 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8145 	beq.w	8006f58 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	f040 80bb 	bne.w	8006e5c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 818f 	beq.w	800701c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f080 8187 	bcs.w	800701c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 8087 	bne.w	8006e3a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1da      	bne.n	8006d2c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e1      	bne.n	8006d76 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e3      	bne.n	8006db2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e08:	f023 0310 	bic.w	r3, r3, #16
 8006e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e4      	bne.n	8006df8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fc f948 	bl	80030ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8fd 	bl	8007054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e5a:	e0df      	b.n	800701c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80d1 	beq.w	8007020 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80cc 	beq.w	8007020 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006eac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e4      	bne.n	8006e88 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e1      	bne.n	8006ebe <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f87f 	bl	8007054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f56:	e063      	b.n	8007020 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00e      	beq.n	8006f82 <HAL_UART_IRQHandler+0x59e>
 8006f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fc14 	bl	80087a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f80:	e051      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d014      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d03a      	beq.n	8007024 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
    }
    return;
 8006fb6:	e035      	b.n	8007024 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x5f4>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fe99 	bl	8007d08 <UART_EndTransmit_IT>
    return;
 8006fd6:	e026      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x614>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fbed 	bl	80087d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff6:	e016      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_UART_IRQHandler+0x642>
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007008:	2b00      	cmp	r3, #0
 800700a:	da0c      	bge.n	8007026 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fbd5 	bl	80087bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007012:	e008      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
      return;
 8007014:	bf00      	nop
 8007016:	e006      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
    return;
 8007018:	bf00      	nop
 800701a:	e004      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
      return;
 800701c:	bf00      	nop
 800701e:	e002      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
      return;
 8007020:	bf00      	nop
 8007022:	e000      	b.n	8007026 <HAL_UART_IRQHandler+0x642>
    return;
 8007024:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007026:	37e8      	adds	r7, #232	; 0xe8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800706c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007070:	b08c      	sub	sp, #48	; 0x30
 8007072:	af00      	add	r7, sp, #0
 8007074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	431a      	orrs	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	431a      	orrs	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	4313      	orrs	r3, r2
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4baa      	ldr	r3, [pc, #680]	; (8007344 <UART_SetConfig+0x2d8>)
 800709c:	4013      	ands	r3, r2
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a9f      	ldr	r2, [pc, #636]	; (8007348 <UART_SetConfig+0x2dc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d4:	4313      	orrs	r3, r2
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ec:	430b      	orrs	r3, r1
 80070ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	f023 010f 	bic.w	r1, r3, #15
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a90      	ldr	r2, [pc, #576]	; (800734c <UART_SetConfig+0x2e0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d125      	bne.n	800715c <UART_SetConfig+0xf0>
 8007110:	4b8f      	ldr	r3, [pc, #572]	; (8007350 <UART_SetConfig+0x2e4>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d81a      	bhi.n	8007154 <UART_SetConfig+0xe8>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0xb8>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007135 	.word	0x08007135
 8007128:	08007145 	.word	0x08007145
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800714d 	.word	0x0800714d
 8007134:	2301      	movs	r3, #1
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e116      	b.n	800736a <UART_SetConfig+0x2fe>
 800713c:	2302      	movs	r3, #2
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e112      	b.n	800736a <UART_SetConfig+0x2fe>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e10e      	b.n	800736a <UART_SetConfig+0x2fe>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e10a      	b.n	800736a <UART_SetConfig+0x2fe>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e106      	b.n	800736a <UART_SetConfig+0x2fe>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a7c      	ldr	r2, [pc, #496]	; (8007354 <UART_SetConfig+0x2e8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d138      	bne.n	80071d8 <UART_SetConfig+0x16c>
 8007166:	4b7a      	ldr	r3, [pc, #488]	; (8007350 <UART_SetConfig+0x2e4>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d82d      	bhi.n	80071d0 <UART_SetConfig+0x164>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0x110>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071d1 	.word	0x080071d1
 8007184:	080071d1 	.word	0x080071d1
 8007188:	080071d1 	.word	0x080071d1
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071d1 	.word	0x080071d1
 8007194:	080071d1 	.word	0x080071d1
 8007198:	080071d1 	.word	0x080071d1
 800719c:	080071b9 	.word	0x080071b9
 80071a0:	080071d1 	.word	0x080071d1
 80071a4:	080071d1 	.word	0x080071d1
 80071a8:	080071d1 	.word	0x080071d1
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b6:	e0d8      	b.n	800736a <UART_SetConfig+0x2fe>
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071be:	e0d4      	b.n	800736a <UART_SetConfig+0x2fe>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c6:	e0d0      	b.n	800736a <UART_SetConfig+0x2fe>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e0cc      	b.n	800736a <UART_SetConfig+0x2fe>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e0c8      	b.n	800736a <UART_SetConfig+0x2fe>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5e      	ldr	r2, [pc, #376]	; (8007358 <UART_SetConfig+0x2ec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d125      	bne.n	800722e <UART_SetConfig+0x1c2>
 80071e2:	4b5b      	ldr	r3, [pc, #364]	; (8007350 <UART_SetConfig+0x2e4>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	d016      	beq.n	800721e <UART_SetConfig+0x1b2>
 80071f0:	2b30      	cmp	r3, #48	; 0x30
 80071f2:	d818      	bhi.n	8007226 <UART_SetConfig+0x1ba>
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d00a      	beq.n	800720e <UART_SetConfig+0x1a2>
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d814      	bhi.n	8007226 <UART_SetConfig+0x1ba>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <UART_SetConfig+0x19a>
 8007200:	2b10      	cmp	r3, #16
 8007202:	d008      	beq.n	8007216 <UART_SetConfig+0x1aa>
 8007204:	e00f      	b.n	8007226 <UART_SetConfig+0x1ba>
 8007206:	2300      	movs	r3, #0
 8007208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720c:	e0ad      	b.n	800736a <UART_SetConfig+0x2fe>
 800720e:	2302      	movs	r3, #2
 8007210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007214:	e0a9      	b.n	800736a <UART_SetConfig+0x2fe>
 8007216:	2304      	movs	r3, #4
 8007218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721c:	e0a5      	b.n	800736a <UART_SetConfig+0x2fe>
 800721e:	2308      	movs	r3, #8
 8007220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007224:	e0a1      	b.n	800736a <UART_SetConfig+0x2fe>
 8007226:	2310      	movs	r3, #16
 8007228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722c:	e09d      	b.n	800736a <UART_SetConfig+0x2fe>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a4a      	ldr	r2, [pc, #296]	; (800735c <UART_SetConfig+0x2f0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d125      	bne.n	8007284 <UART_SetConfig+0x218>
 8007238:	4b45      	ldr	r3, [pc, #276]	; (8007350 <UART_SetConfig+0x2e4>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007242:	2bc0      	cmp	r3, #192	; 0xc0
 8007244:	d016      	beq.n	8007274 <UART_SetConfig+0x208>
 8007246:	2bc0      	cmp	r3, #192	; 0xc0
 8007248:	d818      	bhi.n	800727c <UART_SetConfig+0x210>
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d00a      	beq.n	8007264 <UART_SetConfig+0x1f8>
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d814      	bhi.n	800727c <UART_SetConfig+0x210>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <UART_SetConfig+0x1f0>
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d008      	beq.n	800726c <UART_SetConfig+0x200>
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x210>
 800725c:	2300      	movs	r3, #0
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e082      	b.n	800736a <UART_SetConfig+0x2fe>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e07e      	b.n	800736a <UART_SetConfig+0x2fe>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007272:	e07a      	b.n	800736a <UART_SetConfig+0x2fe>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727a:	e076      	b.n	800736a <UART_SetConfig+0x2fe>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e072      	b.n	800736a <UART_SetConfig+0x2fe>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a35      	ldr	r2, [pc, #212]	; (8007360 <UART_SetConfig+0x2f4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d12a      	bne.n	80072e4 <UART_SetConfig+0x278>
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <UART_SetConfig+0x2e4>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729c:	d01a      	beq.n	80072d4 <UART_SetConfig+0x268>
 800729e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a2:	d81b      	bhi.n	80072dc <UART_SetConfig+0x270>
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d00c      	beq.n	80072c4 <UART_SetConfig+0x258>
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d815      	bhi.n	80072dc <UART_SetConfig+0x270>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <UART_SetConfig+0x250>
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d008      	beq.n	80072cc <UART_SetConfig+0x260>
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x270>
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c2:	e052      	b.n	800736a <UART_SetConfig+0x2fe>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e04e      	b.n	800736a <UART_SetConfig+0x2fe>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e04a      	b.n	800736a <UART_SetConfig+0x2fe>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e046      	b.n	800736a <UART_SetConfig+0x2fe>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e042      	b.n	800736a <UART_SetConfig+0x2fe>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a17      	ldr	r2, [pc, #92]	; (8007348 <UART_SetConfig+0x2dc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d13a      	bne.n	8007364 <UART_SetConfig+0x2f8>
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <UART_SetConfig+0x2e4>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fc:	d01a      	beq.n	8007334 <UART_SetConfig+0x2c8>
 80072fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007302:	d81b      	bhi.n	800733c <UART_SetConfig+0x2d0>
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d00c      	beq.n	8007324 <UART_SetConfig+0x2b8>
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d815      	bhi.n	800733c <UART_SetConfig+0x2d0>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <UART_SetConfig+0x2b0>
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007318:	d008      	beq.n	800732c <UART_SetConfig+0x2c0>
 800731a:	e00f      	b.n	800733c <UART_SetConfig+0x2d0>
 800731c:	2300      	movs	r3, #0
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e022      	b.n	800736a <UART_SetConfig+0x2fe>
 8007324:	2302      	movs	r3, #2
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732a:	e01e      	b.n	800736a <UART_SetConfig+0x2fe>
 800732c:	2304      	movs	r3, #4
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e01a      	b.n	800736a <UART_SetConfig+0x2fe>
 8007334:	2308      	movs	r3, #8
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e016      	b.n	800736a <UART_SetConfig+0x2fe>
 800733c:	2310      	movs	r3, #16
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e012      	b.n	800736a <UART_SetConfig+0x2fe>
 8007344:	cfff69f3 	.word	0xcfff69f3
 8007348:	40008000 	.word	0x40008000
 800734c:	40013800 	.word	0x40013800
 8007350:	40021000 	.word	0x40021000
 8007354:	40004400 	.word	0x40004400
 8007358:	40004800 	.word	0x40004800
 800735c:	40004c00 	.word	0x40004c00
 8007360:	40005000 	.word	0x40005000
 8007364:	2310      	movs	r3, #16
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4aae      	ldr	r2, [pc, #696]	; (8007628 <UART_SetConfig+0x5bc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	f040 8097 	bne.w	80074a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800737a:	2b08      	cmp	r3, #8
 800737c:	d823      	bhi.n	80073c6 <UART_SetConfig+0x35a>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x318>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073c7 	.word	0x080073c7
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073c7 	.word	0x080073c7
 8007394:	080073b7 	.word	0x080073b7
 8007398:	080073c7 	.word	0x080073c7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073c7 	.word	0x080073c7
 80073a4:	080073bf 	.word	0x080073bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fd fc28 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80073ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ae:	e010      	b.n	80073d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b0:	4b9e      	ldr	r3, [pc, #632]	; (800762c <UART_SetConfig+0x5c0>)
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073b4:	e00d      	b.n	80073d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b6:	f7fd fb89 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073bc:	e009      	b.n	80073d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073c4:	e005      	b.n	80073d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8130 	beq.w	800763a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	4a94      	ldr	r2, [pc, #592]	; (8007630 <UART_SetConfig+0x5c4>)
 80073e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d305      	bcc.n	800740a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007410:	e113      	b.n	800763a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2200      	movs	r2, #0
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	60fa      	str	r2, [r7, #12]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	4a84      	ldr	r2, [pc, #528]	; (8007630 <UART_SetConfig+0x5c4>)
 8007420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007424:	b29b      	uxth	r3, r3
 8007426:	2200      	movs	r2, #0
 8007428:	603b      	str	r3, [r7, #0]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007434:	f7f8 fef4 	bl	8000220 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	020b      	lsls	r3, r1, #8
 800744a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800744e:	0202      	lsls	r2, r0, #8
 8007450:	6979      	ldr	r1, [r7, #20]
 8007452:	6849      	ldr	r1, [r1, #4]
 8007454:	0849      	lsrs	r1, r1, #1
 8007456:	2000      	movs	r0, #0
 8007458:	460c      	mov	r4, r1
 800745a:	4605      	mov	r5, r0
 800745c:	eb12 0804 	adds.w	r8, r2, r4
 8007460:	eb43 0905 	adc.w	r9, r3, r5
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	469a      	mov	sl, r3
 800746c:	4693      	mov	fp, r2
 800746e:	4652      	mov	r2, sl
 8007470:	465b      	mov	r3, fp
 8007472:	4640      	mov	r0, r8
 8007474:	4649      	mov	r1, r9
 8007476:	f7f8 fed3 	bl	8000220 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4613      	mov	r3, r2
 8007480:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007488:	d308      	bcc.n	800749c <UART_SetConfig+0x430>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007490:	d204      	bcs.n	800749c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	60da      	str	r2, [r3, #12]
 800749a:	e0ce      	b.n	800763a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074a2:	e0ca      	b.n	800763a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ac:	d166      	bne.n	800757c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80074ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d827      	bhi.n	8007506 <UART_SetConfig+0x49a>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <UART_SetConfig+0x450>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	08007507 	.word	0x08007507
 80074cc:	080074f7 	.word	0x080074f7
 80074d0:	08007507 	.word	0x08007507
 80074d4:	08007507 	.word	0x08007507
 80074d8:	08007507 	.word	0x08007507
 80074dc:	080074ff 	.word	0x080074ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e0:	f7fd fb8c 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80074e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074e6:	e014      	b.n	8007512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e8:	f7fd fb9e 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 80074ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ee:	e010      	b.n	8007512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b4e      	ldr	r3, [pc, #312]	; (800762c <UART_SetConfig+0x5c0>)
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074f4:	e00d      	b.n	8007512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fd fae9 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074fc:	e009      	b.n	8007512 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007504:	e005      	b.n	8007512 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8090 	beq.w	800763a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	4a44      	ldr	r2, [pc, #272]	; (8007630 <UART_SetConfig+0x5c4>)
 8007520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007524:	461a      	mov	r2, r3
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	fbb3 f3f2 	udiv	r3, r3, r2
 800752c:	005a      	lsls	r2, r3, #1
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	441a      	add	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	fbb2 f3f3 	udiv	r3, r2, r3
 800753e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	d916      	bls.n	8007574 <UART_SetConfig+0x508>
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d212      	bcs.n	8007574 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f023 030f 	bic.w	r3, r3, #15
 8007556:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	b29b      	uxth	r3, r3
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	b29a      	uxth	r2, r3
 8007564:	8bfb      	ldrh	r3, [r7, #30]
 8007566:	4313      	orrs	r3, r2
 8007568:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	8bfa      	ldrh	r2, [r7, #30]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	e062      	b.n	800763a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800757a:	e05e      	b.n	800763a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800757c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007580:	2b08      	cmp	r3, #8
 8007582:	d828      	bhi.n	80075d6 <UART_SetConfig+0x56a>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <UART_SetConfig+0x520>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075c1 	.word	0x080075c1
 8007598:	080075d7 	.word	0x080075d7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075d7 	.word	0x080075d7
 80075a4:	080075d7 	.word	0x080075d7
 80075a8:	080075d7 	.word	0x080075d7
 80075ac:	080075cf 	.word	0x080075cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b0:	f7fd fb24 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 80075b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b6:	e014      	b.n	80075e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b8:	f7fd fb36 	bl	8004c28 <HAL_RCC_GetPCLK2Freq>
 80075bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075be:	e010      	b.n	80075e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c0:	4b1a      	ldr	r3, [pc, #104]	; (800762c <UART_SetConfig+0x5c0>)
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c4:	e00d      	b.n	80075e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fd fa81 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075cc:	e009      	b.n	80075e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d4:	e005      	b.n	80075e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075e0:	bf00      	nop
    }

    if (pclk != 0U)
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d028      	beq.n	800763a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	4a10      	ldr	r2, [pc, #64]	; (8007630 <UART_SetConfig+0x5c4>)
 80075ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	441a      	add	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d910      	bls.n	8007634 <UART_SetConfig+0x5c8>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d20c      	bcs.n	8007634 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	b29a      	uxth	r2, r3
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	e009      	b.n	800763a <UART_SetConfig+0x5ce>
 8007626:	bf00      	nop
 8007628:	40008000 	.word	0x40008000
 800762c:	00f42400 	.word	0x00f42400
 8007630:	08008af4 	.word	0x08008af4
      }
      else
      {
        ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2201      	movs	r2, #1
 800763e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2201      	movs	r2, #1
 8007646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2200      	movs	r2, #0
 8007654:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007656:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800765a:	4618      	mov	r0, r3
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007762:	d10a      	bne.n	800777a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b098      	sub	sp, #96	; 0x60
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077b8:	f7fa faa4 	bl	8001d04 <HAL_GetTick>
 80077bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d12f      	bne.n	800782c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d4:	2200      	movs	r2, #0
 80077d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f88e 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d022      	beq.n	800782c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fa:	653b      	str	r3, [r7, #80]	; 0x50
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
 8007806:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800780a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e6      	bne.n	80077e6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e063      	b.n	80078f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b04      	cmp	r3, #4
 8007838:	d149      	bne.n	80078ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800783a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	2200      	movs	r2, #0
 8007844:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f857 	bl	80078fc <UART_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d03c      	beq.n	80078ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	623b      	str	r3, [r7, #32]
   return(result);
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
 8007874:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e6      	bne.n	8007854 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3308      	adds	r3, #8
 800788c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	60fb      	str	r3, [r7, #12]
   return(result);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	64bb      	str	r3, [r7, #72]	; 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078a6:	61fa      	str	r2, [r7, #28]
 80078a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	69b9      	ldr	r1, [r7, #24]
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	617b      	str	r3, [r7, #20]
   return(result);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e5      	bne.n	8007886 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e012      	b.n	80078f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3758      	adds	r7, #88	; 0x58
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790c:	e049      	b.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d045      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007916:	f7fa f9f5 	bl	8001d04 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	429a      	cmp	r2, r3
 8007924:	d302      	bcc.n	800792c <UART_WaitOnFlagUntilTimeout+0x30>
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e048      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0304 	and.w	r3, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d031      	beq.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b08      	cmp	r3, #8
 800794a:	d110      	bne.n	800796e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2208      	movs	r2, #8
 8007952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f95b 	bl	8007c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2208      	movs	r2, #8
 800795e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e029      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800797c:	d111      	bne.n	80079a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f941 	bl	8007c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e00f      	b.n	80079c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4013      	ands	r3, r2
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	bf0c      	ite	eq
 80079b2:	2301      	moveq	r3, #1
 80079b4:	2300      	movne	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d0a6      	beq.n	800790e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b0a3      	sub	sp, #140	; 0x8c
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fe:	d10e      	bne.n	8007a1e <UART_Start_Receive_IT+0x52>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <UART_Start_Receive_IT+0x48>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a12:	e02d      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	22ff      	movs	r2, #255	; 0xff
 8007a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a1c:	e028      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <UART_Start_Receive_IT+0x76>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <UART_Start_Receive_IT+0x6c>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a36:	e01b      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	227f      	movs	r2, #127	; 0x7f
 8007a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a40:	e016      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a4a:	d10d      	bne.n	8007a68 <UART_Start_Receive_IT+0x9c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <UART_Start_Receive_IT+0x92>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	227f      	movs	r2, #127	; 0x7f
 8007a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a5c:	e008      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	223f      	movs	r2, #63	; 0x3f
 8007a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a66:	e003      	b.n	8007a70 <UART_Start_Receive_IT+0xa4>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2222      	movs	r2, #34	; 0x22
 8007a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007aa4:	673a      	str	r2, [r7, #112]	; 0x70
 8007aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e3      	bne.n	8007a80 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac0:	d14f      	bne.n	8007b62 <UART_Start_Receive_IT+0x196>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ac8:	88fa      	ldrh	r2, [r7, #6]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d349      	bcc.n	8007b62 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d107      	bne.n	8007ae8 <UART_Start_Receive_IT+0x11c>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a47      	ldr	r2, [pc, #284]	; (8007c00 <UART_Start_Receive_IT+0x234>)
 8007ae4:	675a      	str	r2, [r3, #116]	; 0x74
 8007ae6:	e002      	b.n	8007aee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a46      	ldr	r2, [pc, #280]	; (8007c04 <UART_Start_Receive_IT+0x238>)
 8007aec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01a      	beq.n	8007b2c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e4      	bne.n	8007af6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e5      	bne.n	8007b2c <UART_Start_Receive_IT+0x160>
 8007b60:	e046      	b.n	8007bf0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6a:	d107      	bne.n	8007b7c <UART_Start_Receive_IT+0x1b0>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <UART_Start_Receive_IT+0x23c>)
 8007b78:	675a      	str	r2, [r3, #116]	; 0x74
 8007b7a:	e002      	b.n	8007b82 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a23      	ldr	r2, [pc, #140]	; (8007c0c <UART_Start_Receive_IT+0x240>)
 8007b80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d019      	beq.n	8007bbe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b9e:	677b      	str	r3, [r7, #116]	; 0x74
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <UART_Start_Receive_IT+0x1be>
 8007bbc:	e018      	b.n	8007bf0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f043 0320 	orr.w	r3, r3, #32
 8007bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	378c      	adds	r7, #140	; 0x8c
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	0800843d 	.word	0x0800843d
 8007c04:	080080d9 	.word	0x080080d9
 8007c08:	08007f1d 	.word	0x08007f1d
 8007c0c:	08007d61 	.word	0x08007d61

08007c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b095      	sub	sp, #84	; 0x54
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	643b      	str	r3, [r7, #64]	; 0x40
 8007c38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e3      	bne.n	8007c4a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d118      	bne.n	8007cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f023 0310 	bic.w	r3, r3, #16
 8007c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6979      	ldr	r1, [r7, #20]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e6      	bne.n	8007c8a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007cd0:	bf00      	nop
 8007cd2:	3754      	adds	r7, #84	; 0x54
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff f9a0 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff f96b 	bl	800702c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d56:	bf00      	nop
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b09c      	sub	sp, #112	; 0x70
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d78:	2b22      	cmp	r3, #34	; 0x22
 8007d7a:	f040 80be 	bne.w	8007efa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d8c:	b2d9      	uxtb	r1, r3
 8007d8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d98:	400a      	ands	r2, r1
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 80a3 	bne.w	8007f0e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007de8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e6      	bne.n	8007dc8 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	667b      	str	r3, [r7, #100]	; 0x64
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e5      	bne.n	8007dfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a34      	ldr	r2, [pc, #208]	; (8007f18 <UART_RxISR_8BIT+0x1b8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d01f      	beq.n	8007e8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d018      	beq.n	8007e8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	623b      	str	r3, [r7, #32]
   return(result);
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e6      	bne.n	8007e5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d12e      	bne.n	8007ef2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0310 	bic.w	r3, r3, #16
 8007eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e6      	bne.n	8007e9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d103      	bne.n	8007ee2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2210      	movs	r2, #16
 8007ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff f8b2 	bl	8007054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef0:	e00d      	b.n	8007f0e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f8 fe0e 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 8007ef8:	e009      	b.n	8007f0e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	8b1b      	ldrh	r3, [r3, #24]
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0208 	orr.w	r2, r2, #8
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	831a      	strh	r2, [r3, #24]
}
 8007f0e:	bf00      	nop
 8007f10:	3770      	adds	r7, #112	; 0x70
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40008000 	.word	0x40008000

08007f1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b09c      	sub	sp, #112	; 0x70
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f34:	2b22      	cmp	r3, #34	; 0x22
 8007f36:	f040 80be 	bne.w	80080b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f48:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007f4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f52:	4013      	ands	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5e:	1c9a      	adds	r2, r3, #2
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 80a3 	bne.w	80080ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f98:	667b      	str	r3, [r7, #100]	; 0x64
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fa4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e6      	bne.n	8007f84 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fd6:	643a      	str	r2, [r7, #64]	; 0x40
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e5      	bne.n	8007fb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a34      	ldr	r2, [pc, #208]	; (80080d4 <UART_RxISR_16BIT+0x1b8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d01f      	beq.n	8008048 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d018      	beq.n	8008048 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	61fb      	str	r3, [r7, #28]
   return(result);
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800802a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008036:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800803a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e6      	bne.n	8008016 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804c:	2b01      	cmp	r3, #1
 800804e:	d12e      	bne.n	80080ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	60bb      	str	r3, [r7, #8]
   return(result);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f023 0310 	bic.w	r3, r3, #16
 800806a:	65bb      	str	r3, [r7, #88]	; 0x58
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6979      	ldr	r1, [r7, #20]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	613b      	str	r3, [r7, #16]
   return(result);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e6      	bne.n	8008056 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b10      	cmp	r3, #16
 8008094:	d103      	bne.n	800809e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2210      	movs	r2, #16
 800809c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7fe ffd4 	bl	8007054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080ac:	e00d      	b.n	80080ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7f8 fd30 	bl	8000b14 <HAL_UART_RxCpltCallback>
}
 80080b4:	e009      	b.n	80080ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	8b1b      	ldrh	r3, [r3, #24]
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0208 	orr.w	r2, r2, #8
 80080c6:	b292      	uxth	r2, r2
 80080c8:	831a      	strh	r2, [r3, #24]
}
 80080ca:	bf00      	nop
 80080cc:	3770      	adds	r7, #112	; 0x70
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40008000 	.word	0x40008000

080080d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b0ac      	sub	sp, #176	; 0xb0
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	f040 8182 	bne.w	8008418 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800811a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800811e:	e125      	b.n	800836c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008126:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800812a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800812e:	b2d9      	uxtb	r1, r3
 8008130:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008134:	b2da      	uxtb	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	400a      	ands	r2, r1
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	2b00      	cmp	r3, #0
 8008170:	d053      	beq.n	800821a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800817e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008198:	f043 0201 	orr.w	r2, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80081ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2202      	movs	r2, #2
 80081c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f043 0204 	orr.w	r2, r3, #4
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2204      	movs	r2, #4
 80081f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f8:	f043 0202 	orr.w	r2, r3, #2
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	2b00      	cmp	r3, #0
 800820a:	d006      	beq.n	800821a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fe ff17 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	f040 80a2 	bne.w	800836c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800823c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800824a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800824c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008250:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e4      	bne.n	8008228 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800826e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3308      	adds	r3, #8
 8008282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008286:	66ba      	str	r2, [r7, #104]	; 0x68
 8008288:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800828c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e1      	bne.n	800825e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a60      	ldr	r2, [pc, #384]	; (8008434 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d021      	beq.n	80082fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01a      	beq.n	80082fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082e8:	657b      	str	r3, [r7, #84]	; 0x54
 80082ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e4      	bne.n	80082c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d130      	bne.n	8008366 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	f023 0310 	bic.w	r3, r3, #16
 800831e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800832c:	643b      	str	r3, [r7, #64]	; 0x40
 800832e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e4      	bne.n	800830a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b10      	cmp	r3, #16
 800834c:	d103      	bne.n	8008356 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2210      	movs	r2, #16
 8008354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fe fe78 	bl	8007054 <HAL_UARTEx_RxEventCallback>
 8008364:	e002      	b.n	800836c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f8 fbd4 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800836c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	f47f aecf 	bne.w	8008120 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008388:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800838c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008390:	2b00      	cmp	r3, #0
 8008392:	d04b      	beq.n	800842c <UART_RxISR_8BIT_FIFOEN+0x354>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800839a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800839e:	429a      	cmp	r2, r3
 80083a0:	d244      	bcs.n	800842c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e3      	bne.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a16      	ldr	r2, [pc, #88]	; (8008438 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80083de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f043 0320 	orr.w	r3, r3, #32
 80083f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6979      	ldr	r1, [r7, #20]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	613b      	str	r3, [r7, #16]
   return(result);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008416:	e009      	b.n	800842c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	8b1b      	ldrh	r3, [r3, #24]
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f042 0208 	orr.w	r2, r2, #8
 8008428:	b292      	uxth	r2, r2
 800842a:	831a      	strh	r2, [r3, #24]
}
 800842c:	bf00      	nop
 800842e:	37b0      	adds	r7, #176	; 0xb0
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40008000 	.word	0x40008000
 8008438:	08007d61 	.word	0x08007d61

0800843c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b0ae      	sub	sp, #184	; 0xb8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800844a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008472:	2b22      	cmp	r3, #34	; 0x22
 8008474:	f040 8186 	bne.w	8008784 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800847e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008482:	e129      	b.n	80086d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800848a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008496:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800849a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800849e:	4013      	ands	r3, r2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ac:	1c9a      	adds	r2, r3, #2
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d053      	beq.n	8008582 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d011      	beq.n	800850a <UART_RxISR_16BIT_FIFOEN+0xce>
 80084e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2201      	movs	r2, #1
 80084f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008500:	f043 0201 	orr.w	r2, r3, #1
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800850a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d011      	beq.n	800853a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2202      	movs	r2, #2
 8008528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008530:	f043 0204 	orr.w	r2, r3, #4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800853a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800853e:	f003 0304 	and.w	r3, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	d011      	beq.n	800856a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2204      	movs	r2, #4
 8008558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008560:	f043 0202 	orr.w	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe fd63 	bl	8007040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 80a4 	bne.w	80086d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800859e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e2      	bne.n	8008590 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3308      	adds	r3, #8
 80085d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e0:	f023 0301 	bic.w	r3, r3, #1
 80085e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80085f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e1      	bne.n	80085ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a60      	ldr	r2, [pc, #384]	; (80087a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d021      	beq.n	8008668 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01a      	beq.n	8008668 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008654:	65bb      	str	r3, [r7, #88]	; 0x58
 8008656:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800865a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d130      	bne.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008698:	647b      	str	r3, [r7, #68]	; 0x44
 800869a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800869e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e4      	bne.n	8008676 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d103      	bne.n	80086c2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2210      	movs	r2, #16
 80086c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fe fcc2 	bl	8007054 <HAL_UARTEx_RxEventCallback>
 80086d0:	e002      	b.n	80086d8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7f8 fa1e 	bl	8000b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086d8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d006      	beq.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80086e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f47f aecb 	bne.w	8008484 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d04b      	beq.n	8008798 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008706:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800870a:	429a      	cmp	r2, r3
 800870c:	d244      	bcs.n	8008798 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	623b      	str	r3, [r7, #32]
   return(result);
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008732:	633a      	str	r2, [r7, #48]	; 0x30
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e3      	bne.n	800870e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800874a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	60fb      	str	r3, [r7, #12]
   return(result);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f043 0320 	orr.w	r3, r3, #32
 8008760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	617b      	str	r3, [r7, #20]
   return(result);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e4      	bne.n	800874c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008782:	e009      	b.n	8008798 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	8b1b      	ldrh	r3, [r3, #24]
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0208 	orr.w	r2, r2, #8
 8008794:	b292      	uxth	r2, r2
 8008796:	831a      	strh	r2, [r3, #24]
}
 8008798:	bf00      	nop
 800879a:	37b8      	adds	r7, #184	; 0xb8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	40008000 	.word	0x40008000
 80087a4:	08007f1d 	.word	0x08007f1d

080087a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UARTEx_DisableFifoMode+0x16>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e027      	b.n	800884a <HAL_UARTEx_DisableFifoMode+0x66>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2224      	movs	r2, #36	; 0x24
 8008806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008828:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800886a:	2302      	movs	r3, #2
 800886c:	e02d      	b.n	80088ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2224      	movs	r2, #36	; 0x24
 800887a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0201 	bic.w	r2, r2, #1
 8008894:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f850 	bl	8008950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e02d      	b.n	8008946 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2224      	movs	r2, #36	; 0x24
 80088f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0201 	bic.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f812 	bl	8008950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895c:	2b00      	cmp	r3, #0
 800895e:	d108      	bne.n	8008972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008970:	e031      	b.n	80089d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008972:	2308      	movs	r3, #8
 8008974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008976:	2308      	movs	r3, #8
 8008978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	0e5b      	lsrs	r3, r3, #25
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	0f5b      	lsrs	r3, r3, #29
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	7b3a      	ldrb	r2, [r7, #12]
 800899e:	4911      	ldr	r1, [pc, #68]	; (80089e4 <UARTEx_SetNbDataToProcess+0x94>)
 80089a0:	5c8a      	ldrb	r2, [r1, r2]
 80089a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089a6:	7b3a      	ldrb	r2, [r7, #12]
 80089a8:	490f      	ldr	r1, [pc, #60]	; (80089e8 <UARTEx_SetNbDataToProcess+0x98>)
 80089aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	7b7a      	ldrb	r2, [r7, #13]
 80089bc:	4909      	ldr	r1, [pc, #36]	; (80089e4 <UARTEx_SetNbDataToProcess+0x94>)
 80089be:	5c8a      	ldrb	r2, [r1, r2]
 80089c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089c4:	7b7a      	ldrb	r2, [r7, #13]
 80089c6:	4908      	ldr	r1, [pc, #32]	; (80089e8 <UARTEx_SetNbDataToProcess+0x98>)
 80089c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	08008b0c 	.word	0x08008b0c
 80089e8:	08008b14 	.word	0x08008b14

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f818 	bl	8008a44 <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008b24 	.word	0x08008b24
 8008a38:	08008b24 	.word	0x08008b24
 8008a3c:	08008b24 	.word	0x08008b24
 8008a40:	08008b28 	.word	0x08008b28

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
