
screen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001294  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002162  0800cd0c  0800cd0c  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800f028  0800f028  0002007c  2**0
                  CONTENTS
  6 .ARM          00000008  0800f028  0800f028  0001f028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800f030  0800f030  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  0800f030  0800f030  0001f030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800f040  0800f040  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  0800f044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000764  2000007c  0800f0c0  0002007c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007e0  0800f0c0  000207e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 14 .comment      000000c2  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 15 .debug_info   00027864  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006403  00000000  00000000  000479d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001980  00000000  00000000  0004ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf3d  00000000  00000000  0004f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020bc0  00000000  00000000  0007c695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116a23  00000000  00000000  0009d255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00001323  00000000  00000000  001b3c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007298  00000000  00000000  001b4f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  001bc234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ba60 	.word	0x0800ba60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000080 	.word	0x20000080
 80001fc:	0800ba60 	.word	0x0800ba60

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <ILI9341_Select+0x14>)
 80005c8:	f003 f8f4 	bl	80037b4 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48001400 	.word	0x48001400

080005d4 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <ILI9341_Unselect+0x14>)
 80005e0:	f003 f8e8 	bl	80037b4 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	48001400 	.word	0x48001400

080005ec <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <ILI9341_Reset+0x28>)
 80005f8:	f003 f8dc 	bl	80037b4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005fc:	2005      	movs	r0, #5
 80005fe:	f002 f993 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <ILI9341_Reset+0x28>)
 800060a:	f003 f8d3 	bl	80037b4 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	48001400 	.word	0x48001400

08000618 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <ILI9341_WriteCommand+0x2c>)
 800062a:	f003 f8c3 	bl	80037b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800062e:	1df9      	adds	r1, r7, #7
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <ILI9341_WriteCommand+0x30>)
 8000638:	f004 fe53 	bl	80052e2 <HAL_SPI_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	48001400 	.word	0x48001400
 8000648:	200000bc 	.word	0x200000bc

0800064c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <ILI9341_WriteData+0x54>)
 800065e:	f003 f8a9 	bl	80037b4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000662:	e015      	b.n	8000690 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800066a:	bf28      	it	cs
 800066c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000670:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000672:	89fa      	ldrh	r2, [r7, #14]
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <ILI9341_WriteData+0x58>)
 800067c:	f004 fe31 	bl	80052e2 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1e6      	bne.n	8000664 <ILI9341_WriteData+0x18>
    }
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	48001400 	.word	0x48001400
 80006a4:	200000bc 	.word	0x200000bc

080006a8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4604      	mov	r4, r0
 80006b0:	4608      	mov	r0, r1
 80006b2:	4611      	mov	r1, r2
 80006b4:	461a      	mov	r2, r3
 80006b6:	4623      	mov	r3, r4
 80006b8:	80fb      	strh	r3, [r7, #6]
 80006ba:	4603      	mov	r3, r0
 80006bc:	80bb      	strh	r3, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	807b      	strh	r3, [r7, #2]
 80006c2:	4613      	mov	r3, r2
 80006c4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80006c6:	202a      	movs	r0, #42	; 0x2a
 80006c8:	f7ff ffa6 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	733b      	strb	r3, [r7, #12]
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	737b      	strb	r3, [r7, #13]
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73bb      	strb	r3, [r7, #14]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffaa 	bl	800064c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006f8:	202b      	movs	r0, #43	; 0x2b
 80006fa:	f7ff ff8d 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006fe:	88bb      	ldrh	r3, [r7, #4]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	b29b      	uxth	r3, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	723b      	strb	r3, [r7, #8]
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	727b      	strb	r3, [r7, #9]
 800070e:	883b      	ldrh	r3, [r7, #0]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	b29b      	uxth	r3, r3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	72bb      	strb	r3, [r7, #10]
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2104      	movs	r1, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff91 	bl	800064c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800072a:	202c      	movs	r0, #44	; 0x2c
 800072c:	f7ff ff74 	bl	8000618 <ILI9341_WriteCommand>
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <ILI9341_Init>:

void ILI9341_Init() {
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b09b      	sub	sp, #108	; 0x6c
 800073c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800073e:	f7ff ff3d 	bl	80005bc <ILI9341_Select>
    ILI9341_Reset();
 8000742:	f7ff ff53 	bl	80005ec <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff66 	bl	8000618 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f002 f8ea 	bl	8002928 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000754:	20cb      	movs	r0, #203	; 0xcb
 8000756:	f7ff ff5f 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800075a:	4a87      	ldr	r2, [pc, #540]	; (8000978 <ILI9341_Init+0x240>)
 800075c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000764:	6018      	str	r0, [r3, #0]
 8000766:	3304      	adds	r3, #4
 8000768:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800076a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff6b 	bl	800064c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000776:	20cf      	movs	r0, #207	; 0xcf
 8000778:	f7ff ff4e 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 800077c:	4a7f      	ldr	r2, [pc, #508]	; (800097c <ILI9341_Init+0x244>)
 800077e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	8019      	strh	r1, [r3, #0]
 8000788:	3302      	adds	r3, #2
 800078a:	0c12      	lsrs	r2, r2, #16
 800078c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000792:	2103      	movs	r1, #3
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff59 	bl	800064c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800079a:	20e8      	movs	r0, #232	; 0xe8
 800079c:	f7ff ff3c 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80007a0:	4a77      	ldr	r2, [pc, #476]	; (8000980 <ILI9341_Init+0x248>)
 80007a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	8019      	strh	r1, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80007b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007b6:	2103      	movs	r1, #3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff47 	bl	800064c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80007be:	20ea      	movs	r0, #234	; 0xea
 80007c0:	f7ff ff2a 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 80007ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff3b 	bl	800064c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80007d6:	20ed      	movs	r0, #237	; 0xed
 80007d8:	f7ff ff1e 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007dc:	4b69      	ldr	r3, [pc, #420]	; (8000984 <ILI9341_Init+0x24c>)
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff30 	bl	800064c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007ec:	20f7      	movs	r0, #247	; 0xf7
 80007ee:	f7ff ff13 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007f2:	2320      	movs	r3, #32
 80007f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff24 	bl	800064c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000804:	20c0      	movs	r0, #192	; 0xc0
 8000806:	f7ff ff07 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800080a:	2323      	movs	r3, #35	; 0x23
 800080c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff18 	bl	800064c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800081c:	20c1      	movs	r0, #193	; 0xc1
 800081e:	f7ff fefb 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000822:	2310      	movs	r3, #16
 8000824:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800082c:	2101      	movs	r1, #1
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff0c 	bl	800064c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000834:	20c5      	movs	r0, #197	; 0xc5
 8000836:	f7ff feef 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800083a:	f642 033e 	movw	r3, #10302	; 0x283e
 800083e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff feff 	bl	800064c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800084e:	20c7      	movs	r0, #199	; 0xc7
 8000850:	f7ff fee2 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000854:	2386      	movs	r3, #134	; 0x86
 8000856:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800085a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fef3 	bl	800064c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000866:	2036      	movs	r0, #54	; 0x36
 8000868:	f7ff fed6 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800086c:	2348      	movs	r3, #72	; 0x48
 800086e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fee7 	bl	800064c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 800087e:	203a      	movs	r0, #58	; 0x3a
 8000880:	f7ff feca 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000884:	2355      	movs	r3, #85	; 0x55
 8000886:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 800088a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fedb 	bl	800064c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000896:	20b1      	movs	r0, #177	; 0xb1
 8000898:	f7ff febe 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800089c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008a0:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 80008a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fecf 	bl	800064c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80008ae:	20b6      	movs	r0, #182	; 0xb6
 80008b0:	f7ff feb2 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80008b4:	4a34      	ldr	r2, [pc, #208]	; (8000988 <ILI9341_Init+0x250>)
 80008b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	4611      	mov	r1, r2
 80008be:	8019      	strh	r1, [r3, #0]
 80008c0:	3302      	adds	r3, #2
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80008c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff febd 	bl	800064c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80008d2:	20f2      	movs	r0, #242	; 0xf2
 80008d4:	f7ff fea0 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	2101      	movs	r1, #1
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff feb1 	bl	800064c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008ea:	2026      	movs	r0, #38	; 0x26
 80008ec:	f7ff fe94 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fea5 	bl	800064c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000902:	20e0      	movs	r0, #224	; 0xe0
 8000904:	f7ff fe88 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <ILI9341_Init+0x254>)
 800090a:	f107 0414 	add.w	r4, r7, #20
 800090e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000910:	c407      	stmia	r4!, {r0, r1, r2}
 8000912:	8023      	strh	r3, [r4, #0]
 8000914:	3402      	adds	r4, #2
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	210f      	movs	r1, #15
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe93 	bl	800064c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000926:	20e1      	movs	r0, #225	; 0xe1
 8000928:	f7ff fe76 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <ILI9341_Init+0x258>)
 800092e:	1d3c      	adds	r4, r7, #4
 8000930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000932:	c407      	stmia	r4!, {r0, r1, r2}
 8000934:	8023      	strh	r3, [r4, #0]
 8000936:	3402      	adds	r4, #2
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	210f      	movs	r1, #15
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fe83 	bl	800064c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fe66 	bl	8000618 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800094c:	2078      	movs	r0, #120	; 0x78
 800094e:	f001 ffeb 	bl	8002928 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000952:	2029      	movs	r0, #41	; 0x29
 8000954:	f7ff fe60 	bl	8000618 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000958:	2036      	movs	r0, #54	; 0x36
 800095a:	f7ff fe5d 	bl	8000618 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800095e:	2348      	movs	r3, #72	; 0x48
 8000960:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000962:	463b      	mov	r3, r7
 8000964:	2101      	movs	r1, #1
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe70 	bl	800064c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800096c:	f7ff fe32 	bl	80005d4 <ILI9341_Unselect>
}
 8000970:	bf00      	nop
 8000972:	376c      	adds	r7, #108	; 0x6c
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	0800ba78 	.word	0x0800ba78
 800097c:	0800ba80 	.word	0x0800ba80
 8000980:	0800ba84 	.word	0x0800ba84
 8000984:	81120364 	.word	0x81120364
 8000988:	0800ba88 	.word	0x0800ba88
 800098c:	0800ba8c 	.word	0x0800ba8c
 8000990:	0800ba9c 	.word	0x0800ba9c

08000994 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000994:	b082      	sub	sp, #8
 8000996:	b590      	push	{r4, r7, lr}
 8000998:	b089      	sub	sp, #36	; 0x24
 800099a:	af00      	add	r7, sp, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	460b      	mov	r3, r1
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80009aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	4413      	add	r3, r2
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	3b01      	subs	r3, #1
 80009b8:	b29c      	uxth	r4, r3
 80009ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80009be:	b29a      	uxth	r2, r3
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	88b9      	ldrh	r1, [r7, #4]
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	4622      	mov	r2, r4
 80009d0:	f7ff fe6a 	bl	80006a8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	e043      	b.n	8000a62 <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 80009da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	3b20      	subs	r3, #32
 80009e0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80009e4:	fb01 f303 	mul.w	r3, r1, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	440b      	add	r3, r1
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	e029      	b.n	8000a50 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00e      	beq.n	8000a2a <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a0e:	0a1b      	lsrs	r3, r3, #8
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	743b      	strb	r3, [r7, #16]
 8000a16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe12 	bl	800064c <ILI9341_WriteData>
 8000a28:	e00f      	b.n	8000a4a <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	733b      	strb	r3, [r7, #12]
 8000a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe01 	bl	800064c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a54:	461a      	mov	r2, r3
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d3cf      	bcc.n	80009fc <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a66:	461a      	mov	r2, r3
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d3b5      	bcc.n	80009da <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3724      	adds	r7, #36	; 0x24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	4770      	bx	lr

08000a7e <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a7e:	b082      	sub	sp, #8
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	603a      	str	r2, [r7, #0]
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000a92:	f7ff fd93 	bl	80005bc <ILI9341_Select>

    while(*str) {
 8000a96:	e02e      	b.n	8000af6 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	7d3a      	ldrb	r2, [r7, #20]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2bef      	cmp	r3, #239	; 0xef
 8000aa0:	dd14      	ble.n	8000acc <ILI9341_WriteString+0x4e>
            x = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000aa6:	7d7b      	ldrb	r3, [r7, #21]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	7d7a      	ldrb	r2, [r7, #21]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000aba:	da21      	bge.n	8000b00 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	d103      	bne.n	8000acc <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
                continue;
 8000aca:	e014      	b.n	8000af6 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	88b9      	ldrh	r1, [r7, #4]
 8000ad2:	88f8      	ldrh	r0, [r7, #6]
 8000ad4:	8c3b      	ldrh	r3, [r7, #32]
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	8bbb      	ldrh	r3, [r7, #28]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f7ff ff57 	bl	8000994 <ILI9341_WriteChar>
        x += font.width;
 8000ae6:	7d3b      	ldrb	r3, [r7, #20]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4413      	add	r3, r2
 8000aee:	80fb      	strh	r3, [r7, #6]
        str++;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1cc      	bne.n	8000a98 <ILI9341_WriteString+0x1a>
 8000afe:	e000      	b.n	8000b02 <ILI9341_WriteString+0x84>
                break;
 8000b00:	bf00      	nop
    }

    ILI9341_Unselect();
 8000b02:	f7ff fd67 	bl	80005d4 <ILI9341_Unselect>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b10:	b002      	add	sp, #8
 8000b12:	4770      	bx	lr

08000b14 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	4623      	mov	r3, r4
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	4603      	mov	r3, r0
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	807b      	strh	r3, [r7, #2]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2bef      	cmp	r3, #239	; 0xef
 8000b36:	d854      	bhi.n	8000be2 <ILI9341_FillRectangle+0xce>
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b3e:	d250      	bcs.n	8000be2 <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000b40:	88fa      	ldrh	r2, [r7, #6]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4413      	add	r3, r2
 8000b46:	2bf0      	cmp	r3, #240	; 0xf0
 8000b48:	dd03      	ble.n	8000b52 <ILI9341_FillRectangle+0x3e>
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000b50:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	883b      	ldrh	r3, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b5c:	dd03      	ble.n	8000b66 <ILI9341_FillRectangle+0x52>
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000b64:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000b66:	f7ff fd29 	bl	80005bc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b6a:	88fa      	ldrh	r2, [r7, #6]
 8000b6c:	887b      	ldrh	r3, [r7, #2]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3b01      	subs	r3, #1
 8000b74:	b29c      	uxth	r4, r3
 8000b76:	88ba      	ldrh	r2, [r7, #4]
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	88b9      	ldrh	r1, [r7, #4]
 8000b84:	88f8      	ldrh	r0, [r7, #6]
 8000b86:	4622      	mov	r2, r4
 8000b88:	f7ff fd8e 	bl	80006a8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000b8c:	8c3b      	ldrh	r3, [r7, #32]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	733b      	strb	r3, [r7, #12]
 8000b96:	8c3b      	ldrh	r3, [r7, #32]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <ILI9341_FillRectangle+0xd8>)
 8000ba4:	f002 fe06 	bl	80037b4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000ba8:	883b      	ldrh	r3, [r7, #0]
 8000baa:	80bb      	strh	r3, [r7, #4]
 8000bac:	e013      	b.n	8000bd6 <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	e00a      	b.n	8000bca <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bb4:	f107 010c 	add.w	r1, r7, #12
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <ILI9341_FillRectangle+0xdc>)
 8000bc0:	f004 fb8f 	bl	80052e2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	80fb      	strh	r3, [r7, #6]
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f1      	bne.n	8000bb4 <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e8      	bne.n	8000bae <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 8000bdc:	f7ff fcfa 	bl	80005d4 <ILI9341_Unselect>
 8000be0:	e000      	b.n	8000be4 <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000be2:	bf00      	nop
}
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	48001400 	.word	0x48001400
 8000bf0:	200000bc 	.word	0x200000bc

08000bf4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c06:	22f0      	movs	r2, #240	; 0xf0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ff82 	bl	8000b14 <ILI9341_FillRectangle>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <xbee_send_two_bytes>:
uint8_t frame_id;
uint16_t dest_addr;
uint8_t options;
} xbee_frame_header_t;

void xbee_send_two_bytes(uint8_t *data, uint8_t *dest) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	uint8_t checksum = 0xFF;
 8000c22:	23ff      	movs	r3, #255	; 0xff
 8000c24:	77fb      	strb	r3, [r7, #31]
	xbee_frame_header_t header = {
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <xbee_send_two_bytes+0x9c>)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c2e:	c303      	stmia	r3!, {r0, r1}
 8000c30:	801a      	strh	r2, [r3, #0]
		.frame_type = 0x01, // 16-bit transmit request
		.frame_id = 0x00, // device will not emit a response frame
		.dest_addr = 0xD161, // broadcast address
		.options = 0, // no options set
	};
	checksum -= (header.frame_type + header.frame_id + dest[0] + dest[1] + data[0] + data[1]);
 8000c32:	7e3a      	ldrb	r2, [r7, #24]
 8000c34:	7e7b      	ldrb	r3, [r7, #25]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	7ffa      	ldrb	r2, [r7, #31]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[] = {header.start_delim,
 8000c64:	7d3b      	ldrb	r3, [r7, #20]
 8000c66:	723b      	strb	r3, [r7, #8]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	727b      	strb	r3, [r7, #9]
					0,
					header.length,
 8000c6c:	8afb      	ldrh	r3, [r7, #22]
	uint8_t buf[] = {header.start_delim,
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
					header.frame_type,
 8000c72:	7e3b      	ldrb	r3, [r7, #24]
	uint8_t buf[] = {header.start_delim,
 8000c74:	72fb      	strb	r3, [r7, #11]
					header.frame_id,
 8000c76:	7e7b      	ldrb	r3, [r7, #25]
	uint8_t buf[] = {header.start_delim,
 8000c78:	733b      	strb	r3, [r7, #12]
					dest[0], // dest_addr high bits
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000c7e:	737b      	strb	r3, [r7, #13]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	73bb      	strb	r3, [r7, #14]
					dest[1], // dest_addr low bits
					header.options,
 8000c86:	7f3b      	ldrb	r3, [r7, #28]
	uint8_t buf[] = {header.start_delim,
 8000c88:	73fb      	strb	r3, [r7, #15]
					data[0],
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
	uint8_t buf[] = {header.start_delim,
 8000c8e:	743b      	strb	r3, [r7, #16]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	747b      	strb	r3, [r7, #17]
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	74bb      	strb	r3, [r7, #18]
					data[1],
					checksum,
					};
	HAL_UART_Transmit(&huart3, buf, 11, 10000); // header + 2 data bytes + 1 checksum byte
 8000c9a:	f107 0108 	add.w	r1, r7, #8
 8000c9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ca2:	220b      	movs	r2, #11
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <xbee_send_two_bytes+0xa0>)
 8000ca6:	f006 fb0b 	bl	80072c0 <HAL_UART_Transmit>
}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800baac 	.word	0x0800baac
 8000cb8:	20000324 	.word	0x20000324

08000cbc <HAL_UART_RxCpltCallback>:

uint8_t rx_buf[100] = { 0 };
char wifi_buf[32] = { 0 };
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	 if (huart == &huart3) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_UART_RxCpltCallback+0x84>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d104      	bne.n	8000cd6 <HAL_UART_RxCpltCallback+0x1a>
		 HAL_UART_Receive_IT(&huart3, rx_buf, 11);
 8000ccc:	220b      	movs	r2, #11
 8000cce:	491d      	ldr	r1, [pc, #116]	; (8000d44 <HAL_UART_RxCpltCallback+0x88>)
 8000cd0:	481b      	ldr	r0, [pc, #108]	; (8000d40 <HAL_UART_RxCpltCallback+0x84>)
 8000cd2:	f006 fb85 	bl	80073e0 <HAL_UART_Receive_IT>
	  }
	if (huart == &huart2) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_UART_RxCpltCallback+0x8c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12c      	bne.n	8000d38 <HAL_UART_RxCpltCallback+0x7c>
		if (!strcmp(wifi_buf, "unlock_box_\r\n")) {
 8000cde:	491b      	ldr	r1, [pc, #108]	; (8000d4c <HAL_UART_RxCpltCallback+0x90>)
 8000ce0:	481b      	ldr	r0, [pc, #108]	; (8000d50 <HAL_UART_RxCpltCallback+0x94>)
 8000ce2:	f7ff fa8d 	bl	8000200 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10c      	bne.n	8000d06 <HAL_UART_RxCpltCallback+0x4a>
			uint8_t data[2] = {0x02, 0x00};
 8000cec:	2302      	movs	r3, #2
 8000cee:	82bb      	strh	r3, [r7, #20]
			uint8_t dest[2] = {0x11, 0x11};
 8000cf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8000cf4:	823b      	strh	r3, [r7, #16]
			xbee_send_two_bytes(data, dest);
 8000cf6:	f107 0210 	add.w	r2, r7, #16
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff89 	bl	8000c18 <xbee_send_two_bytes>
		}
		if (!strcmp(wifi_buf, "lock_box___\r\n")) {
 8000d06:	4913      	ldr	r1, [pc, #76]	; (8000d54 <HAL_UART_RxCpltCallback+0x98>)
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <HAL_UART_RxCpltCallback+0x94>)
 8000d0a:	f7ff fa79 	bl	8000200 <strcmp>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10c      	bne.n	8000d2e <HAL_UART_RxCpltCallback+0x72>
			uint8_t data[2] = {0x01, 0x00};
 8000d14:	2301      	movs	r3, #1
 8000d16:	81bb      	strh	r3, [r7, #12]
			uint8_t dest[2] = {0x11, 0x11};
 8000d18:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d1c:	813b      	strh	r3, [r7, #8]
			xbee_send_two_bytes(data, dest);
 8000d1e:	f107 0208 	add.w	r2, r7, #8
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff75 	bl	8000c18 <xbee_send_two_bytes>
		}
		HAL_UART_Receive_IT(&huart2, wifi_buf, 13);
 8000d2e:	220d      	movs	r2, #13
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <HAL_UART_RxCpltCallback+0x94>)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_RxCpltCallback+0x8c>)
 8000d34:	f006 fb54 	bl	80073e0 <HAL_UART_Receive_IT>
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000324 	.word	0x20000324
 8000d44:	200003b8 	.word	0x200003b8
 8000d48:	20000290 	.word	0x20000290
 8000d4c:	0800bab8 	.word	0x0800bab8
 8000d50:	2000041c 	.word	0x2000041c
 8000d54:	0800bac8 	.word	0x0800bac8

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f001 fd6e 	bl	800283e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f96f 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f000 fb87 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6a:	f000 fb53 	bl	8001414 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d6e:	f000 f9dd 	bl	800112c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d72:	f000 fa19 	bl	80011a8 <MX_SPI2_Init>
  MX_CRC_Init();
 8000d76:	f000 f9b7 	bl	80010e8 <MX_CRC_Init>
  MX_TIM3_Init();
 8000d7a:	f000 fa53 	bl	8001224 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000d7e:	f000 faab 	bl	80012d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d82:	f000 fafb 	bl	800137c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Displ_Init(Displ_Orientat_270);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000d86:	2003      	movs	r0, #3
 8000d88:	f001 fa2e 	bl	80021e8 <Displ_Init>
  //touchgfxSignalVSync();		// asks TouchGFX to start initial display drawing
  Displ_BackLight('I');  			// initialize backlight and turn it on at init level
 8000d8c:	2049      	movs	r0, #73	; 0x49
 8000d8e:	f001 faeb 	bl	8002368 <Displ_BackLight>
  HAL_UART_Receive_IT(&huart2, wifi_buf, 13);
 8000d92:	220d      	movs	r2, #13
 8000d94:	49a3      	ldr	r1, [pc, #652]	; (8001024 <main+0x2cc>)
 8000d96:	48a4      	ldr	r0, [pc, #656]	; (8001028 <main+0x2d0>)
 8000d98:	f006 fb22 	bl	80073e0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int pressed = 0;
  int start = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
  while (1)
  {	 		// asks TouchGFX to get events and redraw screen

	  //ILI9341_DrawFilledRectangleCoord(0, 0, 100, 100, WHITE);
	  if (start) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d064      	beq.n	8000e70 <main+0x118>

		  	  ILI9341_Unselect();
 8000da6:	f7ff fc15 	bl	80005d4 <ILI9341_Unselect>

		  	  ILI9341_Init();
 8000daa:	f7ff fcc5 	bl	8000738 <ILI9341_Init>
	          // Clear the screen
	          ILI9341_FillScreen(WHITE);
 8000dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000db2:	f7ff ff1f 	bl	8000bf4 <ILI9341_FillScreen>

	          // Draw rectangles in each corner with text inside
	          ILI9341_FillRectangle(0, 0, 120, 160, ILI9341_BLACK);
 8000db6:	2300      	movs	r3, #0
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	2278      	movs	r2, #120	; 0x78
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fea7 	bl	8000b14 <ILI9341_FillRectangle>
	          ILI9341_WriteString(5, 5, "Box:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000dc6:	4b99      	ldr	r3, [pc, #612]	; (800102c <main+0x2d4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	9202      	str	r2, [sp, #8]
 8000dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd0:	9201      	str	r2, [sp, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	9200      	str	r2, [sp, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a95      	ldr	r2, [pc, #596]	; (8001030 <main+0x2d8>)
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f7ff fe4e 	bl	8000a7e <ILI9341_WriteString>
	          //ILI9341_WriteString(5, 5, "Box: Lock", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);

	          ILI9341_FillRectangle(120, 160, 120, 160, ILI9341_WHITE);
 8000de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	23a0      	movs	r3, #160	; 0xa0
 8000dea:	2278      	movs	r2, #120	; 0x78
 8000dec:	21a0      	movs	r1, #160	; 0xa0
 8000dee:	2078      	movs	r0, #120	; 0x78
 8000df0:	f7ff fe90 	bl	8000b14 <ILI9341_FillRectangle>
	          ILI9341_WriteString(ILI9341_WIDTH - 115, ILI9341_HEIGHT - 155, "Door:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000df4:	4b8d      	ldr	r3, [pc, #564]	; (800102c <main+0x2d4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	9202      	str	r2, [sp, #8]
 8000dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfe:	9201      	str	r2, [sp, #4]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a8b      	ldr	r2, [pc, #556]	; (8001034 <main+0x2dc>)
 8000e08:	21a5      	movs	r1, #165	; 0xa5
 8000e0a:	207d      	movs	r0, #125	; 0x7d
 8000e0c:	f7ff fe37 	bl	8000a7e <ILI9341_WriteString>
	          //ILI9341_WriteString(ILI9341_WIDTH - 115, ILI9341_HEIGHT - 155, "Box: Unlock", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);

	          ILI9341_FillRectangle(120, 0, 120, 160, ILI9341_MAGENTA);
 8000e10:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	2278      	movs	r2, #120	; 0x78
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2078      	movs	r0, #120	; 0x78
 8000e1e:	f7ff fe79 	bl	8000b14 <ILI9341_FillRectangle>
	          ILI9341_WriteString(ILI9341_WIDTH - 115, 5, "Door:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000e22:	4b82      	ldr	r3, [pc, #520]	; (800102c <main+0x2d4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	9202      	str	r2, [sp, #8]
 8000e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	9200      	str	r2, [sp, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a7f      	ldr	r2, [pc, #508]	; (8001034 <main+0x2dc>)
 8000e36:	2105      	movs	r1, #5
 8000e38:	207d      	movs	r0, #125	; 0x7d
 8000e3a:	f7ff fe20 	bl	8000a7e <ILI9341_WriteString>
	          //ILI9341_WriteString(ILI9341_WIDTH - 115, 5, "Door: Lock", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);

	          ILI9341_FillRectangle(0, 160, 120, 160, ILI9341_CYAN);
 8000e3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	2278      	movs	r2, #120	; 0x78
 8000e48:	21a0      	movs	r1, #160	; 0xa0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fe62 	bl	8000b14 <ILI9341_FillRectangle>
	          ILI9341_WriteString(5, ILI9341_HEIGHT - 155, "Box:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000e50:	4b76      	ldr	r3, [pc, #472]	; (800102c <main+0x2d4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	9202      	str	r2, [sp, #8]
 8000e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5a:	9201      	str	r2, [sp, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a73      	ldr	r2, [pc, #460]	; (8001030 <main+0x2d8>)
 8000e64:	21a5      	movs	r1, #165	; 0xa5
 8000e66:	2005      	movs	r0, #5
 8000e68:	f7ff fe09 	bl	8000a7e <ILI9341_WriteString>
	          //ILI9341_WriteString(5, ILI9341_HEIGHT - 155, "Door: Unlock", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
	          start = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
	      }


	  	  if(Touch_In_XY_area(0,  0,120,160)){ //top0 right
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	2278      	movs	r2, #120	; 0x78
 8000e74:	2100      	movs	r1, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	f001 fc7e 	bl	8002778 <Touch_In_XY_area>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d026      	beq.n	8000ed0 <main+0x178>
	  		  ILI9341_FillRectangle(120, 0, 120, 160, ILI9341_MAGENTA);
 8000e82:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	23a0      	movs	r3, #160	; 0xa0
 8000e8a:	2278      	movs	r2, #120	; 0x78
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2078      	movs	r0, #120	; 0x78
 8000e90:	f7ff fe40 	bl	8000b14 <ILI9341_FillRectangle>
	  		ILI9341_WriteString(ILI9341_WIDTH - 115, 5, "Door:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000e94:	4b65      	ldr	r3, [pc, #404]	; (800102c <main+0x2d4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	9202      	str	r2, [sp, #8]
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	9201      	str	r2, [sp, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	9200      	str	r2, [sp, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a63      	ldr	r2, [pc, #396]	; (8001034 <main+0x2dc>)
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	207d      	movs	r0, #125	; 0x7d
 8000eac:	f7ff fde7 	bl	8000a7e <ILI9341_WriteString>
	  		ILI9341_WriteString(ILI9341_WIDTH - 115, ILI9341_HEIGHT - 125, "UNLOCKED", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <main+0x2d4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	9202      	str	r2, [sp, #8]
 8000eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	9200      	str	r2, [sp, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a5d      	ldr	r2, [pc, #372]	; (8001038 <main+0x2e0>)
 8000ec4:	21c3      	movs	r1, #195	; 0xc3
 8000ec6:	207d      	movs	r0, #125	; 0x7d
 8000ec8:	f7ff fdd9 	bl	8000a7e <ILI9341_WriteString>
	  		  start = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

//	  		  pressed = !pressed;
//	  	  	  touchgfxSignalVSync();		// asks TouchGFX to handle touch and redraw screen
	  	  }
	  	  if(Touch_In_XY_area(160,  120,120,160)){ // bottom left
 8000ed0:	23a0      	movs	r3, #160	; 0xa0
 8000ed2:	2278      	movs	r2, #120	; 0x78
 8000ed4:	2178      	movs	r1, #120	; 0x78
 8000ed6:	20a0      	movs	r0, #160	; 0xa0
 8000ed8:	f001 fc4e 	bl	8002778 <Touch_In_XY_area>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d033      	beq.n	8000f4a <main+0x1f2>
	  		  	  ILI9341_FillRectangle(0, 160, 120, 160, ILI9341_CYAN);
 8000ee2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	2278      	movs	r2, #120	; 0x78
 8000eec:	21a0      	movs	r1, #160	; 0xa0
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fe10 	bl	8000b14 <ILI9341_FillRectangle>
	  			  ILI9341_WriteString(5, ILI9341_HEIGHT - 155, "Box:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	; (800102c <main+0x2d4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	9202      	str	r2, [sp, #8]
 8000efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efe:	9201      	str	r2, [sp, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <main+0x2d8>)
 8000f08:	21a5      	movs	r1, #165	; 0xa5
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f7ff fdb7 	bl	8000a7e <ILI9341_WriteString>
	  			  ILI9341_WriteString(5, 30, "LOCKED", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <main+0x2d4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	9202      	str	r2, [sp, #8]
 8000f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <main+0x2e4>)
 8000f24:	211e      	movs	r1, #30
 8000f26:	2005      	movs	r0, #5
 8000f28:	f7ff fda9 	bl	8000a7e <ILI9341_WriteString>
	  	  		  start = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
	  	  		  uint8_t data[2] = {0x01, 0x00};
 8000f30:	2301      	movs	r3, #1
 8000f32:	823b      	strh	r3, [r7, #16]
	  	  		  uint8_t dest[2] = {0x11, 0x11};
 8000f34:	f241 1311 	movw	r3, #4369	; 0x1111
 8000f38:	81bb      	strh	r3, [r7, #12]
	  	  		  xbee_send_two_bytes(data, dest);
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe67 	bl	8000c18 <xbee_send_two_bytes>
//	  	  		  pressed = !pressed;
//	  	  	  	  touchgfxSignalVSync();		// asks TouchGFX to handle touch and redraw screen
	  	  	  }
	  	  if(Touch_In_XY_area(160,  0,120,160)){ // top left
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	2278      	movs	r2, #120	; 0x78
 8000f4e:	2100      	movs	r1, #0
 8000f50:	20a0      	movs	r0, #160	; 0xa0
 8000f52:	f001 fc11 	bl	8002778 <Touch_In_XY_area>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d026      	beq.n	8000faa <main+0x252>
	  		  	  ILI9341_FillRectangle(120, 160, 120, 160, ILI9341_WHITE);
 8000f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	2278      	movs	r2, #120	; 0x78
 8000f66:	21a0      	movs	r1, #160	; 0xa0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f7ff fdd3 	bl	8000b14 <ILI9341_FillRectangle>
	  			  ILI9341_WriteString(ILI9341_WIDTH - 115, ILI9341_HEIGHT - 155, "Door:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <main+0x2d4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	9202      	str	r2, [sp, #8]
 8000f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	9200      	str	r2, [sp, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2c      	ldr	r2, [pc, #176]	; (8001034 <main+0x2dc>)
 8000f82:	21a5      	movs	r1, #165	; 0xa5
 8000f84:	207d      	movs	r0, #125	; 0x7d
 8000f86:	f7ff fd7a 	bl	8000a7e <ILI9341_WriteString>
	  			  ILI9341_WriteString(ILI9341_WIDTH - 115, 30, "LOCKED", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <main+0x2d4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9202      	str	r2, [sp, #8]
 8000f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <main+0x2e4>)
 8000f9e:	211e      	movs	r1, #30
 8000fa0:	207d      	movs	r0, #125	; 0x7d
 8000fa2:	f7ff fd6c 	bl	8000a7e <ILI9341_WriteString>
	  	  		  start = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
//	  	  		  pressed = !pressed;
	  	  	  	  //touchgfxSignalVSync();		// asks TouchGFX to handle touch and redraw screen
	  	  	  }
	  	  if(Touch_In_XY_area(0,  120,120,160)){ // bottom right
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	2278      	movs	r2, #120	; 0x78
 8000fae:	2178      	movs	r1, #120	; 0x78
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f001 fbe1 	bl	8002778 <Touch_In_XY_area>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f43f aef1 	beq.w	8000da0 <main+0x48>
	  		  	  ILI9341_FillRectangle(0, 0, 120, 160, ILI9341_BLACK);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	23a0      	movs	r3, #160	; 0xa0
 8000fc4:	2278      	movs	r2, #120	; 0x78
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fda3 	bl	8000b14 <ILI9341_FillRectangle>
	  			  ILI9341_WriteString(5, 5, "Box:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <main+0x2d4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd8:	9201      	str	r2, [sp, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <main+0x2d8>)
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	2005      	movs	r0, #5
 8000fe6:	f7ff fd4a 	bl	8000a7e <ILI9341_WriteString>
	  			  ILI9341_WriteString(5, ILI9341_HEIGHT - 125, "UNLOCK", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <main+0x2d4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	9202      	str	r2, [sp, #8]
 8000ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff4:	9201      	str	r2, [sp, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	9200      	str	r2, [sp, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <main+0x2e8>)
 8000ffe:	21c3      	movs	r1, #195	; 0xc3
 8001000:	2005      	movs	r0, #5
 8001002:	f7ff fd3c 	bl	8000a7e <ILI9341_WriteString>
	  	  		  start = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]

	  	  		  uint8_t data[2] = {0x02, 0x00};
 800100a:	2302      	movs	r3, #2
 800100c:	813b      	strh	r3, [r7, #8]
	  	  		  uint8_t dest[2] = {0x11, 0x11};
 800100e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001012:	80bb      	strh	r3, [r7, #4]
	  	  		  xbee_send_two_bytes(data, dest);
 8001014:	1d3a      	adds	r2, r7, #4
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fdfb 	bl	8000c18 <xbee_send_two_bytes>
	  if (start) {
 8001022:	e6bd      	b.n	8000da0 <main+0x48>
 8001024:	2000041c 	.word	0x2000041c
 8001028:	20000290 	.word	0x20000290
 800102c:	20000000 	.word	0x20000000
 8001030:	0800bad8 	.word	0x0800bad8
 8001034:	0800bae0 	.word	0x0800bae0
 8001038:	0800bae8 	.word	0x0800bae8
 800103c:	0800baf4 	.word	0x0800baf4
 8001040:	0800bafc 	.word	0x0800bafc

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b096      	sub	sp, #88	; 0x58
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2244      	movs	r2, #68	; 0x44
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f009 feed 	bl	800ae32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fbf4 	bl	8003854 <HAL_PWREx_ControlVoltageScaling>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001072:	f000 fbf3 	bl	800185c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001076:	2310      	movs	r3, #16
 8001078:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800107a:	2301      	movs	r3, #1
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001082:	2360      	movs	r3, #96	; 0x60
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800108a:	2301      	movs	r3, #1
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800108e:	2301      	movs	r3, #1
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001092:	2332      	movs	r3, #50	; 0x32
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800109a:	2302      	movs	r3, #2
 800109c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fc88 	bl	80039bc <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010b2:	f000 fbd3 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2303      	movs	r3, #3
 80010bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	2104      	movs	r1, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 f88e 	bl	80041f0 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010da:	f000 fbbf 	bl	800185c <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3758      	adds	r7, #88	; 0x58
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CRC_Init+0x3c>)
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <MX_CRC_Init+0x40>)
 80010f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CRC_Init+0x3c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CRC_Init+0x3c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CRC_Init+0x3c>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CRC_Init+0x3c>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CRC_Init+0x3c>)
 800110c:	2201      	movs	r2, #1
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CRC_Init+0x3c>)
 8001112:	f001 fd9d 	bl	8002c50 <HAL_CRC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800111c:	f000 fb9e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000098 	.word	0x20000098
 8001128:	40023000 	.word	0x40023000

0800112c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_SPI1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800113c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001146:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800114a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI1_Init+0x74>)
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI1_Init+0x74>)
 800117a:	2207      	movs	r2, #7
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI1_Init+0x74>)
 8001186:	2208      	movs	r2, #8
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_SPI1_Init+0x74>)
 800118c:	f004 f806 	bl	800519c <HAL_SPI_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fb61 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000bc 	.word	0x200000bc
 80011a4:	40013000 	.word	0x40013000

080011a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_SPI2_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_SPI2_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_SPI2_Init+0x74>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_SPI2_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI2_Init+0x74>)
 80011c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI2_Init+0x74>)
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI2_Init+0x74>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI2_Init+0x74>)
 8001202:	2208      	movs	r2, #8
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_SPI2_Init+0x74>)
 8001208:	f003 ffc8 	bl	800519c <HAL_SPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fb23 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000120 	.word	0x20000120
 8001220:	40003800 	.word	0x40003800

08001224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM3_Init+0xac>)
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_TIM3_Init+0xb0>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM3_Init+0xac>)
 8001250:	f242 7210 	movw	r2, #10000	; 0x2710
 8001254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM3_Init+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM3_Init+0xac>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM3_Init+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM3_Init+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_TIM3_Init+0xac>)
 8001270:	f005 f946 	bl	8006500 <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800127a:	f000 faef 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_TIM3_Init+0xac>)
 800128e:	f005 ff3f 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001298:	f000 fae0 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129c:	2360      	movs	r3, #96	; 0x60
 800129e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM3_Init+0xac>)
 80012b4:	f005 fa82 	bl	80067bc <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012be:	f000 facd 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM3_Init+0xac>)
 80012c4:	f000 fc74 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000244 	.word	0x20000244
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <MX_USART2_UART_Init+0xa0>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 800131c:	2210      	movs	r2, #16
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001328:	4812      	ldr	r0, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 800132a:	f005 ff79 	bl	8007220 <HAL_UART_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001334:	f000 fa92 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_7_8) != HAL_OK)
 8001338:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 800133e:	f008 f80f 	bl	8009360 <HAL_UARTEx_SetTxFifoThreshold>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART2_UART_Init+0x74>
  {
    Error_Handler();
 8001348:	f000 fa88 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001350:	f008 f844 	bl	80093dc <HAL_UARTEx_SetRxFifoThreshold>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART2_UART_Init+0x86>
  {
    Error_Handler();
 800135a:	f000 fa7f 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART2_UART_Init+0x9c>)
 8001360:	f007 ff8a 	bl	8009278 <HAL_UARTEx_EnableFifoMode>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x96>
  {
    Error_Handler();
 800136a:	f000 fa77 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000290 	.word	0x20000290
 8001378:	40004400 	.word	0x40004400

0800137c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <MX_USART3_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001388:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013c6:	f005 ff2b 	bl	8007220 <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 fa44 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013d8:	f007 ffc2 	bl	8009360 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa3b 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013ea:	f007 fff7 	bl	80093dc <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 fa32 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_USART3_UART_Init+0x90>)
 80013fa:	f007 ff78 	bl	80092ee <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 fa2a 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000324 	.word	0x20000324
 8001410:	40004800 	.word	0x40004800

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_DMA_Init+0x60>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_DMA_Init+0x60>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6493      	str	r3, [r2, #72]	; 0x48
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_DMA_Init+0x60>)
 8001428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_DMA_Init+0x60>)
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <MX_DMA_Init+0x60>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6493      	str	r3, [r2, #72]	; 0x48
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <MX_DMA_Init+0x60>)
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	200b      	movs	r0, #11
 8001450:	f001 fbab 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001454:	200b      	movs	r0, #11
 8001456:	f001 fbc4 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	200c      	movs	r0, #12
 8001460:	f001 fba3 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001464:	200c      	movs	r0, #12
 8001466:	f001 fbbc 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148e:	4bb3      	ldr	r3, [pc, #716]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4ab2      	ldr	r2, [pc, #712]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4bb0      	ldr	r3, [pc, #704]	; (800175c <MX_GPIO_Init+0x2e4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	623b      	str	r3, [r7, #32]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	4bad      	ldr	r3, [pc, #692]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4aac      	ldr	r2, [pc, #688]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4baa      	ldr	r3, [pc, #680]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014be:	4ba7      	ldr	r3, [pc, #668]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4aa6      	ldr	r2, [pc, #664]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014c4:	f043 0320 	orr.w	r3, r3, #32
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4ba4      	ldr	r3, [pc, #656]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	4ba1      	ldr	r3, [pc, #644]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4aa0      	ldr	r2, [pc, #640]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b9e      	ldr	r3, [pc, #632]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b9b      	ldr	r3, [pc, #620]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a9a      	ldr	r2, [pc, #616]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b98      	ldr	r3, [pc, #608]	; (800175c <MX_GPIO_Init+0x2e4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b95      	ldr	r3, [pc, #596]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a94      	ldr	r2, [pc, #592]	; (800175c <MX_GPIO_Init+0x2e4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b92      	ldr	r3, [pc, #584]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800151e:	4b8f      	ldr	r3, [pc, #572]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a8e      	ldr	r2, [pc, #568]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b8c      	ldr	r3, [pc, #560]	; (800175c <MX_GPIO_Init+0x2e4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a88      	ldr	r2, [pc, #544]	; (800175c <MX_GPIO_Init+0x2e4>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b86      	ldr	r3, [pc, #536]	; (800175c <MX_GPIO_Init+0x2e4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800154e:	f002 fa25 	bl	800399c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001558:	4881      	ldr	r0, [pc, #516]	; (8001760 <MX_GPIO_Init+0x2e8>)
 800155a:	f002 f92b 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPL_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001564:	487e      	ldr	r0, [pc, #504]	; (8001760 <MX_GPIO_Init+0x2e8>)
 8001566:	f002 f925 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800156a:	2308      	movs	r3, #8
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800157a:	230d      	movs	r3, #13
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4877      	ldr	r0, [pc, #476]	; (8001764 <MX_GPIO_Init+0x2ec>)
 8001586:	f001 ff83 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800158a:	2307      	movs	r3, #7
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158e:	2312      	movs	r3, #18
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800159a:	2304      	movs	r3, #4
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	486e      	ldr	r0, [pc, #440]	; (8001760 <MX_GPIO_Init+0x2e8>)
 80015a6:	f001 ff73 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015ba:	230d      	movs	r3, #13
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4866      	ldr	r0, [pc, #408]	; (8001760 <MX_GPIO_Init+0x2e8>)
 80015c6:	f001 ff63 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80015ca:	2311      	movs	r3, #17
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ce:	230b      	movs	r3, #11
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4862      	ldr	r0, [pc, #392]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80015de:	f001 ff57 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e2:	2308      	movs	r3, #8
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e6:	230b      	movs	r3, #11
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f001 ff4a 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015fc:	2302      	movs	r3, #2
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001600:	230b      	movs	r3, #11
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4857      	ldr	r0, [pc, #348]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001610:	f001 ff3e 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001614:	2344      	movs	r3, #68	; 0x44
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4851      	ldr	r0, [pc, #324]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001628:	f001 ff32 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4846      	ldr	r0, [pc, #280]	; (8001760 <MX_GPIO_Init+0x2e8>)
 8001646:	f001 ff23 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_DC_Pin|TOUCH_CS_Pin;
 800164a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001658:	2302      	movs	r3, #2
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	483f      	ldr	r0, [pc, #252]	; (8001760 <MX_GPIO_Init+0x2e8>)
 8001664:	f001 ff14 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001668:	2302      	movs	r3, #2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	483c      	ldr	r0, [pc, #240]	; (8001770 <MX_GPIO_Init+0x2f8>)
 800167e:	f001 ff07 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001682:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001694:	2301      	movs	r3, #1
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4831      	ldr	r0, [pc, #196]	; (8001764 <MX_GPIO_Init+0x2ec>)
 80016a0:	f001 fef6 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80016b6:	2303      	movs	r3, #3
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4828      	ldr	r0, [pc, #160]	; (8001764 <MX_GPIO_Init+0x2ec>)
 80016c2:	f001 fee5 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016c6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80016d8:	230d      	movs	r3, #13
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4822      	ldr	r0, [pc, #136]	; (800176c <MX_GPIO_Init+0x2f4>)
 80016e4:	f001 fed4 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80016fa:	230e      	movs	r3, #14
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	4819      	ldr	r0, [pc, #100]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001706:	f001 fec3 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800170a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800171c:	2302      	movs	r3, #2
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_GPIO_Init+0x2fc>)
 8001728:	f001 feb2 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800172c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800173e:	2308      	movs	r3, #8
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_GPIO_Init+0x2f8>)
 800174a:	f001 fea1 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800174e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
 8001758:	e00e      	b.n	8001778 <MX_GPIO_Init+0x300>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	48001400 	.word	0x48001400
 8001764:	48001000 	.word	0x48001000
 8001768:	48000800 	.word	0x48000800
 800176c:	48000400 	.word	0x48000400
 8001770:	48001800 	.word	0x48001800
 8001774:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001780:	230c      	movs	r3, #12
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	4830      	ldr	r0, [pc, #192]	; (800184c <MX_GPIO_Init+0x3d4>)
 800178c:	f001 fe80 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 fe72 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017be:	230a      	movs	r3, #10
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f001 fe60 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d0:	2304      	movs	r3, #4
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017e0:	230c      	movs	r3, #12
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	4819      	ldr	r0, [pc, #100]	; (8001850 <MX_GPIO_Init+0x3d8>)
 80017ec:	f001 fe50 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_GPIO_Init+0x3dc>)
 800180e:	f001 fe3f 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001812:	2301      	movs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001822:	2302      	movs	r3, #2
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <MX_GPIO_Init+0x3e0>)
 800182e:	f001 fe2f 	bl	8003490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2007      	movs	r0, #7
 8001838:	f001 f9b7 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800183c:	2007      	movs	r0, #7
 800183e:	f001 f9d0 	bl	8002be2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	; 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00
 8001854:	48000400 	.word	0x48000400
 8001858:	48001000 	.word	0x48001000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x44>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x44>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x44>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_CRC_MspInit+0x38>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10b      	bne.n	80018da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_CRC_MspInit+0x3c>)
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_CRC_MspInit+0x3c>)
 80018c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018cc:	6493      	str	r3, [r2, #72]	; 0x48
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_CRC_MspInit+0x3c>)
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023000 	.word	0x40023000
 80018ec:	40021000 	.word	0x40021000

080018f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_SPI_MspInit+0x1d8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d15a      	bne.n	80019c8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001912:	4b6e      	ldr	r3, [pc, #440]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	4a6d      	ldr	r2, [pc, #436]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	6613      	str	r3, [r2, #96]	; 0x60
 800191e:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|DISPL_SCK_Pin|DISPL_MISO_Pin|DSPL_MOSI_Pin;
 8001942:	23f0      	movs	r3, #240	; 0xf0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001952:	2305      	movs	r3, #5
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f001 fd96 	bl	8003490 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8001964:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001966:	4a5b      	ldr	r2, [pc, #364]	; (8001ad4 <HAL_SPI_MspInit+0x1e4>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800196a:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 800196c:	220b      	movs	r2, #11
 800196e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001970:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001972:	2210      	movs	r2, #16
 8001974:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001976:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800197c:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001988:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800199a:	484d      	ldr	r0, [pc, #308]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 800199c:	f001 fa4a 	bl	8002e34 <HAL_DMA_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80019a6:	f7ff ff59 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
 80019b0:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_SPI_MspInit+0x1e0>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2023      	movs	r0, #35	; 0x23
 80019bc:	f001 f8f5 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019c0:	2023      	movs	r0, #35	; 0x23
 80019c2:	f001 f90e 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019c6:	e07a      	b.n	8001abe <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a42      	ldr	r2, [pc, #264]	; (8001ad8 <HAL_SPI_MspInit+0x1e8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d175      	bne.n	8001abe <HAL_SPI_MspInit+0x1ce>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6593      	str	r3, [r2, #88]	; 0x58
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	4b32      	ldr	r3, [pc, #200]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a31      	ldr	r2, [pc, #196]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_SPI_MspInit+0x1dc>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4829      	ldr	r0, [pc, #164]	; (8001adc <HAL_SPI_MspInit+0x1ec>)
 8001a36:	f001 fd2b 	bl	8003490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISPL_SCKB10_Pin;
 8001a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISPL_SCKB10_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4822      	ldr	r0, [pc, #136]	; (8001ae0 <HAL_SPI_MspInit+0x1f0>)
 8001a58:	f001 fd1a 	bl	8003490 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a5e:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <HAL_SPI_MspInit+0x1f8>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a64:	220d      	movs	r2, #13
 8001a66:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001a94:	f001 f9ce 	bl	8002e34 <HAL_DMA_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_SPI_MspInit+0x1b2>
      Error_Handler();
 8001a9e:	f7ff fedd 	bl	800185c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_SPI_MspInit+0x1f4>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2024      	movs	r0, #36	; 0x24
 8001ab4:	f001 f879 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ab8:	2024      	movs	r0, #36	; 0x24
 8001aba:	f001 f892 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40013000 	.word	0x40013000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	20000184 	.word	0x20000184
 8001ad4:	4002001c 	.word	0x4002001c
 8001ad8:	40003800 	.word	0x40003800
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	200001e4 	.word	0x200001e4
 8001ae8:	40020008 	.word	0x40020008

08001aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d143      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001b72:	f001 fc8d 	bl	8003490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b86:	2302      	movs	r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_TIM_PWM_MspInit+0xc0>)
 8001b92:	f001 fc7d 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_TIM_MspPostInit+0x64>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11b      	bne.n	8001c0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DISPL_LED_Pin;
 8001bea:	2320      	movs	r3, #32
 8001bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001c06:	f001 fc43 	bl	8003490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0b2      	sub	sp, #200	; 0xc8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	2294      	movs	r2, #148	; 0x94
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f009 f8f6 	bl	800ae32 <memset>
  if(huart->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	; (8001db8 <HAL_UART_MspInit+0x198>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d165      	bne.n	8001d1c <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fd85 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c68:	f7ff fdf8 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]
    PA1     ------> USART2_RTS
    PD3     ------> USART2_CTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f001 fbd8 	bl	8003490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8001ce0:	2368      	movs	r3, #104	; 0x68
 8001ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d02:	4619      	mov	r1, r3
 8001d04:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <HAL_UART_MspInit+0x1a0>)
 8001d06:	f001 fbc3 	bl	8003490 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2026      	movs	r0, #38	; 0x26
 8001d10:	f000 ff4b 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d14:	2026      	movs	r0, #38	; 0x26
 8001d16:	f000 ff64 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d1a:	e048      	b.n	8001dae <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <HAL_UART_MspInit+0x1a4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d143      	bne.n	8001dae <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d26:	2304      	movs	r3, #4
 8001d28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fd1a 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001d3e:	f7ff fd8d 	bl	800185c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_UART_MspInit+0x19c>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <HAL_UART_MspInit+0x1a0>)
 8001d9a:	f001 fb79 	bl	8003490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2027      	movs	r0, #39	; 0x27
 8001da4:	f000 ff01 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da8:	2027      	movs	r0, #39	; 0x27
 8001daa:	f000 ff1a 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	37c8      	adds	r7, #200	; 0xc8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	40004800 	.word	0x40004800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 fd68 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8001e20:	2002      	movs	r0, #2
 8001e22:	f001 fcdf 	bl	80037e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA1_Channel1_IRQHandler+0x10>)
 8001e32:	f001 f9dd 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001e4 	.word	0x200001e4

08001e40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA1_Channel2_IRQHandler+0x10>)
 8001e46:	f001 f9d3 	bl	80031f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000184 	.word	0x20000184

08001e54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <SPI1_IRQHandler+0x10>)
 8001e5a:	f004 f801 	bl	8005e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000bc 	.word	0x200000bc

08001e68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <SPI2_IRQHandler+0x10>)
 8001e6e:	f003 fff7 	bl	8005e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000120 	.word	0x20000120

08001e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <USART2_IRQHandler+0x10>)
 8001e82:	f005 faf9 	bl	8007478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000290 	.word	0x20000290

08001e90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <USART3_IRQHandler+0x10>)
 8001e96:	f005 faef 	bl	8007478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000324 	.word	0x20000324

08001ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return 1;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_kill>:

int _kill(int pid, int sig)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ebe:	f009 f85b 	bl	800af78 <__errno>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2216      	movs	r2, #22
 8001ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_exit>:

void _exit (int status)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffe7 	bl	8001eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee6:	e7fe      	b.n	8001ee6 <_exit+0x12>

08001ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e00a      	b.n	8001f10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001efa:	f3af 8000 	nop.w
 8001efe:	4601      	mov	r1, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf0      	blt.n	8001efa <_read+0x12>
  }

  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e009      	b.n	8001f48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf1      	blt.n	8001f34 <_write+0x12>
  }
  return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_close>:

int _close(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	605a      	str	r2, [r3, #4]
  return 0;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_isatty>:

int _isatty(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	; (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f008 ffc0 	bl	800af78 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200a0000 	.word	0x200a0000
 8002024:	00000400 	.word	0x00000400
 8002028:	2000043c 	.word	0x2000043c
 800202c:	200007e0 	.word	0x200007e0

08002030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
		}
	}
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6039      	str	r1, [r7, #0]
 800206c:	4611      	mov	r1, r2
 800206e:	461a      	mov	r2, r3
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	460b      	mov	r3, r1
 8002076:	80bb      	strh	r3, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800207c:	bf00      	nop
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <Displ_Transmit+0xa8>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0fa      	beq.n	800207e <Displ_Transmit+0x1a>

	Displ_Select();
 8002088:	f7ff ffe4 	bl	8002054 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	461a      	mov	r2, r3
 8002090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002094:	481e      	ldr	r0, [pc, #120]	; (8002110 <Displ_Transmit+0xac>)
 8002096:	f001 fb8d 	bl	80037b4 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <Displ_Transmit+0x6a>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e00b      	b.n	80020c6 <Displ_Transmit+0x62>
			*data32=__REV16(*data32);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	ba5b      	rev16	r3, r3
 80020b8:	60bb      	str	r3, [r7, #8]
  return result;
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3304      	adds	r3, #4
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3ef      	bcc.n	80020ae <Displ_Transmit+0x4a>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	2b13      	cmp	r3, #19
 80020d2:	d80d      	bhi.n	80020f0 <Displ_Transmit+0x8c>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <Displ_Transmit+0xa8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80020da:	88ba      	ldrh	r2, [r7, #4]
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	480c      	ldr	r0, [pc, #48]	; (8002114 <Displ_Transmit+0xb0>)
 80020e4:	f003 f8fd 	bl	80052e2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <Displ_Transmit+0xa8>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 80020ee:	e008      	b.n	8002102 <Displ_Transmit+0x9e>
			Displ_SpiAvailable=0;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <Displ_Transmit+0xa8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	461a      	mov	r2, r3
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <Displ_Transmit+0xb0>)
 80020fe:	f003 fdbf 	bl	8005c80 <HAL_SPI_Transmit_DMA>
	}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c
 8002110:	48001400 	.word	0x48001400
 8002114:	200000bc 	.word	0x200000bc

08002118 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002122:	1df9      	adds	r1, r7, #7
 8002124:	2300      	movs	r3, #0
 8002126:	2201      	movs	r2, #1
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ff9b 	bl	8002064 <Displ_Transmit>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	b29a      	uxth	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff ff86 	bl	8002064 <Displ_Transmit>
 8002158:	e000      	b.n	800215c <Displ_WriteData+0x26>
	if (buff_size==0) return;
 800215a:	bf00      	nop
}
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	Displ_Select();
 8002168:	f7ff ff74 	bl	8002054 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002172:	481a      	ldr	r0, [pc, #104]	; (80021dc <ILI9XXX_Init+0x78>)
 8002174:	f001 fb1e 	bl	80037b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002178:	2001      	movs	r0, #1
 800217a:	f000 fbd5 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002184:	4815      	ldr	r0, [pc, #84]	; (80021dc <ILI9XXX_Init+0x78>)
 8002186:	f001 fb15 	bl	80037b4 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800218a:	2096      	movs	r0, #150	; 0x96
 800218c:	f000 fbcc 	bl	8002928 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002190:	203a      	movs	r0, #58	; 0x3a
 8002192:	f7ff ffc1 	bl	8002118 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8002196:	2200      	movs	r2, #0
 8002198:	2101      	movs	r1, #1
 800219a:	4811      	ldr	r0, [pc, #68]	; (80021e0 <ILI9XXX_Init+0x7c>)
 800219c:	f7ff ffcb 	bl	8002136 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80021a0:	20b0      	movs	r0, #176	; 0xb0
 80021a2:	f7ff ffb9 	bl	8002118 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80021a6:	2200      	movs	r2, #0
 80021a8:	2101      	movs	r1, #1
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <ILI9XXX_Init+0x80>)
 80021ac:	f7ff ffc3 	bl	8002136 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80021b0:	20b0      	movs	r0, #176	; 0xb0
 80021b2:	f7ff ffb1 	bl	8002118 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80021b6:	2200      	movs	r2, #0
 80021b8:	2101      	movs	r1, #1
 80021ba:	480a      	ldr	r0, [pc, #40]	; (80021e4 <ILI9XXX_Init+0x80>)
 80021bc:	f7ff ffbb 	bl	8002136 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 80021c0:	2011      	movs	r0, #17
 80021c2:	f7ff ffa9 	bl	8002118 <Displ_WriteCommand>
	HAL_Delay(120);
 80021c6:	2078      	movs	r0, #120	; 0x78
 80021c8:	f000 fbae 	bl	8002928 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80021cc:	2029      	movs	r0, #41	; 0x29
 80021ce:	f7ff ffa3 	bl	8002118 <Displ_WriteCommand>
	HAL_Delay(5);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f000 fba8 	bl	8002928 <HAL_Delay>

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	48001400 	.word	0x48001400
 80021e0:	0800bb04 	.word	0x0800bb04
 80021e4:	0800bb08 	.word	0x0800bb08

080021e8 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
	} else {																	// otherwise leave both port permanently selected
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f8:	4816      	ldr	r0, [pc, #88]	; (8002254 <Displ_Init+0x6c>)
 80021fa:	f001 fadb 	bl	80037b4 <HAL_GPIO_WritePin>
		SET_DISPL_SPI_BAUDRATE;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <Displ_Init+0x70>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4915      	ldr	r1, [pc, #84]	; (8002258 <Displ_Init+0x70>)
 8002204:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002208:	4013      	ands	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <Displ_Init+0x70>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <Displ_Init+0x70>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <Displ_Init+0x6c>)
 8002220:	f001 fac8 	bl	80037b4 <HAL_GPIO_WritePin>
		SET_TOUCH_SPI_BAUDRATE;
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <Displ_Init+0x74>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <Displ_Init+0x74>)
 800222a:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <Displ_Init+0x74>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <Displ_Init+0x74>)
 8002238:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800223c:	6013      	str	r3, [r2, #0]
	}
	ILI9XXX_Init();
 800223e:	f7ff ff91 	bl	8002164 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f80b 	bl	8002260 <Displ_Orientation>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	48001400 	.word	0x48001400
 8002258:	40013000 	.word	0x40013000
 800225c:	40003800 	.word	0x40003800

08002260 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d837      	bhi.n	80022e0 <Displ_Orientation+0x80>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <Displ_Orientation+0x18>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	08002289 	.word	0x08002289
 800227c:	0800229f 	.word	0x0800229f
 8002280:	080022b5 	.word	0x080022b5
 8002284:	080022cb 	.word	0x080022cb
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <Displ_Orientation+0xa0>)
 800228a:	2288      	movs	r2, #136	; 0x88
 800228c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <Displ_Orientation+0xa4>)
 8002290:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002294:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <Displ_Orientation+0xa8>)
 8002298:	22f0      	movs	r2, #240	; 0xf0
 800229a:	801a      	strh	r2, [r3, #0]
			break;
 800229c:	e020      	b.n	80022e0 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <Displ_Orientation+0xa0>)
 80022a0:	22e8      	movs	r2, #232	; 0xe8
 80022a2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <Displ_Orientation+0xa4>)
 80022a6:	22f0      	movs	r2, #240	; 0xf0
 80022a8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <Displ_Orientation+0xa8>)
 80022ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022b0:	801a      	strh	r2, [r3, #0]
			break;
 80022b2:	e015      	b.n	80022e0 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <Displ_Orientation+0xa0>)
 80022b6:	2248      	movs	r2, #72	; 0x48
 80022b8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <Displ_Orientation+0xa4>)
 80022bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022c0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <Displ_Orientation+0xa8>)
 80022c4:	22f0      	movs	r2, #240	; 0xf0
 80022c6:	801a      	strh	r2, [r3, #0]
			break;
 80022c8:	e00a      	b.n	80022e0 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <Displ_Orientation+0xa0>)
 80022cc:	2228      	movs	r2, #40	; 0x28
 80022ce:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <Displ_Orientation+0xa4>)
 80022d2:	22f0      	movs	r2, #240	; 0xf0
 80022d4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <Displ_Orientation+0xa8>)
 80022d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022dc:	801a      	strh	r2, [r3, #0]
			break;
 80022de:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80022e0:	2036      	movs	r0, #54	; 0x36
 80022e2:	f7ff ff19 	bl	8002118 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <Displ_Orientation+0xa0>)
 80022ec:	f7ff ff23 	bl	8002136 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <Displ_Orientation+0xac>)
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	7013      	strb	r3, [r2, #0]
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000448 	.word	0x20000448
 8002304:	20000444 	.word	0x20000444
 8002308:	20000442 	.word	0x20000442
 800230c:	20000440 	.word	0x20000440

08002310 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_SPI_ErrorCallback+0x24>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d102      	bne.n	8002328 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_SPI_ErrorCallback+0x28>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
	}
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40013000 	.word	0x40013000
 8002338:	2000000c 	.word	0x2000000c

0800233c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <HAL_SPI_TxCpltCallback+0x24>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d102      	bne.n	8002354 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_SPI_TxCpltCallback+0x28>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
//	#ifdef DISPLAY_USING_TOUCHGFX
//		DisplayDriver_TransferCompleteCallback();
//	#endif

	}
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40013000 	.word	0x40013000
 8002364:	2000000c 	.word	0x2000000c

08002368 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	3b2b      	subs	r3, #43	; 0x2b
 8002376:	2b2c      	cmp	r3, #44	; 0x2c
 8002378:	f200 80a0 	bhi.w	80024bc <Displ_BackLight+0x154>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <Displ_BackLight+0x1c>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002473 	.word	0x08002473
 8002388:	080024bd 	.word	0x080024bd
 800238c:	08002493 	.word	0x08002493
 8002390:	080024bd 	.word	0x080024bd
 8002394:	080024bd 	.word	0x080024bd
 8002398:	08002447 	.word	0x08002447
 800239c:	0800243d 	.word	0x0800243d
 80023a0:	080024bd 	.word	0x080024bd
 80023a4:	080024bd 	.word	0x080024bd
 80023a8:	080024bd 	.word	0x080024bd
 80023ac:	080024bd 	.word	0x080024bd
 80023b0:	080024bd 	.word	0x080024bd
 80023b4:	080024bd 	.word	0x080024bd
 80023b8:	080024bd 	.word	0x080024bd
 80023bc:	080024bd 	.word	0x080024bd
 80023c0:	080024bd 	.word	0x080024bd
 80023c4:	080024bd 	.word	0x080024bd
 80023c8:	080024bd 	.word	0x080024bd
 80023cc:	080024bd 	.word	0x080024bd
 80023d0:	080024bd 	.word	0x080024bd
 80023d4:	080024bd 	.word	0x080024bd
 80023d8:	080024bd 	.word	0x080024bd
 80023dc:	080024bd 	.word	0x080024bd
 80023e0:	080024bd 	.word	0x080024bd
 80023e4:	080024bd 	.word	0x080024bd
 80023e8:	080024bd 	.word	0x080024bd
 80023ec:	080024bd 	.word	0x080024bd
 80023f0:	0800243d 	.word	0x0800243d
 80023f4:	080024bd 	.word	0x080024bd
 80023f8:	080024bd 	.word	0x080024bd
 80023fc:	080024ad 	.word	0x080024ad
 8002400:	080024bd 	.word	0x080024bd
 8002404:	080024bd 	.word	0x080024bd
 8002408:	080024bd 	.word	0x080024bd
 800240c:	080024bd 	.word	0x080024bd
 8002410:	080024bd 	.word	0x080024bd
 8002414:	080024bd 	.word	0x080024bd
 8002418:	080024bd 	.word	0x080024bd
 800241c:	08002439 	.word	0x08002439
 8002420:	080024bd 	.word	0x080024bd
 8002424:	08002459 	.word	0x08002459
 8002428:	080024bd 	.word	0x080024bd
 800242c:	080024bd 	.word	0x080024bd
 8002430:	080024bd 	.word	0x080024bd
 8002434:	0800244f 	.word	0x0800244f
	case 'Q':
		__NOP();
 8002438:	bf00      	nop
		break;
 800243a:	e042      	b.n	80024c2 <Displ_BackLight+0x15a>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
		break;
#else
	case 'F':
	case '1':
		BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <Displ_BackLight+0x168>)
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <Displ_BackLight+0x168>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002444:	e03d      	b.n	80024c2 <Displ_BackLight+0x15a>
	case '0':
		BKLIT_TIMER->BKLIT_CCR=0;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <Displ_BackLight+0x168>)
 8002448:	2200      	movs	r2, #0
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800244c:	e039      	b.n	80024c2 <Displ_BackLight+0x15a>
	case 'W':
		BKLIT_TIMER->BKLIT_CCR=memCCR1;					//restore previous level
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <Displ_BackLight+0x16c>)
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <Displ_BackLight+0x168>)
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002456:	e034      	b.n	80024c2 <Displ_BackLight+0x15a>
	case 'S':
		memCCR1=BKLIT_TIMER->BKLIT_CCR;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <Displ_BackLight+0x168>)
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <Displ_BackLight+0x16c>)
 8002460:	801a      	strh	r2, [r3, #0]
		if (BKLIT_TIMER->BKLIT_CCR>=(BKLIT_STBY_LEVEL))	//set stby level only if current level is higher
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <Displ_BackLight+0x168>)
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	2b31      	cmp	r3, #49	; 0x31
 8002468:	d92a      	bls.n	80024c0 <Displ_BackLight+0x158>
			BKLIT_TIMER->BKLIT_CCR=(BKLIT_STBY_LEVEL);
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <Displ_BackLight+0x168>)
 800246c:	2232      	movs	r2, #50	; 0x32
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002470:	e026      	b.n	80024c0 <Displ_BackLight+0x158>
	case '+':
		if (BKLIT_TIMER->ARR>BKLIT_TIMER->BKLIT_CCR)		// if CCR1 has not yet the highest value (ARR)
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <Displ_BackLight+0x168>)
 8002474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <Displ_BackLight+0x168>)
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	429a      	cmp	r2, r3
 800247c:	d904      	bls.n	8002488 <Displ_BackLight+0x120>
			++BKLIT_TIMER->BKLIT_CCR;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <Displ_BackLight+0x168>)
 8002480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002482:	3201      	adds	r2, #1
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
		break;
 8002486:	e01c      	b.n	80024c2 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=BKLIT_TIMER->ARR;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <Displ_BackLight+0x168>)
 800248a:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <Displ_BackLight+0x168>)
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002490:	e017      	b.n	80024c2 <Displ_BackLight+0x15a>
	case '-':
		if (BKLIT_TIMER->BKLIT_CCR>0)					// if CCR1 has not yet the lowest value (0)
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <Displ_BackLight+0x168>)
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <Displ_BackLight+0x13c>
			--BKLIT_TIMER->BKLIT_CCR;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <Displ_BackLight+0x168>)
 800249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249e:	3a01      	subs	r2, #1
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
			BKLIT_TIMER->BKLIT_CCR=0;
		break;
 80024a2:	e00e      	b.n	80024c2 <Displ_BackLight+0x15a>
			BKLIT_TIMER->BKLIT_CCR=0;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <Displ_BackLight+0x168>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80024aa:	e00a      	b.n	80024c2 <Displ_BackLight+0x15a>
	case 'I':
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
 80024ac:	2104      	movs	r1, #4
 80024ae:	480a      	ldr	r0, [pc, #40]	; (80024d8 <Displ_BackLight+0x170>)
 80024b0:	f004 f87e 	bl	80065b0 <HAL_TIM_PWM_Start>
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <Displ_BackLight+0x168>)
 80024b6:	2264      	movs	r2, #100	; 0x64
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80024ba:	e002      	b.n	80024c2 <Displ_BackLight+0x15a>
#endif
	default:
		break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <Displ_BackLight+0x15a>
		break;
 80024c0:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
#else
	return (BKLIT_TIMER->BKLIT_CCR);
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <Displ_BackLight+0x168>)
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#endif
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40000400 	.word	0x40000400
 80024d4:	2000044a 	.word	0x2000044a
 80024d8:	20000244 	.word	0x20000244

080024dc <Touch_HandlePenDownInterrupt>:
volatile uint8_t Touch_PenDown=0;						// set to 1 by pendown interrupt callback, reset to 0 by sw
volatile uint8_t Touch_Int_Enabled=1;					// while reading touch sensor touch interrupt handling is disabled through this flag



void Touch_HandlePenDownInterrupt (){
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	if (Touch_Int_Enabled) {
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <Touch_HandlePenDownInterrupt+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <Touch_HandlePenDownInterrupt+0x14>
		Touch_PenDown=1;
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <Touch_HandlePenDownInterrupt+0x24>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
	}
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000d 	.word	0x2000000d
 8002500:	2000044c 	.word	0x2000044c

08002504 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==TOUCH_INT_Pin){
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d101      	bne.n	8002518 <HAL_GPIO_EXTI_Callback+0x14>
		Touch_HandlePenDownInterrupt();
 8002514:	f7ff ffe2 	bl	80024dc <Touch_HandlePenDownInterrupt>
	}
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <Touch_PollAxis>:
 * @params	axis	use only one of the three options X_AXIS, Y_AXIS or Z_AXIS
 * @return			the level measured on the "axis" axis
 * 					PLEASE NOTE this function should be only for internal usage
 * 								Use Touch_GetXYTouch() instead
 *******************************************************************************/
uint16_t Touch_PollAxis(uint8_t axis) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
	uint8_t poll[2] = {0,0};
 800252a:	2300      	movs	r3, #0
 800252c:	813b      	strh	r3, [r7, #8]
	
	if (TOUCH_SPI==DISPL_SPI){				// if touch and display share the same SPI port
		Touch_Select();						// enable CS on touch device
	}

	Touch_Int_Enabled=0;	//disable interrupt handling: sensor reading triggers interrupt
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <Touch_PollAxis+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	// disable interrupt while enquiring the touch sensor because it triggers the interrupt pin
	HAL_NVIC_DisableIRQ(TOUCH_INT_EXTI_IRQn);
 8002534:	2007      	movs	r0, #7
 8002536:	f000 fb62 	bl	8002bfe <HAL_NVIC_DisableIRQ>

	HAL_SPI_Transmit(&TOUCH_SPI_PORT, &axis, 1, 10);
 800253a:	1df9      	adds	r1, r7, #7
 800253c:	230a      	movs	r3, #10
 800253e:	2201      	movs	r2, #1
 8002540:	4812      	ldr	r0, [pc, #72]	; (800258c <Touch_PollAxis+0x6c>)
 8002542:	f002 fece 	bl	80052e2 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&TOUCH_SPI_PORT, poll, 2, 10) == HAL_OK) {
 8002546:	f107 0108 	add.w	r1, r7, #8
 800254a:	230a      	movs	r3, #10
 800254c:	2202      	movs	r2, #2
 800254e:	480f      	ldr	r0, [pc, #60]	; (800258c <Touch_PollAxis+0x6c>)
 8002550:	f003 f83c 	bl	80055cc <HAL_SPI_Receive>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <Touch_PollAxis+0x46>
		poll16 = (poll[0]<<8) + poll[1];
 800255a:	7a3b      	ldrb	r3, [r7, #8]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	7a7a      	ldrb	r2, [r7, #9]
 8002560:	4413      	add	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e001      	b.n	800256a <Touch_PollAxis+0x4a>
	}
	else {
		poll16 = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
	}

//enable back interrupt after reading the sensor
	HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 800256a:	2007      	movs	r0, #7
 800256c:	f000 fb61 	bl	8002c32 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(TOUCH_INT_EXTI_IRQn);
 8002570:	2007      	movs	r0, #7
 8002572:	f000 fb36 	bl	8002be2 <HAL_NVIC_EnableIRQ>

	Touch_Int_Enabled=1;
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <Touch_PollAxis+0x68>)
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]

	if (TOUCH_SPI==DISPL_SPI){	// if touch and display share the same SPI port
		Touch_UnSelect();
	}

	return poll16;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	b29b      	uxth	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000000d 	.word	0x2000000d
 800258c:	20000120 	.word	0x20000120

08002590 <Touch_GetXYtouch>:
 * @brief			polls touch screen and returning its XY screen position
 * 					that's regardless touch recording flag (interrupt received)
 * @return	x,y		in case isTouch=1 contain touch coordinates
 * 			isTouch is 1 if detected a touch, otherwise 0;
 *********************************************************************************/
void Touch_GetXYtouch(uint16_t *x, uint16_t *y, uint8_t *isTouch){
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]

const uint8_t pollingLevel=4;
 800259c:	2304      	movs	r3, #4
 800259e:	77fb      	strb	r3, [r7, #31]


// get the average value (over "1<<pollingLevel" attempts of X, Y and Z axes readings)

	// reading Z
	touch=0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025aa:	e00c      	b.n	80025c6 <Touch_GetXYtouch+0x36>
		touch += Touch_PollAxis(Z_AXIS);
 80025ac:	20b0      	movs	r0, #176	; 0xb0
 80025ae:	f7ff ffb7 	bl	8002520 <Touch_PollAxis>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	4413      	add	r3, r2
 80025ba:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80025bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c0:	3301      	adds	r3, #1
 80025c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	429a      	cmp	r2, r3
 80025d4:	dbea      	blt.n	80025ac <Touch_GetXYtouch+0x1c>
	touch >>= pollingLevel;  //get the average value
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	623b      	str	r3, [r7, #32]
	if (touch<=Z_THRESHOLD) {
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e6:	d806      	bhi.n	80025f6 <Touch_GetXYtouch+0x66>
		*isTouch=0;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 80025ee:	2007      	movs	r0, #7
 80025f0:	f000 fb1f 	bl	8002c32 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 80025f4:	e0b2      	b.n	800275c <Touch_GetXYtouch+0x1cc>
	}

	// reading X
	touch=0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002600:	e00c      	b.n	800261c <Touch_GetXYtouch+0x8c>
		touch += Touch_PollAxis(X_AXIS);
 8002602:	20d0      	movs	r0, #208	; 0xd0
 8002604:	f7ff ff8c 	bl	8002520 <Touch_PollAxis>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	4413      	add	r3, r2
 8002610:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002616:	3301      	adds	r3, #1
 8002618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800261c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002620:	7ffb      	ldrb	r3, [r7, #31]
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	429a      	cmp	r2, r3
 800262a:	dbea      	blt.n	8002602 <Touch_GetXYtouch+0x72>
	touch >>= pollingLevel;  //get the average value
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	623b      	str	r3, [r7, #32]
	if (touch<=X_THRESHOLD) {
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d806      	bhi.n	800264c <Touch_GetXYtouch+0xbc>
		*isTouch=0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_ClearPendingIRQ(TOUCH_INT_EXTI_IRQn);
 8002644:	2007      	movs	r0, #7
 8002646:	f000 faf4 	bl	8002c32 <HAL_NVIC_ClearPendingIRQ>
		return;	// no touch: return 0
 800264a:	e087      	b.n	800275c <Touch_GetXYtouch+0x1cc>
	}
	touchx=(AX*touch+BX);
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002764 <Touch_GetXYtouch+0x1d4>
 800265a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002768 <Touch_GetXYtouch+0x1d8>
 8002662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266a:	ee17 3a90 	vmov	r3, s15
 800266e:	61bb      	str	r3, [r7, #24]

	// reading Y - there is no a threshold for Y
	touch=0;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800267a:	e00c      	b.n	8002696 <Touch_GetXYtouch+0x106>
		touch += Touch_PollAxis(Y_AXIS);
 800267c:	2090      	movs	r0, #144	; 0x90
 800267e:	f7ff ff4f 	bl	8002520 <Touch_PollAxis>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	4413      	add	r3, r2
 800268a:	623b      	str	r3, [r7, #32]
	for (k=0;k<(1<<pollingLevel);k++)
 800268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002690:	3301      	adds	r3, #1
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002696:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dbea      	blt.n	800267c <Touch_GetXYtouch+0xec>
	touch >>= pollingLevel; //get the average value
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	623b      	str	r3, [r7, #32]

	touchy=(AY*touch+BY);
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800276c <Touch_GetXYtouch+0x1dc>
 80026be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002770 <Touch_GetXYtouch+0x1e0>
 80026c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ce:	ee17 3a90 	vmov	r3, s15
 80026d2:	617b      	str	r3, [r7, #20]


//having X and Y axis average values
// calculating coordinates as per screen orientation
	switch (current_orientation)
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <Touch_GetXYtouch+0x1e4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d83b      	bhi.n	8002754 <Touch_GetXYtouch+0x1c4>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <Touch_GetXYtouch+0x154>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	08002707 	.word	0x08002707
 80026ec:	0800271f 	.word	0x0800271f
 80026f0:	0800273d 	.word	0x0800273d
	{
	case TOUCH0:
		*x=touchx;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	801a      	strh	r2, [r3, #0]
		*y=touchy;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	801a      	strh	r2, [r3, #0]
		break;
 8002704:	e026      	b.n	8002754 <Touch_GetXYtouch+0x1c4>
	case TOUCH90:
		*x=touchy;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002716:	b29a      	uxth	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	801a      	strh	r2, [r3, #0]
		break;
 800271c:	e01a      	b.n	8002754 <Touch_GetXYtouch+0x1c4>
	case TOUCH180:
		*x=(TOUCH_0_WIDTH-touchx);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_HEIGHT - touchy);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002734:	b29a      	uxth	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	801a      	strh	r2, [r3, #0]
		break;
 800273a:	e00b      	b.n	8002754 <Touch_GetXYtouch+0x1c4>
	case TOUCH270:
		*x=touchy;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	801a      	strh	r2, [r3, #0]
		*y=(TOUCH_0_WIDTH-touchx);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800274c:	b29a      	uxth	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	801a      	strh	r2, [r3, #0]
		break;
 8002752:	bf00      	nop
	}

// set flag indicating there was a touch
	*isTouch=1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
	return;
 800275a:	bf00      	nop
}
 800275c:	3728      	adds	r7, #40	; 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	3c033c60 	.word	0x3c033c60
 8002768:	413ff7cf 	.word	0x413ff7cf
 800276c:	3c375643 	.word	0x3c375643
 8002770:	421c3a5e 	.word	0x421c3a5e
 8002774:	20000440 	.word	0x20000440

08002778 <Touch_In_XY_area>:
 * 			width,
 * 			height	display area to be polled for a touch
 * @return	1		if there is a touch inside area
 * 			0		if no touch or touch outside area defined
 ***********************************************************/
uint8_t Touch_In_XY_area(uint16_t xpos,uint16_t ypos,uint16_t width,uint16_t height) {
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	4604      	mov	r4, r0
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	4603      	mov	r3, r0
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	803b      	strh	r3, [r7, #0]
//sTouchData posXY;
uint16_t x,y;
uint8_t isTouch;
	Touch_GetXYtouch(&x, &y, &isTouch);
 8002796:	f107 020b 	add.w	r2, r7, #11
 800279a:	f107 010c 	add.w	r1, r7, #12
 800279e:	f107 030e 	add.w	r3, r7, #14
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fef4 	bl	8002590 <Touch_GetXYtouch>
	if (!isTouch)
 80027a8:	7afb      	ldrb	r3, [r7, #11]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <Touch_In_XY_area+0x3a>
		return 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e018      	b.n	80027e4 <Touch_In_XY_area+0x6c>
	if (x>=xpos)
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d813      	bhi.n	80027e2 <Touch_In_XY_area+0x6a>
		if (x<xpos+width)
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	4619      	mov	r1, r3
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	4413      	add	r3, r2
 80027c4:	4299      	cmp	r1, r3
 80027c6:	da0c      	bge.n	80027e2 <Touch_In_XY_area+0x6a>
			if (y>=ypos)
 80027c8:	89bb      	ldrh	r3, [r7, #12]
 80027ca:	88ba      	ldrh	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d808      	bhi.n	80027e2 <Touch_In_XY_area+0x6a>
				if (y<ypos+height)
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	4619      	mov	r1, r3
 80027d4:	88ba      	ldrh	r2, [r7, #4]
 80027d6:	883b      	ldrh	r3, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	4299      	cmp	r1, r3
 80027dc:	da01      	bge.n	80027e2 <Touch_In_XY_area+0x6a>
					return 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <Touch_In_XY_area+0x6c>
	return 0;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}

080027ec <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027f0:	f7ff fc1e 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f4:	480c      	ldr	r0, [pc, #48]	; (8002828 <LoopForever+0x6>)
  ldr r1, =_edata
 80027f6:	490d      	ldr	r1, [pc, #52]	; (800282c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <LoopForever+0xe>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027fc:	e002      	b.n	8002804 <LoopCopyDataInit>

080027fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002802:	3304      	adds	r3, #4

08002804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002808:	d3f9      	bcc.n	80027fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800280c:	4c0a      	ldr	r4, [pc, #40]	; (8002838 <LoopForever+0x16>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002810:	e001      	b.n	8002816 <LoopFillZerobss>

08002812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002814:	3204      	adds	r2, #4

08002816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002818:	d3fb      	bcc.n	8002812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800281a:	f008 fbb3 	bl	800af84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281e:	f7fe fa9b 	bl	8000d58 <main>

08002822 <LoopForever>:

LoopForever:
    b LoopForever
 8002822:	e7fe      	b.n	8002822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002824:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002830:	0800f044 	.word	0x0800f044
  ldr r2, =_sbss
 8002834:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002838:	200007e0 	.word	0x200007e0

0800283c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC1_IRQHandler>

0800283e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f9a3 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800284e:	2000      	movs	r0, #0
 8002850:	f000 f80e 	bl	8002870 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	71fb      	strb	r3, [r7, #7]
 800285e:	e001      	b.n	8002864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002860:	f7ff f802 	bl	8001868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002864:	79fb      	ldrb	r3, [r7, #7]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_InitTick+0x6c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_InitTick+0x70>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_InitTick+0x6c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f9bd 	bl	8002c1a <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d809      	bhi.n	80028c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f000 f979 	bl	8002baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <HAL_InitTick+0x74>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e007      	b.n	80028d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e004      	b.n	80028d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e001      	b.n	80028d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000014 	.word	0x20000014
 80028e0:	20000008 	.word	0x20000008
 80028e4:	20000010 	.word	0x20000010

080028e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x20>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x24>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_IncTick+0x24>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000014 	.word	0x20000014
 800290c:	20000450 	.word	0x20000450

08002910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_GetTick+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000450 	.word	0x20000450

08002928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff ffee 	bl	8002910 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d005      	beq.n	800294e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_Delay+0x44>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800294e:	bf00      	nop
 8002950:	f7ff ffde 	bl	8002910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8f7      	bhi.n	8002950 <HAL_Delay+0x28>
  {
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000014 	.word	0x20000014

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	db12      	blt.n	8002a48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	490a      	ldr	r1, [pc, #40]	; (8002a54 <__NVIC_DisableIRQ+0x44>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	3320      	adds	r3, #32
 8002a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3c:	f3bf 8f4f 	dsb	sy
}
 8002a40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a42:	f3bf 8f6f 	isb	sy
}
 8002a46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0c      	blt.n	8002a84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <__NVIC_ClearPendingIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	3360      	adds	r3, #96	; 0x60
 8002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fee7 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff fefc 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff feef 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff feff 	bl	8002a10 <__NVIC_DisableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff94 	bl	8002b50 <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff09 	bl	8002a58 <__NVIC_ClearPendingIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e054      	b.n	8002d0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7f5b      	ldrb	r3, [r3, #29]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fe1c 	bl	80018b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_CRC_Init+0xc4>)
 8002c8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0218 	bic.w	r2, r2, #24
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	e00c      	b.n	8002cba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f834 	bl	8002d18 <HAL_CRCEx_Polynomial_Set>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e028      	b.n	8002d0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	795b      	ldrb	r3, [r3, #5]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	611a      	str	r2, [r3, #16]
 8002ccc:	e004      	b.n	8002cd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6912      	ldr	r2, [r2, #16]
 8002cd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	04c11db7 	.word	0x04c11db7

08002d18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d28:	231f      	movs	r3, #31
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
 8002d3a:	e063      	b.n	8002e04 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d3c:	bf00      	nop
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	613a      	str	r2, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_CRCEx_Polynomial_Set+0x44>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b18      	cmp	r3, #24
 8002d60:	d846      	bhi.n	8002df0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002df7 	.word	0x08002df7
 8002d6c:	08002df1 	.word	0x08002df1
 8002d70:	08002df1 	.word	0x08002df1
 8002d74:	08002df1 	.word	0x08002df1
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002df1 	.word	0x08002df1
 8002d80:	08002df1 	.word	0x08002df1
 8002d84:	08002df1 	.word	0x08002df1
 8002d88:	08002de5 	.word	0x08002de5
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	08002df1 	.word	0x08002df1
 8002d94:	08002df1 	.word	0x08002df1
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002df1 	.word	0x08002df1
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002df1 	.word	0x08002df1
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002df1 	.word	0x08002df1
 8002db0:	08002df1 	.word	0x08002df1
 8002db4:	08002df1 	.word	0x08002df1
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002df1 	.word	0x08002df1
 8002dc8:	08002dcd 	.word	0x08002dcd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d913      	bls.n	8002dfa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002dd6:	e010      	b.n	8002dfa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b07      	cmp	r3, #7
 8002ddc:	d90f      	bls.n	8002dfe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002de2:	e00c      	b.n	8002dfe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	d90b      	bls.n	8002e02 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002dee:	e008      	b.n	8002e02 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
        break;
 8002df4:	e006      	b.n	8002e04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002df6:	bf00      	nop
 8002df8:	e004      	b.n	8002e04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002e02:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 0118 	bic.w	r1, r3, #24
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e08d      	b.n	8002f62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_DMA_Init+0x138>)
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d80f      	bhi.n	8002e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_DMA_Init+0x13c>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <HAL_DMA_Init+0x140>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_DMA_Init+0x144>)
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e70:	e00e      	b.n	8002e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_DMA_Init+0x148>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <HAL_DMA_Init+0x140>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	009a      	lsls	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <HAL_DMA_Init+0x14c>)
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa72 	bl	80033cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef0:	d102      	bne.n	8002ef8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_DMA_Init+0x104>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d80c      	bhi.n	8002f38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa92 	bl	8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e008      	b.n	8002f4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40020407 	.word	0x40020407
 8002f70:	bffdfff8 	.word	0xbffdfff8
 8002f74:	cccccccd 	.word	0xcccccccd
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	bffdfbf8 	.word	0xbffdfbf8
 8002f80:	40020400 	.word	0x40020400

08002f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_DMA_Start_IT+0x20>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e066      	b.n	8003072 <HAL_DMA_Start_IT+0xee>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d155      	bne.n	8003064 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f9b6 	bl	800334e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 020e 	orr.w	r2, r2, #14
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e00f      	b.n	800301c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 020a 	orr.w	r2, r2, #10
 800301a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e005      	b.n	8003070 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d008      	beq.n	80030a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f003 021c 	and.w	r2, r3, #28
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003108:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003112:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d005      	beq.n	8003156 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e047      	b.n	80031e6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 020e 	bic.w	r2, r2, #14
 8003164:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 021c 	and.w	r2, r3, #28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031c4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    }
  }
  return status;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f003 031c 	and.w	r3, r3, #28
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d026      	beq.n	800326a <HAL_DMA_IRQHandler+0x7a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f003 021c 	and.w	r2, r3, #28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	2104      	movs	r1, #4
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2b00      	cmp	r3, #0
 800325e:	d071      	beq.n	8003344 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003268:	e06c      	b.n	8003344 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f003 031c 	and.w	r3, r3, #28
 8003272:	2202      	movs	r2, #2
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <HAL_DMA_IRQHandler+0xec>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d029      	beq.n	80032dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 020a 	bic.w	r2, r2, #10
 80032a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f003 021c 	and.w	r2, r3, #28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2102      	movs	r1, #2
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d038      	beq.n	8003344 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032da:	e033      	b.n	8003344 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 031c 	and.w	r3, r3, #28
 80032e4:	2208      	movs	r2, #8
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02a      	beq.n	8003346 <HAL_DMA_IRQHandler+0x156>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d025      	beq.n	8003346 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 020e 	bic.w	r2, r2, #14
 8003308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f003 021c 	and.w	r2, r3, #28
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003344:	bf00      	nop
 8003346:	bf00      	nop
}
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003364:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003376:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	f003 021c 	and.w	r2, r3, #28
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d108      	bne.n	80033ae <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ac:	e007      	b.n	80033be <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033dc:	429a      	cmp	r2, r3
 80033de:	d80a      	bhi.n	80033f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6493      	str	r3, [r2, #72]	; 0x48
 80033f4:	e007      	b.n	8003406 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003400:	4413      	add	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3b08      	subs	r3, #8
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40020407 	.word	0x40020407
 800343c:	4002081c 	.word	0x4002081c
 8003440:	cccccccd 	.word	0xcccccccd
 8003444:	40020880 	.word	0x40020880

08003448 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800346a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	1000823f 	.word	0x1000823f
 800348c:	40020940 	.word	0x40020940

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349e:	e166      	b.n	800376e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8158 	beq.w	8003768 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d005      	beq.n	80034d0 <HAL_GPIO_Init+0x40>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d130      	bne.n	8003532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003506:	2201      	movs	r2, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0201 	and.w	r2, r3, #1
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b03      	cmp	r3, #3
 800353c:	d017      	beq.n	800356e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d123      	bne.n	80035c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	08da      	lsrs	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3208      	adds	r2, #8
 8003582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	08da      	lsrs	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3208      	adds	r2, #8
 80035bc:	6939      	ldr	r1, [r7, #16]
 80035be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0203 	and.w	r2, r3, #3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80b2 	beq.w	8003768 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_GPIO_Init+0x2fc>)
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_GPIO_Init+0x2fc>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6613      	str	r3, [r2, #96]	; 0x60
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_GPIO_Init+0x2fc>)
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800361c:	4a5c      	ldr	r2, [pc, #368]	; (8003790 <HAL_GPIO_Init+0x300>)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003646:	d02b      	beq.n	80036a0 <HAL_GPIO_Init+0x210>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_GPIO_Init+0x304>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d025      	beq.n	800369c <HAL_GPIO_Init+0x20c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a51      	ldr	r2, [pc, #324]	; (8003798 <HAL_GPIO_Init+0x308>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01f      	beq.n	8003698 <HAL_GPIO_Init+0x208>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a50      	ldr	r2, [pc, #320]	; (800379c <HAL_GPIO_Init+0x30c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d019      	beq.n	8003694 <HAL_GPIO_Init+0x204>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4f      	ldr	r2, [pc, #316]	; (80037a0 <HAL_GPIO_Init+0x310>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_GPIO_Init+0x200>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_GPIO_Init+0x314>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_Init+0x1fc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_GPIO_Init+0x318>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_Init+0x1f8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x31c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_Init+0x1f4>
 8003680:	2307      	movs	r3, #7
 8003682:	e00e      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 8003684:	2308      	movs	r3, #8
 8003686:	e00c      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 8003688:	2306      	movs	r3, #6
 800368a:	e00a      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 800368c:	2305      	movs	r3, #5
 800368e:	e008      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 8003690:	2304      	movs	r3, #4
 8003692:	e006      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 8003694:	2303      	movs	r3, #3
 8003696:	e004      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 8003698:	2302      	movs	r3, #2
 800369a:	e002      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_GPIO_Init+0x212>
 80036a0:	2300      	movs	r3, #0
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	f002 0203 	and.w	r2, r2, #3
 80036a8:	0092      	lsls	r2, r2, #2
 80036aa:	4093      	lsls	r3, r2
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036b2:	4937      	ldr	r1, [pc, #220]	; (8003790 <HAL_GPIO_Init+0x300>)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_GPIO_Init+0x320>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036e4:	4a32      	ldr	r2, [pc, #200]	; (80037b0 <HAL_GPIO_Init+0x320>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_GPIO_Init+0x320>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800370e:	4a28      	ldr	r2, [pc, #160]	; (80037b0 <HAL_GPIO_Init+0x320>)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <HAL_GPIO_Init+0x320>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003738:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <HAL_GPIO_Init+0x320>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_GPIO_Init+0x320>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <HAL_GPIO_Init+0x320>)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f ae91 	bne.w	80034a0 <HAL_GPIO_Init+0x10>
  }
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	48000400 	.word	0x48000400
 8003798:	48000800 	.word	0x48000800
 800379c:	48000c00 	.word	0x48000c00
 80037a0:	48001000 	.word	0x48001000
 80037a4:	48001400 	.word	0x48001400
 80037a8:	48001800 	.word	0x48001800
 80037ac:	48001c00 	.word	0x48001c00
 80037b0:	40010400 	.word	0x40010400

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037fa:	4a05      	ldr	r2, [pc, #20]	; (8003810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fe7e 	bl	8002504 <HAL_GPIO_EXTI_Callback>
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003818:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_PWREx_GetVoltageRange+0x3c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003824:	d102      	bne.n	800382c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382a:	e00b      	b.n	8003844 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_PWREx_GetVoltageRange+0x3c>)
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383a:	d102      	bne.n	8003842 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800383c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003840:	e000      	b.n	8003844 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003842:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000

08003854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d141      	bne.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003862:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d131      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003888:	4a41      	ldr	r2, [pc, #260]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2232      	movs	r2, #50	; 0x32
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a3f      	ldr	r2, [pc, #252]	; (8003998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	e002      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d102      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d158      	bne.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e057      	b.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d4:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038e4:	e04d      	b.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ec:	d141      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d131      	bne.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003902:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800390c:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2232      	movs	r2, #50	; 0x32
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	3301      	adds	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003932:	e002      	b.n	800393a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003946:	d102      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f2      	bne.n	8003934 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d112      	bne.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e011      	b.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003970:	e007      	b.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003980:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40007000 	.word	0x40007000
 8003994:	20000008 	.word	0x20000008
 8003998:	431bde83 	.word	0x431bde83

0800399c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039aa:	6053      	str	r3, [r2, #4]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40007000 	.word	0x40007000

080039bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f000 bc08 	b.w	80041e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d0:	4b96      	ldr	r3, [pc, #600]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039da:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80e4 	beq.w	8003bba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	f040 808b 	bne.w	8003b16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 8087 	bne.w	8003b16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_OscConfig+0x64>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e3df      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	4b81      	ldr	r3, [pc, #516]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_RCC_OscConfig+0x7e>
 8003a30:	4b7e      	ldr	r3, [pc, #504]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a38:	e005      	b.n	8003a46 <HAL_RCC_OscConfig+0x8a>
 8003a3a:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d223      	bcs.n	8003a92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fdcc 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e3c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a5e:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a72      	ldr	r2, [pc, #456]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a64:	f043 0308 	orr.w	r3, r3, #8
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	496d      	ldr	r1, [pc, #436]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	4968      	ldr	r1, [pc, #416]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
 8003a90:	e025      	b.n	8003ade <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a92:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a65      	ldr	r2, [pc, #404]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003a98:	f043 0308 	orr.w	r3, r3, #8
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4960      	ldr	r1, [pc, #384]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	495b      	ldr	r1, [pc, #364]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fd8c 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e380      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ade:	f000 fcc1 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4950      	ldr	r1, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a4e      	ldr	r2, [pc, #312]	; (8003c34 <HAL_RCC_OscConfig+0x278>)
 8003afc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003afe:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <HAL_RCC_OscConfig+0x27c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe feb4 	bl	8002870 <HAL_InitTick>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d052      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	e364      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d032      	beq.n	8003b84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a42      	ldr	r2, [pc, #264]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fef1 	bl	8002910 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b32:	f7fe feed 	bl	8002910 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e34d      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b56:	f043 0308 	orr.w	r3, r3, #8
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b33      	ldr	r3, [pc, #204]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4930      	ldr	r1, [pc, #192]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	492b      	ldr	r1, [pc, #172]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
 8003b82:	e01a      	b.n	8003bba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b84:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b90:	f7fe febe 	bl	8002910 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b98:	f7fe feba 	bl	8002910 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e31a      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1dc>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d073      	beq.n	8003cae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x21c>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d063      	beq.n	8003cac <HAL_RCC_OscConfig+0x2f0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d15f      	bne.n	8003cac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e2f7      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x24c>
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e025      	b.n	8003c54 <HAL_RCC_OscConfig+0x298>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d114      	bne.n	8003c3c <HAL_RCC_OscConfig+0x280>
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a02      	ldr	r2, [pc, #8]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e013      	b.n	8003c54 <HAL_RCC_OscConfig+0x298>
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0800cb0c 	.word	0x0800cb0c
 8003c34:	20000008 	.word	0x20000008
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	4ba0      	ldr	r3, [pc, #640]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9f      	ldr	r2, [pc, #636]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b9d      	ldr	r3, [pc, #628]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a9c      	ldr	r2, [pc, #624]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fe58 	bl	8002910 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe fe54 	bl	8002910 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e2b4      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c76:	4b92      	ldr	r3, [pc, #584]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x2a8>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe fe44 	bl	8002910 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe fe40 	bl	8002910 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e2a0      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d0>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d060      	beq.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_OscConfig+0x310>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d116      	bne.n	8003cfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ccc:	4b7c      	ldr	r3, [pc, #496]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x328>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e27d      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	4973      	ldr	r1, [pc, #460]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	e040      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d023      	beq.n	8003d4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fdff 	bl	8002910 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fdfb 	bl	8002910 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e25b      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d28:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b62      	ldr	r3, [pc, #392]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	495f      	ldr	r1, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
 8003d48:	e018      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a5c      	ldr	r2, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe fddb 	bl	8002910 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fdd7 	bl	8002910 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e237      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d03c      	beq.n	8003e02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01c      	beq.n	8003dca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d96:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fe fdb6 	bl	8002910 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da8:	f7fe fdb2 	bl	8002910 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e212      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dba:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3ec>
 8003dc8:	e01b      	b.n	8003e02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dca:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd0:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fe fd99 	bl	8002910 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fe fd95 	bl	8002910 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1f5      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ef      	bne.n	8003de2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80a6 	beq.w	8003f5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e10:	2300      	movs	r3, #0
 8003e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d118      	bne.n	8003e7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e48:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCC_OscConfig+0x508>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_RCC_OscConfig+0x508>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e54:	f7fe fd5c 	bl	8002910 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fe fd58 	bl	8002910 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1b8      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x508>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4d8>
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e92:	e029      	b.n	8003ee8 <HAL_RCC_OscConfig+0x52c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d115      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x50c>
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <HAL_RCC_OscConfig+0x504>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x52c>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	4b9d      	ldr	r3, [pc, #628]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a9c      	ldr	r2, [pc, #624]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed8:	4b99      	ldr	r3, [pc, #612]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	4a98      	ldr	r2, [pc, #608]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d016      	beq.n	8003f1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fd0e 	bl	8002910 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fd0a 	bl	8002910 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e168      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f0e:	4b8c      	ldr	r3, [pc, #560]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ed      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x53c>
 8003f1c:	e015      	b.n	8003f4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fcf7 	bl	8002910 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fe fcf3 	bl	8002910 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e151      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3c:	4b80      	ldr	r3, [pc, #512]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ed      	bne.n	8003f26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d03c      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01c      	beq.n	8003faa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f70:	4b73      	ldr	r3, [pc, #460]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f76:	4a72      	ldr	r2, [pc, #456]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fe fcc6 	bl	8002910 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f88:	f7fe fcc2 	bl	8002910 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e122      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f9a:	4b69      	ldr	r3, [pc, #420]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ef      	beq.n	8003f88 <HAL_RCC_OscConfig+0x5cc>
 8003fa8:	e01b      	b.n	8003fe2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb0:	4a63      	ldr	r2, [pc, #396]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fe fca9 	bl	8002910 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc2:	f7fe fca5 	bl	8002910 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e105      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ef      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80f9 	beq.w	80041de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f040 80cf 	bne.w	8004194 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ff6:	4b52      	ldr	r3, [pc, #328]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0203 	and.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	429a      	cmp	r2, r3
 8004008:	d12c      	bne.n	8004064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	3b01      	subs	r3, #1
 8004016:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d123      	bne.n	8004064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d11b      	bne.n	8004064 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d113      	bne.n	8004064 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d109      	bne.n	8004064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	3b01      	subs	r3, #1
 800405e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d071      	beq.n	8004148 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d068      	beq.n	800413c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800406a:	4b35      	ldr	r3, [pc, #212]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004076:	4b32      	ldr	r3, [pc, #200]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0ac      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004086:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2d      	ldr	r2, [pc, #180]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 800408c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004090:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004092:	f7fe fc3d 	bl	8002910 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fc39 	bl	8002910 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e099      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCC_OscConfig+0x788>)
 80040be:	4013      	ands	r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040d2:	0212      	lsls	r2, r2, #8
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040da:	0852      	lsrs	r2, r2, #1
 80040dc:	3a01      	subs	r2, #1
 80040de:	0552      	lsls	r2, r2, #21
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0652      	lsls	r2, r2, #25
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f2:	06d2      	lsls	r2, r2, #27
 80040f4:	430a      	orrs	r2, r1
 80040f6:	4912      	ldr	r1, [pc, #72]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004112:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004114:	f7fe fbfc 	bl	8002910 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fbf8 	bl	8002910 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e058      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_RCC_OscConfig+0x784>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800413a:	e050      	b.n	80041de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04f      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
 8004140:	40021000 	.word	0x40021000
 8004144:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d144      	bne.n	80041de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 800415a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 8004166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800416a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800416c:	f7fe fbd0 	bl	8002910 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fbcc 	bl	8002910 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e02c      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x7b8>
 8004192:	e024      	b.n	80041de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d01f      	beq.n	80041da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 80041a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fe fbb3 	bl	8002910 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fe fbaf 	bl	8002910 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e00f      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	4905      	ldr	r1, [pc, #20]	; (80041e8 <HAL_RCC_OscConfig+0x82c>)
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x830>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
 80041d8:	e001      	b.n	80041de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	feeefffc 	.word	0xfeeefffc

080041f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e11d      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b90      	ldr	r3, [pc, #576]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d910      	bls.n	8004238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 020f 	bic.w	r2, r3, #15
 800421e:	498b      	ldr	r1, [pc, #556]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b89      	ldr	r3, [pc, #548]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e105      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004250:	429a      	cmp	r2, r3
 8004252:	d908      	bls.n	8004266 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b7e      	ldr	r3, [pc, #504]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	497b      	ldr	r1, [pc, #492]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d079      	beq.n	8004366 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d11e      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	4b75      	ldr	r3, [pc, #468]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0dc      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800428a:	f000 fa09 	bl	80046a0 <RCC_GetSysClockFreqFromPLLSource>
 800428e:	4603      	mov	r3, r0
 8004290:	4a70      	ldr	r2, [pc, #448]	; (8004454 <HAL_RCC_ClockConfig+0x264>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d946      	bls.n	8004324 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004296:	4b6e      	ldr	r3, [pc, #440]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d140      	bne.n	8004324 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042a2:	4b6b      	ldr	r3, [pc, #428]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042aa:	4a69      	ldr	r2, [pc, #420]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e035      	b.n	8004324 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c0:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d115      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0b9      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d8:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0ad      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e8:	4b59      	ldr	r3, [pc, #356]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0a5      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80042f8:	f000 f8b4 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4a55      	ldr	r2, [pc, #340]	; (8004454 <HAL_RCC_ClockConfig+0x264>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d90f      	bls.n	8004324 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004304:	4b52      	ldr	r3, [pc, #328]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004318:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800431a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004324:	4b4a      	ldr	r3, [pc, #296]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4947      	ldr	r1, [pc, #284]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fe faeb 	bl	8002910 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433c:	e00a      	b.n	8004354 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433e:	f7fe fae7 	bl	8002910 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e077      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 020c 	and.w	r2, r3, #12
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	429a      	cmp	r2, r3
 8004364:	d1eb      	bne.n	800433e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d105      	bne.n	8004378 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800436c:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a37      	ldr	r2, [pc, #220]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004390:	429a      	cmp	r2, r3
 8004392:	d208      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	492b      	ldr	r1, [pc, #172]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d210      	bcs.n	80043d6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 020f 	bic.w	r2, r3, #15
 80043bc:	4923      	ldr	r1, [pc, #140]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_RCC_ClockConfig+0x25c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e036      	b.n	8004444 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e2:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4918      	ldr	r1, [pc, #96]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4910      	ldr	r1, [pc, #64]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 8004410:	4313      	orrs	r3, r2
 8004412:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004414:	f000 f826 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_RCC_ClockConfig+0x260>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <HAL_RCC_ClockConfig+0x268>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_RCC_ClockConfig+0x26c>)
 8004432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fa19 	bl	8002870 <HAL_InitTick>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40022000 	.word	0x40022000
 8004450:	40021000 	.word	0x40021000
 8004454:	04c4b400 	.word	0x04c4b400
 8004458:	0800cb0c 	.word	0x0800cb0c
 800445c:	20000008 	.word	0x20000008
 8004460:	20000010 	.word	0x20000010

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b3e      	ldr	r3, [pc, #248]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	4b3b      	ldr	r3, [pc, #236]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x34>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11e      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e005      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e004      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d134      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f2:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0xa6>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d003      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0xac>
 8004508:	e005      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_RCC_GetSysClockFreq+0x110>)
 800450c:	617b      	str	r3, [r7, #20]
      break;
 800450e:	e005      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_RCC_GetSysClockFreq+0x114>)
 8004512:	617b      	str	r3, [r7, #20]
      break;
 8004514:	e002      	b.n	800451c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	617b      	str	r3, [r7, #20]
      break;
 800451a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3301      	adds	r3, #1
 8004528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	fb03 f202 	mul.w	r2, r3, r2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCC_GetSysClockFreq+0x108>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	0e5b      	lsrs	r3, r3, #25
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	3301      	adds	r3, #1
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800455c:	69bb      	ldr	r3, [r7, #24]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	; 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	0800cb24 	.word	0x0800cb24
 8004574:	00f42400 	.word	0x00f42400
 8004578:	017d7840 	.word	0x017d7840

0800457c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCC_GetHCLKFreq+0x14>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000008 	.word	0x20000008

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004598:	f7ff fff0 	bl	800457c <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	0800cb1c 	.word	0x0800cb1c

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045c4:	f7ff ffda 	bl	800457c <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0adb      	lsrs	r3, r3, #11
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800cb1c 	.word	0x0800cb1c

080045ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004604:	f7ff f906 	bl	8003814 <HAL_PWREx_GetVoltageRange>
 8004608:	6178      	str	r0, [r7, #20]
 800460a:	e014      	b.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	6593      	str	r3, [r2, #88]	; 0x58
 8004618:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004624:	f7ff f8f6 	bl	8003814 <HAL_PWREx_GetVoltageRange>
 8004628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d10b      	bne.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d913      	bls.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2ba0      	cmp	r3, #160	; 0xa0
 8004648:	d902      	bls.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800464a:	2302      	movs	r3, #2
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e00d      	b.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004650:	2301      	movs	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	e00a      	b.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b7f      	cmp	r3, #127	; 0x7f
 800465a:	d902      	bls.n	8004662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800465c:	2302      	movs	r3, #2
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e004      	b.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b70      	cmp	r3, #112	; 0x70
 8004666:	d101      	bne.n	800466c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004668:	2301      	movs	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 020f 	bic.w	r2, r3, #15
 8004674:	4909      	ldr	r1, [pc, #36]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	429a      	cmp	r2, r3
 8004688:	d001      	beq.n	800468e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	40022000 	.word	0x40022000

080046a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046a6:	4b2d      	ldr	r3, [pc, #180]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d00b      	beq.n	80046ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d825      	bhi.n	8004708 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d008      	beq.n	80046d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11f      	bne.n	8004708 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046ca:	613b      	str	r3, [r7, #16]
    break;
 80046cc:	e01f      	b.n	800470e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046d0:	613b      	str	r3, [r7, #16]
    break;
 80046d2:	e01c      	b.n	800470e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e005      	b.n	80046fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	613b      	str	r3, [r7, #16]
    break;
 8004706:	e002      	b.n	800470e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
    break;
 800470c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	3301      	adds	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	fb03 f202 	mul.w	r2, r3, r2
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0e5b      	lsrs	r3, r3, #25
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800474e:	683b      	ldr	r3, [r7, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40021000 	.word	0x40021000
 8004760:	00f42400 	.word	0x00f42400
 8004764:	017d7840 	.word	0x017d7840
 8004768:	0800cb24 	.word	0x0800cb24

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004774:	2300      	movs	r3, #0
 8004776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004778:	2300      	movs	r3, #0
 800477a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	2b00      	cmp	r3, #0
 8004786:	d040      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d02a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d825      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d026      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004798:	2b60      	cmp	r3, #96	; 0x60
 800479a:	d821      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d006      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d81d      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d010      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047ac:	e018      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ae:	4b89      	ldr	r3, [pc, #548]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4a88      	ldr	r2, [pc, #544]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ba:	e015      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb02 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047cc:	e00c      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3320      	adds	r3, #32
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fbed 	bl	8004fb4 <RCCEx_PLLSAI2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047de:	e003      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	74fb      	strb	r3, [r7, #19]
      break;
 80047e4:	e000      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ee:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fc:	4975      	ldr	r1, [pc, #468]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004804:	e001      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d047      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d030      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004824:	d82a      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482a:	d02a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800482c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004830:	d824      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004836:	d008      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d81e      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d010      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004848:	e018      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800484a:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4a61      	ldr	r2, [pc, #388]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004856:	e015      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fab4 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004868:	e00c      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3320      	adds	r3, #32
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb9f 	bl	8004fb4 <RCCEx_PLLSAI2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	74fb      	strb	r3, [r7, #19]
      break;
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800488a:	4b52      	ldr	r3, [pc, #328]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	494e      	ldr	r1, [pc, #312]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80048a0:	e001      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 809f 	beq.w	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4a40      	ldr	r2, [pc, #256]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e6:	2301      	movs	r3, #1
 80048e8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ea:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048f6:	f7fe f80b 	bl	8002910 <HAL_GetTick>
 80048fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048fc:	e009      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fe f807 	bl	8002910 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d902      	bls.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	74fb      	strb	r3, [r7, #19]
        break;
 8004910:	e005      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004912:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0ef      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800491e:	7cfb      	ldrb	r3, [r7, #19]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d15b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01f      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	429a      	cmp	r2, r3
 8004940:	d019      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800494e:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800496e:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d016      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd ffc6 	bl	8002910 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004986:	e00b      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fd ffc2 	bl	8002910 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d902      	bls.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	74fb      	strb	r3, [r7, #19]
            break;
 800499e:	e006      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ec      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10c      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	74bb      	strb	r3, [r7, #18]
 80049d2:	e005      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e0:	7c7b      	ldrb	r3, [r7, #17]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e6:	4ba0      	ldr	r3, [pc, #640]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	4a9f      	ldr	r2, [pc, #636]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fe:	4b9a      	ldr	r3, [pc, #616]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f023 0203 	bic.w	r2, r3, #3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	4996      	ldr	r1, [pc, #600]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a20:	4b91      	ldr	r3, [pc, #580]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f023 020c 	bic.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	498e      	ldr	r1, [pc, #568]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a42:	4b89      	ldr	r3, [pc, #548]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	4985      	ldr	r1, [pc, #532]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a64:	4b80      	ldr	r3, [pc, #512]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	497d      	ldr	r1, [pc, #500]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a86:	4b78      	ldr	r3, [pc, #480]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	4974      	ldr	r1, [pc, #464]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aa8:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	496c      	ldr	r1, [pc, #432]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad8:	4963      	ldr	r1, [pc, #396]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aec:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afa:	495b      	ldr	r1, [pc, #364]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b0e:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	4952      	ldr	r1, [pc, #328]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b30:	4b4d      	ldr	r3, [pc, #308]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	494a      	ldr	r1, [pc, #296]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b52:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	4941      	ldr	r1, [pc, #260]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b74:	4b3c      	ldr	r3, [pc, #240]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b7a:	f023 0203 	bic.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	4939      	ldr	r1, [pc, #228]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b96:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba4:	4930      	ldr	r1, [pc, #192]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a2b      	ldr	r2, [pc, #172]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc0:	60d3      	str	r3, [r2, #12]
 8004bc2:	e011      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f8f9 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d04d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfc:	d108      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c0e:	e012      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c20:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	490e      	ldr	r1, [pc, #56]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
 8004c4c:	e020      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a02      	ldr	r2, [pc, #8]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e014      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f8a5 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d028      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004caa:	4947      	ldr	r1, [pc, #284]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cba:	d106      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
 8004cc8:	e011      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f876 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01e      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cfa:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0a:	492f      	ldr	r1, [pc, #188]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2102      	movs	r1, #2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f851 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d44:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d4a:	f023 0204 	bic.w	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d54:	491c      	ldr	r1, [pc, #112]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d6e:	f023 0218 	bic.w	r2, r3, #24
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	4913      	ldr	r1, [pc, #76]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d017      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9c:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000

08004dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dda:	4b72      	ldr	r3, [pc, #456]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004de6:	4b6f      	ldr	r3, [pc, #444]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d103      	bne.n	8004dfe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d142      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e03f      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d018      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x72>
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d825      	bhi.n	8004e5c <RCCEx_PLLSAI1_Config+0x90>
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d002      	beq.n	8004e1a <RCCEx_PLLSAI1_Config+0x4e>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d009      	beq.n	8004e2c <RCCEx_PLLSAI1_Config+0x60>
 8004e18:	e020      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e1a:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11d      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2a:	e01a      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e2c:	4b5d      	ldr	r3, [pc, #372]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3c:	e013      	b.n	8004e66 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e4a:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e004      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e72:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f023 0203 	bic.w	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4949      	ldr	r1, [pc, #292]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 8086 	bne.w	8004f98 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e8c:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a44      	ldr	r2, [pc, #272]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fd fd3a 	bl	8002910 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e9e:	e009      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea0:	f7fd fd36 	bl	8002910 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e005      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d168      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6892      	ldr	r2, [r2, #8]
 8004ed8:	0211      	lsls	r1, r2, #8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68d2      	ldr	r2, [r2, #12]
 8004ede:	06d2      	lsls	r2, r2, #27
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6852      	ldr	r2, [r2, #4]
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	0112      	lsls	r2, r2, #4
 8004eea:	430a      	orrs	r2, r1
 8004eec:	492d      	ldr	r1, [pc, #180]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	610b      	str	r3, [r1, #16]
 8004ef2:	e02d      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d115      	bne.n	8004f26 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efa:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6892      	ldr	r2, [r2, #8]
 8004f06:	0211      	lsls	r1, r2, #8
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6912      	ldr	r2, [r2, #16]
 8004f0c:	0852      	lsrs	r2, r2, #1
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	0552      	lsls	r2, r2, #21
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6852      	ldr	r2, [r2, #4]
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0112      	lsls	r2, r2, #4
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	4921      	ldr	r1, [pc, #132]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	610b      	str	r3, [r1, #16]
 8004f24:	e014      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	0211      	lsls	r1, r2, #8
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6952      	ldr	r2, [r2, #20]
 8004f38:	0852      	lsrs	r2, r2, #1
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	0652      	lsls	r2, r2, #25
 8004f3e:	4311      	orrs	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6852      	ldr	r2, [r2, #4]
 8004f44:	3a01      	subs	r2, #1
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4916      	ldr	r1, [pc, #88]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f50:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fd fcd8 	bl	8002910 <HAL_GetTick>
 8004f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f62:	e009      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f64:	f7fd fcd4 	bl	8002910 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d902      	bls.n	8004f78 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	73fb      	strb	r3, [r7, #15]
          break;
 8004f76:	e005      	b.n	8004f84 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ef      	beq.n	8004f64 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	07ff800f 	.word	0x07ff800f
 8004fac:	ff9f800f 	.word	0xff9f800f
 8004fb0:	f9ff800f 	.word	0xf9ff800f

08004fb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fc2:	4b72      	ldr	r3, [pc, #456]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00e      	beq.n	8004fec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fce:	4b6f      	ldr	r3, [pc, #444]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0203 	and.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d103      	bne.n	8004fe6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d142      	bne.n	800506c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e03f      	b.n	800506c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d018      	beq.n	8005026 <RCCEx_PLLSAI2_Config+0x72>
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d825      	bhi.n	8005044 <RCCEx_PLLSAI2_Config+0x90>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d002      	beq.n	8005002 <RCCEx_PLLSAI2_Config+0x4e>
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d009      	beq.n	8005014 <RCCEx_PLLSAI2_Config+0x60>
 8005000:	e020      	b.n	8005044 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005002:	4b62      	ldr	r3, [pc, #392]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11d      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005012:	e01a      	b.n	800504a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005014:	4b5d      	ldr	r3, [pc, #372]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d116      	bne.n	800504e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e013      	b.n	800504e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005026:	4b59      	ldr	r3, [pc, #356]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005032:	4b56      	ldr	r3, [pc, #344]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005042:	e006      	b.n	8005052 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e004      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005052:	bf00      	nop
    }

    if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800505a:	4b4c      	ldr	r3, [pc, #304]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4949      	ldr	r1, [pc, #292]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005068:	4313      	orrs	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 8086 	bne.w	8005180 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005074:	4b45      	ldr	r3, [pc, #276]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a44      	ldr	r2, [pc, #272]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800507a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fd fc46 	bl	8002910 <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005086:	e009      	b.n	800509c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005088:	f7fd fc42 	bl	8002910 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d902      	bls.n	800509c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	73fb      	strb	r3, [r7, #15]
        break;
 800509a:	e005      	b.n	80050a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ef      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d168      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d113      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	4b35      	ldr	r3, [pc, #212]	; (8005190 <RCCEx_PLLSAI2_Config+0x1dc>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	0211      	lsls	r1, r2, #8
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68d2      	ldr	r2, [r2, #12]
 80050c6:	06d2      	lsls	r2, r2, #27
 80050c8:	4311      	orrs	r1, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6852      	ldr	r2, [r2, #4]
 80050ce:	3a01      	subs	r2, #1
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	430a      	orrs	r2, r1
 80050d4:	492d      	ldr	r1, [pc, #180]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	614b      	str	r3, [r1, #20]
 80050da:	e02d      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d115      	bne.n	800510e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <RCCEx_PLLSAI2_Config+0x1e0>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	0211      	lsls	r1, r2, #8
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6912      	ldr	r2, [r2, #16]
 80050f4:	0852      	lsrs	r2, r2, #1
 80050f6:	3a01      	subs	r2, #1
 80050f8:	0552      	lsls	r2, r2, #21
 80050fa:	4311      	orrs	r1, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6852      	ldr	r2, [r2, #4]
 8005100:	3a01      	subs	r2, #1
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	430a      	orrs	r2, r1
 8005106:	4921      	ldr	r1, [pc, #132]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	614b      	str	r3, [r1, #20]
 800510c:	e014      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800510e:	4b1f      	ldr	r3, [pc, #124]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005114:	4013      	ands	r3, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6892      	ldr	r2, [r2, #8]
 800511a:	0211      	lsls	r1, r2, #8
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6952      	ldr	r2, [r2, #20]
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	3a01      	subs	r2, #1
 8005124:	0652      	lsls	r2, r2, #25
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6852      	ldr	r2, [r2, #4]
 800512c:	3a01      	subs	r2, #1
 800512e:	0112      	lsls	r2, r2, #4
 8005130:	430a      	orrs	r2, r1
 8005132:	4916      	ldr	r1, [pc, #88]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005134:	4313      	orrs	r3, r2
 8005136:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fd fbe4 	bl	8002910 <HAL_GetTick>
 8005148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800514a:	e009      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800514c:	f7fd fbe0 	bl	8002910 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d902      	bls.n	8005160 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	73fb      	strb	r3, [r7, #15]
          break;
 800515e:	e005      	b.n	800516c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	4904      	ldr	r1, [pc, #16]	; (800518c <RCCEx_PLLSAI2_Config+0x1d8>)
 800517c:	4313      	orrs	r3, r2
 800517e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	07ff800f 	.word	0x07ff800f
 8005194:	ff9f800f 	.word	0xff9f800f
 8005198:	f9ff800f 	.word	0xf9ff800f

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e095      	b.n	80052da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e005      	b.n	80051d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc fb7e 	bl	80018f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005214:	d902      	bls.n	800521c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e002      	b.n	8005222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800521c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800522a:	d007      	beq.n	800523c <HAL_SPI_Init+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005234:	d002      	beq.n	800523c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	ea42 0103 	orr.w	r1, r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 0204 	and.w	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052b8:	ea42 0103 	orr.w	r1, r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b088      	sub	sp, #32
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_SPI_Transmit+0x22>
 8005300:	2302      	movs	r3, #2
 8005302:	e15f      	b.n	80055c4 <HAL_SPI_Transmit+0x2e2>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800530c:	f7fd fb00 	bl	8002910 <HAL_GetTick>
 8005310:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005326:	e148      	b.n	80055ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0x52>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005338:	e13f      	b.n	80055ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2203      	movs	r2, #3
 800533e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d10f      	bne.n	80053a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053cc:	d94f      	bls.n	800546e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_SPI_Transmit+0xfa>
 80053d6:	8afb      	ldrh	r3, [r7, #22]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d142      	bne.n	8005462 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	881a      	ldrh	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005400:	e02f      	b.n	8005462 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b02      	cmp	r3, #2
 800540e:	d112      	bne.n	8005436 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	881a      	ldrh	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	1c9a      	adds	r2, r3, #2
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005434:	e015      	b.n	8005462 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005436:	f7fd fa6b 	bl	8002910 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d803      	bhi.n	800544e <HAL_SPI_Transmit+0x16c>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d102      	bne.n	8005454 <HAL_SPI_Transmit+0x172>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005460:	e0ab      	b.n	80055ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ca      	bne.n	8005402 <HAL_SPI_Transmit+0x120>
 800546c:	e080      	b.n	8005570 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_SPI_Transmit+0x19a>
 8005476:	8afb      	ldrh	r3, [r7, #22]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d174      	bne.n	8005566 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d912      	bls.n	80054ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b02      	subs	r3, #2
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054aa:	e05c      	b.n	8005566 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80054d2:	e048      	b.n	8005566 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d12b      	bne.n	800553a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d912      	bls.n	8005512 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	881a      	ldrh	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b02      	subs	r3, #2
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005510:	e029      	b.n	8005566 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	7812      	ldrb	r2, [r2, #0]
 800551e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005538:	e015      	b.n	8005566 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800553a:	f7fd f9e9 	bl	8002910 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d803      	bhi.n	8005552 <HAL_SPI_Transmit+0x270>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d102      	bne.n	8005558 <HAL_SPI_Transmit+0x276>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005564:	e029      	b.n	80055ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1b1      	bne.n	80054d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 ff7d 	bl	8006474 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e003      	b.n	80055ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
 80055ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f0:	e11a      	b.n	8005828 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fa:	d112      	bne.n	8005622 <HAL_SPI_Receive+0x56>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10e      	bne.n	8005622 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2204      	movs	r2, #4
 8005608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f90e 	bl	800583a <HAL_SPI_TransmitReceive>
 800561e:	4603      	mov	r3, r0
 8005620:	e107      	b.n	8005832 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_SPI_Receive+0x64>
 800562c:	2302      	movs	r3, #2
 800562e:	e100      	b.n	8005832 <HAL_SPI_Receive+0x266>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005638:	f7fd f96a 	bl	8002910 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_SPI_Receive+0x7e>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800564e:	e0eb      	b.n	8005828 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2204      	movs	r2, #4
 8005654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800569a:	d908      	bls.n	80056ae <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	e007      	b.n	80056be <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056bc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d10f      	bne.n	80056e8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d007      	beq.n	8005706 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005704:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570e:	d86f      	bhi.n	80057f0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005710:	e034      	b.n	800577c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d117      	bne.n	8005750 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f103 020c 	add.w	r2, r3, #12
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800574e:	e015      	b.n	800577c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005750:	f7fd f8de 	bl	8002910 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d803      	bhi.n	8005768 <HAL_SPI_Receive+0x19c>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d102      	bne.n	800576e <HAL_SPI_Receive+0x1a2>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800577a:	e055      	b.n	8005828 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1c4      	bne.n	8005712 <HAL_SPI_Receive+0x146>
 8005788:	e038      	b.n	80057fc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d115      	bne.n	80057c4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	b292      	uxth	r2, r2
 80057a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057c2:	e015      	b.n	80057f0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fd f8a4 	bl	8002910 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d803      	bhi.n	80057dc <HAL_SPI_Receive+0x210>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_Receive+0x216>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057ee:	e01b      	b.n	8005828 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1c6      	bne.n	800578a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fddf 	bl	80063c4 <SPI_EndRxTransaction>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
 800581e:	e003      	b.n	8005828 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x26>
 800585c:	2302      	movs	r3, #2
 800585e:	e20a      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x43c>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005868:	f7fd f852 	bl	8002910 <HAL_GetTick>
 800586c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005874:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800587c:	887b      	ldrh	r3, [r7, #2]
 800587e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005880:	887b      	ldrh	r3, [r7, #2]
 8005882:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005884:	7efb      	ldrb	r3, [r7, #27]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d00e      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x6e>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005890:	d106      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_SPI_TransmitReceive+0x66>
 800589a:	7efb      	ldrb	r3, [r7, #27]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d003      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058a6:	e1e0      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x80>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x80>
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058c0:	e1d3      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2205      	movs	r2, #5
 80058d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	887a      	ldrh	r2, [r7, #2]
 80058e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	887a      	ldrh	r2, [r7, #2]
 80058ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005918:	d802      	bhi.n	8005920 <HAL_SPI_TransmitReceive+0xe6>
 800591a:	8a3b      	ldrh	r3, [r7, #16]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d908      	bls.n	8005932 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	e007      	b.n	8005942 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d007      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005968:	f240 8081 	bls.w	8005a6e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_TransmitReceive+0x140>
 8005974:	8a7b      	ldrh	r3, [r7, #18]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d16d      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599e:	e05a      	b.n	8005a56 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d11b      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x1ac>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x1ac>
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d113      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d11c      	bne.n	8005a2e <HAL_SPI_TransmitReceive+0x1f4>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d016      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a2e:	f7fc ff6f 	bl	8002910 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d80b      	bhi.n	8005a56 <HAL_SPI_TransmitReceive+0x21c>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d007      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005a54:	e109      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d19f      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x166>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d199      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x166>
 8005a6c:	e0e3      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x244>
 8005a76:	8a7b      	ldrh	r3, [r7, #18]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f040 80cf 	bne.w	8005c1c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d912      	bls.n	8005aae <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b02      	subs	r3, #2
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aac:	e0b6      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad4:	e0a2      	b.n	8005c1c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d134      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0x314>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d02f      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x314>
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d12c      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d912      	bls.n	8005b24 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b02      	subs	r3, #2
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b22:	e012      	b.n	8005b4a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d148      	bne.n	8005bee <HAL_SPI_TransmitReceive+0x3b4>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d042      	beq.n	8005bee <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d923      	bls.n	8005bbc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b02      	subs	r3, #2
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d81f      	bhi.n	8005bea <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	e016      	b.n	8005bea <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f103 020c 	add.w	r2, r3, #12
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bea:	2301      	movs	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bee:	f7fc fe8f 	bl	8002910 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d803      	bhi.n	8005c06 <HAL_SPI_TransmitReceive+0x3cc>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d102      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x3d2>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d107      	bne.n	8005c1c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005c1a:	e026      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f af57 	bne.w	8005ad6 <HAL_SPI_TransmitReceive+0x29c>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f47f af50 	bne.w	8005ad6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fc1a 	bl	8006474 <SPI_EndRxTxTransaction>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c60:	e003      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3728      	adds	r7, #40	; 0x28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_Transmit_DMA+0x20>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e0d4      	b.n	8005e4a <HAL_SPI_Transmit_DMA+0x1ca>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb8:	e0c2      	b.n	8005e40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Transmit_DMA+0x46>
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cca:	e0b9      	b.n	8005e40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d16:	d10f      	bne.n	8005d38 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	4a45      	ldr	r2, [pc, #276]	; (8005e54 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	4a44      	ldr	r2, [pc, #272]	; (8005e58 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4c:	4a43      	ldr	r2, [pc, #268]	; (8005e5c <HAL_SPI_Transmit_DMA+0x1dc>)
 8005d4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d54:	2200      	movs	r2, #0
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d66:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d70:	d82d      	bhi.n	8005dce <HAL_SPI_Transmit_DMA+0x14e>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7c:	d127      	bne.n	8005dce <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10f      	bne.n	8005dac <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d9a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005daa:	e010      	b.n	8005dce <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005de6:	f7fd f8cd 	bl	8002f84 <HAL_DMA_Start_IT>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df4:	f043 0210 	orr.w	r2, r3, #16
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005e00:	e01e      	b.n	8005e40 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d007      	beq.n	8005e20 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0220 	orr.w	r2, r2, #32
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0202 	orr.w	r2, r2, #2
 8005e3e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	08006103 	.word	0x08006103
 8005e58:	0800605d 	.word	0x0800605d
 8005e5c:	0800611f 	.word	0x0800611f

08005e60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10e      	bne.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
    return;
 8005e9e:	e0ce      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x5e>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    return;
 8005ebc:	e0bf      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_SPI_IRQHandler+0x7e>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80b0 	beq.w	800603e <HAL_SPI_IRQHandler+0x1de>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80aa 	beq.w	800603e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d011      	beq.n	8005f24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	f043 0204 	orr.w	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	e00b      	b.n	8005f3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
        return;
 8005f3a:	e080      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04f      	beq.n	800603c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005faa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_SPI_IRQHandler+0x168>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d034      	beq.n	8006032 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0203 	bic.w	r2, r2, #3
 8005fd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d011      	beq.n	8006004 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe4:	4a17      	ldr	r2, [pc, #92]	; (8006044 <HAL_SPI_IRQHandler+0x1e4>)
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fd f8a0 	bl	8003132 <HAL_DMA_Abort_IT>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d016      	beq.n	800603a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <HAL_SPI_IRQHandler+0x1e4>)
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	4618      	mov	r0, r3
 800601a:	f7fd f88a 	bl	8003132 <HAL_DMA_Abort_IT>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006030:	e003      	b.n	800603a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fc f96c 	bl	8002310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006038:	e000      	b.n	800603c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800603a:	bf00      	nop
    return;
 800603c:	bf00      	nop
  }
}
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800615f 	.word	0x0800615f

08006048 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800606a:	f7fc fc51 	bl	8002910 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b20      	cmp	r3, #32
 800607c:	d03b      	beq.n	80060f6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0220 	bic.w	r2, r2, #32
 800608c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0202 	bic.w	r2, r2, #2
 800609c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	2164      	movs	r1, #100	; 0x64
 80060a2:	6978      	ldr	r0, [r7, #20]
 80060a4:	f000 f9e6 	bl	8006474 <SPI_EndRxTxTransaction>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b2:	f043 0220 	orr.w	r2, r3, #32
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f7fc f90e 	bl	8002310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80060f4:	e002      	b.n	80060fc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80060f6:	6978      	ldr	r0, [r7, #20]
 80060f8:	f7fc f920 	bl	800233c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff ff99 	bl	8006048 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0203 	bic.w	r2, r2, #3
 800613a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	f043 0210 	orr.w	r2, r3, #16
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7fc f8dd 	bl	8002310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7fc f8c8 	bl	8002310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006198:	f7fc fbba 	bl	8002910 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	4413      	add	r3, r2
 80061a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061a8:	f7fc fbb2 	bl	8002910 <HAL_GetTick>
 80061ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ae:	4b39      	ldr	r3, [pc, #228]	; (8006294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	015b      	lsls	r3, r3, #5
 80061b4:	0d1b      	lsrs	r3, r3, #20
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061be:	e054      	b.n	800626a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d050      	beq.n	800626a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c8:	f7fc fba2 	bl	8002910 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d902      	bls.n	80061de <SPI_WaitFlagStateUntilTimeout+0x56>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d13d      	bne.n	800625a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f6:	d111      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x94>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d004      	beq.n	800620c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d107      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006224:	d10f      	bne.n	8006246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e017      	b.n	800628a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	3b01      	subs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4013      	ands	r3, r2
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	429a      	cmp	r2, r3
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	429a      	cmp	r2, r3
 8006286:	d19b      	bne.n	80061c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000008 	.word	0x20000008

08006298 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062aa:	f7fc fb31 	bl	8002910 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4413      	add	r3, r2
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062ba:	f7fc fb29 	bl	8002910 <HAL_GetTick>
 80062be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062c8:	4b3d      	ldr	r3, [pc, #244]	; (80063c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00da      	lsls	r2, r3, #3
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062e0:	e060      	b.n	80063a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062e8:	d107      	bne.n	80062fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d050      	beq.n	80063a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006302:	f7fc fb05 	bl	8002910 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630e:	429a      	cmp	r2, r3
 8006310:	d902      	bls.n	8006318 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	d13d      	bne.n	8006394 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006330:	d111      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633a:	d004      	beq.n	8006346 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d107      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635e:	d10f      	bne.n	8006380 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e010      	b.n	80063b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4013      	ands	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d196      	bne.n	80062e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3728      	adds	r7, #40	; 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000008 	.word	0x20000008

080063c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d8:	d111      	bne.n	80063fe <SPI_EndRxTransaction+0x3a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d004      	beq.n	80063ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d107      	bne.n	80063fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	2180      	movs	r1, #128	; 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff febd 	bl	8006188 <SPI_WaitFlagStateUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006418:	f043 0220 	orr.w	r2, r3, #32
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e023      	b.n	800646c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642c:	d11d      	bne.n	800646a <SPI_EndRxTransaction+0xa6>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006436:	d004      	beq.n	8006442 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006440:	d113      	bne.n	800646a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2200      	movs	r2, #0
 800644a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff ff22 	bl	8006298 <SPI_WaitFifoStateUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e000      	b.n	800646c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2200      	movs	r2, #0
 8006488:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ff03 	bl	8006298 <SPI_WaitFifoStateUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e027      	b.n	80064f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	2180      	movs	r1, #128	; 0x80
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff fe68 	bl	8006188 <SPI_WaitFlagStateUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c2:	f043 0220 	orr.w	r2, r3, #32
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e014      	b.n	80064f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fedc 	bl	8006298 <SPI_WaitFifoStateUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e000      	b.n	80064f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e049      	b.n	80065a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fb fae0 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f000 fa50 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_TIM_PWM_Start+0x24>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e03c      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d109      	bne.n	80065ee <HAL_TIM_PWM_Start+0x3e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e02f      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d109      	bne.n	8006608 <HAL_TIM_PWM_Start+0x58>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e022      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d109      	bne.n	8006622 <HAL_TIM_PWM_Start+0x72>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e015      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b10      	cmp	r3, #16
 8006626:	d109      	bne.n	800663c <HAL_TIM_PWM_Start+0x8c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e008      	b.n	800664e <HAL_TIM_PWM_Start+0x9e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e09c      	b.n	8006790 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <HAL_TIM_PWM_Start+0xb6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006664:	e023      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d104      	bne.n	8006676 <HAL_TIM_PWM_Start+0xc6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006674:	e01b      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d104      	bne.n	8006686 <HAL_TIM_PWM_Start+0xd6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006684:	e013      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d104      	bne.n	8006696 <HAL_TIM_PWM_Start+0xe6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006694:	e00b      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b10      	cmp	r3, #16
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_PWM_Start+0xf6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	e003      	b.n	80066ae <HAL_TIM_PWM_Start+0xfe>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2201      	movs	r2, #1
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fd04 	bl	80070c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a35      	ldr	r2, [pc, #212]	; (8006798 <HAL_TIM_PWM_Start+0x1e8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_TIM_PWM_Start+0x13e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a34      	ldr	r2, [pc, #208]	; (800679c <HAL_TIM_PWM_Start+0x1ec>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_TIM_PWM_Start+0x13e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a32      	ldr	r2, [pc, #200]	; (80067a0 <HAL_TIM_PWM_Start+0x1f0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_TIM_PWM_Start+0x13e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a31      	ldr	r2, [pc, #196]	; (80067a4 <HAL_TIM_PWM_Start+0x1f4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_TIM_PWM_Start+0x13e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <HAL_TIM_PWM_Start+0x1f8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_Start+0x142>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_TIM_PWM_Start+0x144>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006706:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <HAL_TIM_PWM_Start+0x1e8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01d      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671a:	d018      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a22      	ldr	r2, [pc, #136]	; (80067ac <HAL_TIM_PWM_Start+0x1fc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a21      	ldr	r2, [pc, #132]	; (80067b0 <HAL_TIM_PWM_Start+0x200>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00e      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1f      	ldr	r2, [pc, #124]	; (80067b4 <HAL_TIM_PWM_Start+0x204>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d009      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a17      	ldr	r2, [pc, #92]	; (800679c <HAL_TIM_PWM_Start+0x1ec>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d004      	beq.n	800674e <HAL_TIM_PWM_Start+0x19e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <HAL_TIM_PWM_Start+0x1f0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d115      	bne.n	800677a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <HAL_TIM_PWM_Start+0x208>)
 8006756:	4013      	ands	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b06      	cmp	r3, #6
 800675e:	d015      	beq.n	800678c <HAL_TIM_PWM_Start+0x1dc>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006766:	d011      	beq.n	800678c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	e008      	b.n	800678c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e000      	b.n	800678e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	00010007 	.word	0x00010007

080067bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e0ff      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b14      	cmp	r3, #20
 80067e6:	f200 80f0 	bhi.w	80069ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006845 	.word	0x08006845
 80067f4:	080069cb 	.word	0x080069cb
 80067f8:	080069cb 	.word	0x080069cb
 80067fc:	080069cb 	.word	0x080069cb
 8006800:	08006885 	.word	0x08006885
 8006804:	080069cb 	.word	0x080069cb
 8006808:	080069cb 	.word	0x080069cb
 800680c:	080069cb 	.word	0x080069cb
 8006810:	080068c7 	.word	0x080068c7
 8006814:	080069cb 	.word	0x080069cb
 8006818:	080069cb 	.word	0x080069cb
 800681c:	080069cb 	.word	0x080069cb
 8006820:	08006907 	.word	0x08006907
 8006824:	080069cb 	.word	0x080069cb
 8006828:	080069cb 	.word	0x080069cb
 800682c:	080069cb 	.word	0x080069cb
 8006830:	08006949 	.word	0x08006949
 8006834:	080069cb 	.word	0x080069cb
 8006838:	080069cb 	.word	0x080069cb
 800683c:	080069cb 	.word	0x080069cb
 8006840:	08006989 	.word	0x08006989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f964 	bl	8006b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0208 	orr.w	r2, r2, #8
 800685e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0204 	bic.w	r2, r2, #4
 800686e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6999      	ldr	r1, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	619a      	str	r2, [r3, #24]
      break;
 8006882:	e0a5      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f9d4 	bl	8006c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800689e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6999      	ldr	r1, [r3, #24]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	619a      	str	r2, [r3, #24]
      break;
 80068c4:	e084      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fa3d 	bl	8006d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0208 	orr.w	r2, r2, #8
 80068e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0204 	bic.w	r2, r2, #4
 80068f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69d9      	ldr	r1, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	61da      	str	r2, [r3, #28]
      break;
 8006904:	e064      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 faa5 	bl	8006e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	021a      	lsls	r2, r3, #8
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	61da      	str	r2, [r3, #28]
      break;
 8006946:	e043      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 faee 	bl	8006f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0208 	orr.w	r2, r2, #8
 8006962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0204 	bic.w	r2, r2, #4
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006986:	e023      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fb32 	bl	8006ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069c8:	e002      	b.n	80069d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	75fb      	strb	r3, [r7, #23]
      break;
 80069ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d00f      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3d      	ldr	r2, [pc, #244]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3c      	ldr	r2, [pc, #240]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3b      	ldr	r2, [pc, #236]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d108      	bne.n	8006a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a44:	d01b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_Base_SetConfig+0x118>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d017      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_Base_SetConfig+0x11c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <TIM_Base_SetConfig+0x120>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_Base_SetConfig+0x9a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <TIM_Base_SetConfig+0x114>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00f      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00b      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <TIM_Base_SetConfig+0x128>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d007      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	; (8006b14 <TIM_Base_SetConfig+0x130>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40014400 	.word	0x40014400
 8006b14:	40014800 	.word	0x40014800

08006b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f023 0201 	bic.w	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0302 	bic.w	r3, r3, #2
 8006b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00f      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC1_SetConfig+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a28      	ldr	r2, [pc, #160]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0308 	bic.w	r3, r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <TIM_OC1_SetConfig+0x10c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <TIM_OC1_SetConfig+0x110>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <TIM_OC1_SetConfig+0x114>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <TIM_OC1_SetConfig+0x118>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC1_SetConfig+0xc2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <TIM_OC1_SetConfig+0x11c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d111      	bne.n	8006bfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 0210 	bic.w	r2, r3, #16
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0320 	bic.w	r3, r3, #32
 8006c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC2_SetConfig+0x6c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10d      	bne.n	8006cc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <TIM_OC2_SetConfig+0x100>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00f      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <TIM_OC2_SetConfig+0x104>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <TIM_OC2_SetConfig+0x108>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <TIM_OC2_SetConfig+0x10c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_OC2_SetConfig+0xb0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <TIM_OC2_SetConfig+0x110>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d113      	bne.n	8006d10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_OC3_SetConfig+0x6a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10d      	bne.n	8006dd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC3_SetConfig+0xfc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00f      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC3_SetConfig+0x100>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC3_SetConfig+0x104>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC3_SetConfig+0x108>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0xae>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC3_SetConfig+0x10c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d113      	bne.n	8006e22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC4_SetConfig+0xc0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <TIM_OC4_SetConfig+0xc4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC4_SetConfig+0xc8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC4_SetConfig+0xcc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC4_SetConfig+0x84>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <TIM_OC4_SetConfig+0xd0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <TIM_OC5_SetConfig+0xb4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC5_SetConfig+0xb8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC5_SetConfig+0xbc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC5_SetConfig+0xc0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC5_SetConfig+0x7a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <TIM_OC5_SetConfig+0xc4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d109      	bne.n	8006fbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	051b      	lsls	r3, r3, #20
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <TIM_OC6_SetConfig+0xb8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00f      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <TIM_OC6_SetConfig+0xbc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00b      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <TIM_OC6_SetConfig+0xc0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d007      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <TIM_OC6_SetConfig+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC6_SetConfig+0x7c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_OC6_SetConfig+0xc8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d109      	bne.n	8007088 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800

080070c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2201      	movs	r2, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007124:	2302      	movs	r3, #2
 8007126:	e068      	b.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2e      	ldr	r2, [pc, #184]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d108      	bne.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007162:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007174:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d018      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1b      	ldr	r2, [pc, #108]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1a      	ldr	r2, [pc, #104]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a14      	ldr	r2, [pc, #80]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d10c      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40000400 	.word	0x40000400
 8007214:	40000800 	.word	0x40000800
 8007218:	40000c00 	.word	0x40000c00
 800721c:	40014000 	.word	0x40014000

08007220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e042      	b.n	80072b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fa fceb 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2224      	movs	r2, #36	; 0x24
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0201 	bic.w	r2, r2, #1
 8007260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 ff44 	bl	80080f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc45 	bl	8007b00 <UART_SetConfig>
 8007276:	4603      	mov	r3, r0
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e01b      	b.n	80072b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800728e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800729e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 ffc3 	bl	800823c <UART_CheckIdleState>
 80072b6:	4603      	mov	r3, r0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	; 0x28
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d17c      	bne.n	80073d4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_UART_Transmit+0x26>
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e075      	b.n	80073d6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2221      	movs	r2, #33	; 0x21
 80072f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072fa:	f7fb fb09 	bl	8002910 <HAL_GetTick>
 80072fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	88fa      	ldrh	r2, [r7, #6]
 800730c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d108      	bne.n	800732c <HAL_UART_Transmit+0x6c>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	e003      	b.n	8007334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007334:	e031      	b.n	800739a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 f825 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e03e      	b.n	80073d6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	881a      	ldrh	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800736a:	b292      	uxth	r2, r2
 800736c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	3302      	adds	r3, #2
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e008      	b.n	8007388 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	781a      	ldrb	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b292      	uxth	r2, r2
 8007380:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1c7      	bne.n	8007336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	2140      	movs	r1, #64	; 0x40
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 ffed 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e006      	b.n	80073d6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d137      	bne.n	8007468 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_UART_Receive_IT+0x24>
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e030      	b.n	800746a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <HAL_UART_Receive_IT+0x94>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d01f      	beq.n	8007458 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	613b      	str	r3, [r7, #16]
   return(result);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	623b      	str	r3, [r7, #32]
 8007446:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	69f9      	ldr	r1, [r7, #28]
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	61bb      	str	r3, [r7, #24]
   return(result);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	461a      	mov	r2, r3
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fffe 	bl	8008460 <UART_Start_Receive_IT>
 8007464:	4603      	mov	r3, r0
 8007466:	e000      	b.n	800746a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007468:	2302      	movs	r3, #2
  }
}
 800746a:	4618      	mov	r0, r3
 800746c:	3728      	adds	r7, #40	; 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40008000 	.word	0x40008000

08007478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b0ba      	sub	sp, #232	; 0xe8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800749e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80074a6:	4013      	ands	r3, r2
 80074a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11b      	bne.n	80074ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d015      	beq.n	80074ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 82e3 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
      }
      return;
 80074ea:	e2dd      	b.n	8007aa8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80074ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8123 	beq.w	800773c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074fa:	4b8d      	ldr	r3, [pc, #564]	; (8007730 <HAL_UART_IRQHandler+0x2b8>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007506:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <HAL_UART_IRQHandler+0x2bc>)
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8116 	beq.w	800773c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <HAL_UART_IRQHandler+0xc8>
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d011      	beq.n	8007570 <HAL_UART_IRQHandler+0xf8>
 800754c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2202      	movs	r2, #2
 800755e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	f043 0204 	orr.w	r2, r3, #4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d011      	beq.n	80075a0 <HAL_UART_IRQHandler+0x128>
 800757c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2204      	movs	r2, #4
 800758e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007596:	f043 0202 	orr.w	r2, r3, #2
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075bc:	4b5c      	ldr	r3, [pc, #368]	; (8007730 <HAL_UART_IRQHandler+0x2b8>)
 80075be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2208      	movs	r2, #8
 80075ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f043 0208 	orr.w	r2, r3, #8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <HAL_UART_IRQHandler+0x196>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	f043 0220 	orr.w	r2, r3, #32
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8249 	beq.w	8007aac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800761a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d013      	beq.n	800764e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d005      	beq.n	8007672 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800766e:	2b00      	cmp	r3, #0
 8007670:	d054      	beq.n	800771c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f816 	bl	80086a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d146      	bne.n	8007714 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800769c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3308      	adds	r3, #8
 80076ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1d9      	bne.n	8007686 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d017      	beq.n	800770c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e2:	4a15      	ldr	r2, [pc, #84]	; (8007738 <HAL_UART_IRQHandler+0x2c0>)
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fb fd20 	bl	8003132 <HAL_DMA_Abort_IT>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d019      	beq.n	800772c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007706:	4610      	mov	r0, r2
 8007708:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770a:	e00f      	b.n	800772c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9e1 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007712:	e00b      	b.n	800772c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9dd 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	e007      	b.n	800772c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9d9 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800772a:	e1bf      	b.n	8007aac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	bf00      	nop
    return;
 800772e:	e1bd      	b.n	8007aac <HAL_UART_IRQHandler+0x634>
 8007730:	10000001 	.word	0x10000001
 8007734:	04000120 	.word	0x04000120
 8007738:	08008771 	.word	0x08008771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007740:	2b01      	cmp	r3, #1
 8007742:	f040 8153 	bne.w	80079ec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 814c 	beq.w	80079ec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8145 	beq.w	80079ec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2210      	movs	r2, #16
 8007768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	f040 80bb 	bne.w	80078f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 818f 	beq.w	8007ab0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800779c:	429a      	cmp	r2, r3
 800779e:	f080 8187 	bcs.w	8007ab0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f040 8087 	bne.w	80078ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1da      	bne.n	80077c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800782e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e1      	bne.n	800780a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800786a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e3      	bne.n	8007846 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800789a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789c:	f023 0310 	bic.w	r3, r3, #16
 80078a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80078b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e4      	bne.n	800788c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fb fbd6 	bl	800307a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f8fd 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078ee:	e0df      	b.n	8007ab0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80d1 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80cc 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800793e:	647b      	str	r3, [r7, #68]	; 0x44
 8007940:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e4      	bne.n	800791c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	623b      	str	r3, [r7, #32]
   return(result);
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800797a:	633a      	str	r2, [r7, #48]	; 0x30
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e1      	bne.n	8007952 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	617b      	str	r3, [r7, #20]
   return(result);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e4      	bne.n	80079a2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f87f 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ea:	e063      	b.n	8007ab4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00e      	beq.n	8007a16 <HAL_UART_IRQHandler+0x59e>
 80079f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fc14 	bl	800923c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a14:	e051      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d014      	beq.n	8007a4c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03a      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
    }
    return;
 8007a4a:	e035      	b.n	8007ab8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_UART_IRQHandler+0x5f4>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fe99 	bl	800879c <UART_EndTransmit_IT>
    return;
 8007a6a:	e026      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d009      	beq.n	8007a8c <HAL_UART_IRQHandler+0x614>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fbed 	bl	8009264 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8a:	e016      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <HAL_UART_IRQHandler+0x642>
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da0c      	bge.n	8007aba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fbd5 	bl	8009250 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aa6:	e008      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e006      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
    return;
 8007aac:	bf00      	nop
 8007aae:	e004      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
      return;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
      return;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_UART_IRQHandler+0x642>
    return;
 8007ab8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007aba:	37e8      	adds	r7, #232	; 0xe8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b04:	b08c      	sub	sp, #48	; 0x30
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4baa      	ldr	r3, [pc, #680]	; (8007dd8 <UART_SetConfig+0x2d8>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a9f      	ldr	r2, [pc, #636]	; (8007ddc <UART_SetConfig+0x2dc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	f023 010f 	bic.w	r1, r3, #15
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a90      	ldr	r2, [pc, #576]	; (8007de0 <UART_SetConfig+0x2e0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d125      	bne.n	8007bf0 <UART_SetConfig+0xf0>
 8007ba4:	4b8f      	ldr	r3, [pc, #572]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d81a      	bhi.n	8007be8 <UART_SetConfig+0xe8>
 8007bb2:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <UART_SetConfig+0xb8>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bd9 	.word	0x08007bd9
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e116      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e112      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bde:	e10e      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007be0:	2308      	movs	r3, #8
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be6:	e10a      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007be8:	2310      	movs	r3, #16
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bee:	e106      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a7c      	ldr	r2, [pc, #496]	; (8007de8 <UART_SetConfig+0x2e8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d138      	bne.n	8007c6c <UART_SetConfig+0x16c>
 8007bfa:	4b7a      	ldr	r3, [pc, #488]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f003 030c 	and.w	r3, r3, #12
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d82d      	bhi.n	8007c64 <UART_SetConfig+0x164>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0x110>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007c65 	.word	0x08007c65
 8007c1c:	08007c65 	.word	0x08007c65
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007c65 	.word	0x08007c65
 8007c28:	08007c65 	.word	0x08007c65
 8007c2c:	08007c65 	.word	0x08007c65
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c65 	.word	0x08007c65
 8007c38:	08007c65 	.word	0x08007c65
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4a:	e0d8      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c52:	e0d4      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007c54:	2304      	movs	r3, #4
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e0d0      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e0cc      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007c64:	2310      	movs	r3, #16
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6a:	e0c8      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a5e      	ldr	r2, [pc, #376]	; (8007dec <UART_SetConfig+0x2ec>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d125      	bne.n	8007cc2 <UART_SetConfig+0x1c2>
 8007c76:	4b5b      	ldr	r3, [pc, #364]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	d016      	beq.n	8007cb2 <UART_SetConfig+0x1b2>
 8007c84:	2b30      	cmp	r3, #48	; 0x30
 8007c86:	d818      	bhi.n	8007cba <UART_SetConfig+0x1ba>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d00a      	beq.n	8007ca2 <UART_SetConfig+0x1a2>
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d814      	bhi.n	8007cba <UART_SetConfig+0x1ba>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <UART_SetConfig+0x19a>
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d008      	beq.n	8007caa <UART_SetConfig+0x1aa>
 8007c98:	e00f      	b.n	8007cba <UART_SetConfig+0x1ba>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca0:	e0ad      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca8:	e0a9      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007caa:	2304      	movs	r3, #4
 8007cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb0:	e0a5      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb8:	e0a1      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007cba:	2310      	movs	r3, #16
 8007cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc0:	e09d      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a4a      	ldr	r2, [pc, #296]	; (8007df0 <UART_SetConfig+0x2f0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d125      	bne.n	8007d18 <UART_SetConfig+0x218>
 8007ccc:	4b45      	ldr	r3, [pc, #276]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd8:	d016      	beq.n	8007d08 <UART_SetConfig+0x208>
 8007cda:	2bc0      	cmp	r3, #192	; 0xc0
 8007cdc:	d818      	bhi.n	8007d10 <UART_SetConfig+0x210>
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d00a      	beq.n	8007cf8 <UART_SetConfig+0x1f8>
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d814      	bhi.n	8007d10 <UART_SetConfig+0x210>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <UART_SetConfig+0x1f0>
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d008      	beq.n	8007d00 <UART_SetConfig+0x200>
 8007cee:	e00f      	b.n	8007d10 <UART_SetConfig+0x210>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e082      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e07e      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d06:	e07a      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0e:	e076      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d16:	e072      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a35      	ldr	r2, [pc, #212]	; (8007df4 <UART_SetConfig+0x2f4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d12a      	bne.n	8007d78 <UART_SetConfig+0x278>
 8007d22:	4b30      	ldr	r3, [pc, #192]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d30:	d01a      	beq.n	8007d68 <UART_SetConfig+0x268>
 8007d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d36:	d81b      	bhi.n	8007d70 <UART_SetConfig+0x270>
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3c:	d00c      	beq.n	8007d58 <UART_SetConfig+0x258>
 8007d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d42:	d815      	bhi.n	8007d70 <UART_SetConfig+0x270>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0x250>
 8007d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4c:	d008      	beq.n	8007d60 <UART_SetConfig+0x260>
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x270>
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e052      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e04e      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e04a      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e046      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e042      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <UART_SetConfig+0x2dc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d13a      	bne.n	8007df8 <UART_SetConfig+0x2f8>
 8007d82:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <UART_SetConfig+0x2e4>)
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d90:	d01a      	beq.n	8007dc8 <UART_SetConfig+0x2c8>
 8007d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d96:	d81b      	bhi.n	8007dd0 <UART_SetConfig+0x2d0>
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d00c      	beq.n	8007db8 <UART_SetConfig+0x2b8>
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d815      	bhi.n	8007dd0 <UART_SetConfig+0x2d0>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <UART_SetConfig+0x2b0>
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d008      	beq.n	8007dc0 <UART_SetConfig+0x2c0>
 8007dae:	e00f      	b.n	8007dd0 <UART_SetConfig+0x2d0>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db6:	e022      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007db8:	2302      	movs	r3, #2
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dbe:	e01e      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc6:	e01a      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dce:	e016      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e012      	b.n	8007dfe <UART_SetConfig+0x2fe>
 8007dd8:	cfff69f3 	.word	0xcfff69f3
 8007ddc:	40008000 	.word	0x40008000
 8007de0:	40013800 	.word	0x40013800
 8007de4:	40021000 	.word	0x40021000
 8007de8:	40004400 	.word	0x40004400
 8007dec:	40004800 	.word	0x40004800
 8007df0:	40004c00 	.word	0x40004c00
 8007df4:	40005000 	.word	0x40005000
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4aae      	ldr	r2, [pc, #696]	; (80080bc <UART_SetConfig+0x5bc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	f040 8097 	bne.w	8007f38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d823      	bhi.n	8007e5a <UART_SetConfig+0x35a>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x318>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e5b 	.word	0x08007e5b
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e5b 	.word	0x08007e5b
 8007e28:	08007e4b 	.word	0x08007e4b
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e5b 	.word	0x08007e5b
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007e53 	.word	0x08007e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e3c:	f7fc fbaa 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8007e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e42:	e010      	b.n	8007e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e44:	4b9e      	ldr	r3, [pc, #632]	; (80080c0 <UART_SetConfig+0x5c0>)
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e48:	e00d      	b.n	8007e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7fc fb0b 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e50:	e009      	b.n	8007e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e58:	e005      	b.n	8007e66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 8130 	beq.w	80080ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	4a94      	ldr	r2, [pc, #592]	; (80080c4 <UART_SetConfig+0x5c4>)
 8007e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4413      	add	r3, r2
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d305      	bcc.n	8007e9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d903      	bls.n	8007ea6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ea4:	e113      	b.n	80080ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	60fa      	str	r2, [r7, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	4a84      	ldr	r2, [pc, #528]	; (80080c4 <UART_SetConfig+0x5c4>)
 8007eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2200      	movs	r2, #0
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ec8:	f7f8 f9fa 	bl	80002c0 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	020b      	lsls	r3, r1, #8
 8007ede:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee2:	0202      	lsls	r2, r0, #8
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	6849      	ldr	r1, [r1, #4]
 8007ee8:	0849      	lsrs	r1, r1, #1
 8007eea:	2000      	movs	r0, #0
 8007eec:	460c      	mov	r4, r1
 8007eee:	4605      	mov	r5, r0
 8007ef0:	eb12 0804 	adds.w	r8, r2, r4
 8007ef4:	eb43 0905 	adc.w	r9, r3, r5
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	469a      	mov	sl, r3
 8007f00:	4693      	mov	fp, r2
 8007f02:	4652      	mov	r2, sl
 8007f04:	465b      	mov	r3, fp
 8007f06:	4640      	mov	r0, r8
 8007f08:	4649      	mov	r1, r9
 8007f0a:	f7f8 f9d9 	bl	80002c0 <__aeabi_uldivmod>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4613      	mov	r3, r2
 8007f14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1c:	d308      	bcc.n	8007f30 <UART_SetConfig+0x430>
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f24:	d204      	bcs.n	8007f30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e0ce      	b.n	80080ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f36:	e0ca      	b.n	80080ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	d166      	bne.n	8008010 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d827      	bhi.n	8007f9a <UART_SetConfig+0x49a>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x450>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f9b 	.word	0x08007f9b
 8007f60:	08007f8b 	.word	0x08007f8b
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007f93 	.word	0x08007f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fc fb0e 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8007f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f7a:	e014      	b.n	8007fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fc fb20 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8007f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f82:	e010      	b.n	8007fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b4e      	ldr	r3, [pc, #312]	; (80080c0 <UART_SetConfig+0x5c0>)
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f88:	e00d      	b.n	8007fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fc fa6b 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f90:	e009      	b.n	8007fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f98:	e005      	b.n	8007fa6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8090 	beq.w	80080ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	4a44      	ldr	r2, [pc, #272]	; (80080c4 <UART_SetConfig+0x5c4>)
 8007fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc0:	005a      	lsls	r2, r3, #1
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	441a      	add	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	2b0f      	cmp	r3, #15
 8007fd8:	d916      	bls.n	8008008 <UART_SetConfig+0x508>
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe0:	d212      	bcs.n	8008008 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f023 030f 	bic.w	r3, r3, #15
 8007fea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	8bfb      	ldrh	r3, [r7, #30]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	8bfa      	ldrh	r2, [r7, #30]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	e062      	b.n	80080ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800800e:	e05e      	b.n	80080ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008014:	2b08      	cmp	r3, #8
 8008016:	d828      	bhi.n	800806a <UART_SetConfig+0x56a>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x520>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	0800806b 	.word	0x0800806b
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800806b 	.word	0x0800806b
 800803c:	0800806b 	.word	0x0800806b
 8008040:	08008063 	.word	0x08008063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fc faa6 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8008048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800804a:	e014      	b.n	8008076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800804c:	f7fc fab8 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008052:	e010      	b.n	8008076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008054:	4b1a      	ldr	r3, [pc, #104]	; (80080c0 <UART_SetConfig+0x5c0>)
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008058:	e00d      	b.n	8008076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805a:	f7fc fa03 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 800805e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008068:	e005      	b.n	8008076 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008074:	bf00      	nop
    }

    if (pclk != 0U)
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d028      	beq.n	80080ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	4a10      	ldr	r2, [pc, #64]	; (80080c4 <UART_SetConfig+0x5c4>)
 8008082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008086:	461a      	mov	r2, r3
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	fbb3 f2f2 	udiv	r2, r3, r2
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	441a      	add	r2, r3
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2b0f      	cmp	r3, #15
 80080a4:	d910      	bls.n	80080c8 <UART_SetConfig+0x5c8>
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ac:	d20c      	bcs.n	80080c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60da      	str	r2, [r3, #12]
 80080b8:	e009      	b.n	80080ce <UART_SetConfig+0x5ce>
 80080ba:	bf00      	nop
 80080bc:	40008000 	.word	0x40008000
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	0800cb54 	.word	0x0800cb54
      }
      else
      {
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2200      	movs	r2, #0
 80080e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3730      	adds	r7, #48	; 0x30
 80080f2:	46bd      	mov	sp, r7
 80080f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f6:	d10a      	bne.n	800820e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b098      	sub	sp, #96	; 0x60
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800824c:	f7fa fb60 	bl	8002910 <HAL_GetTick>
 8008250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d12f      	bne.n	80082c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f88e 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d022      	beq.n	80082c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800828e:	653b      	str	r3, [r7, #80]	; 0x50
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008298:	647b      	str	r3, [r7, #68]	; 0x44
 800829a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800829e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e6      	bne.n	800827a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e063      	b.n	8008388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d149      	bne.n	8008362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082d6:	2200      	movs	r2, #0
 80082d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f857 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d03c      	beq.n	8008362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	623b      	str	r3, [r7, #32]
   return(result);
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008306:	633b      	str	r3, [r7, #48]	; 0x30
 8008308:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800830c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e6      	bne.n	80082e8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	60fb      	str	r3, [r7, #12]
   return(result);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 0301 	bic.w	r3, r3, #1
 8008330:	64bb      	str	r3, [r7, #72]	; 0x48
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800833a:	61fa      	str	r2, [r7, #28]
 800833c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	69b9      	ldr	r1, [r7, #24]
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	617b      	str	r3, [r7, #20]
   return(result);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e5      	bne.n	800831a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2220      	movs	r2, #32
 8008352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e012      	b.n	8008388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3758      	adds	r7, #88	; 0x58
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a0:	e049      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d045      	beq.n	8008436 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083aa:	f7fa fab1 	bl	8002910 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d302      	bcc.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e048      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d031      	beq.n	8008436 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d110      	bne.n	8008402 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2208      	movs	r2, #8
 80083e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f95b 	bl	80086a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2208      	movs	r2, #8
 80083f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e029      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800840c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008410:	d111      	bne.n	8008436 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800841a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f941 	bl	80086a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e00f      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69da      	ldr	r2, [r3, #28]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4013      	ands	r3, r2
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	429a      	cmp	r2, r3
 8008452:	d0a6      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008460:	b480      	push	{r7}
 8008462:	b0a3      	sub	sp, #140	; 0x8c
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	88fa      	ldrh	r2, [r7, #6]
 8008480:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008492:	d10e      	bne.n	80084b2 <UART_Start_Receive_IT+0x52>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d105      	bne.n	80084a8 <UART_Start_Receive_IT+0x48>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084a6:	e02d      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	22ff      	movs	r2, #255	; 0xff
 80084ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084b0:	e028      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10d      	bne.n	80084d6 <UART_Start_Receive_IT+0x76>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <UART_Start_Receive_IT+0x6c>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	22ff      	movs	r2, #255	; 0xff
 80084c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084ca:	e01b      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	227f      	movs	r2, #127	; 0x7f
 80084d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084d4:	e016      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084de:	d10d      	bne.n	80084fc <UART_Start_Receive_IT+0x9c>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <UART_Start_Receive_IT+0x92>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	227f      	movs	r2, #127	; 0x7f
 80084ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084f0:	e008      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	223f      	movs	r2, #63	; 0x3f
 80084f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80084fa:	e003      	b.n	8008504 <UART_Start_Receive_IT+0xa4>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2222      	movs	r2, #34	; 0x22
 8008510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3308      	adds	r3, #8
 800851a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008538:	673a      	str	r2, [r7, #112]	; 0x70
 800853a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800853e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e3      	bne.n	8008514 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008554:	d14f      	bne.n	80085f6 <UART_Start_Receive_IT+0x196>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	429a      	cmp	r2, r3
 8008560:	d349      	bcc.n	80085f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	d107      	bne.n	800857c <UART_Start_Receive_IT+0x11c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4a47      	ldr	r2, [pc, #284]	; (8008694 <UART_Start_Receive_IT+0x234>)
 8008578:	675a      	str	r2, [r3, #116]	; 0x74
 800857a:	e002      	b.n	8008582 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a46      	ldr	r2, [pc, #280]	; (8008698 <UART_Start_Receive_IT+0x238>)
 8008580:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01a      	beq.n	80085c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e4      	bne.n	800858a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3308      	adds	r3, #8
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80085e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e5      	bne.n	80085c0 <UART_Start_Receive_IT+0x160>
 80085f4:	e046      	b.n	8008684 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fe:	d107      	bne.n	8008610 <UART_Start_Receive_IT+0x1b0>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a24      	ldr	r2, [pc, #144]	; (800869c <UART_Start_Receive_IT+0x23c>)
 800860c:	675a      	str	r2, [r3, #116]	; 0x74
 800860e:	e002      	b.n	8008616 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a23      	ldr	r2, [pc, #140]	; (80086a0 <UART_Start_Receive_IT+0x240>)
 8008614:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d019      	beq.n	8008652 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008632:	677b      	str	r3, [r7, #116]	; 0x74
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
 800863e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e6      	bne.n	800861e <UART_Start_Receive_IT+0x1be>
 8008650:	e018      	b.n	8008684 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	613b      	str	r3, [r7, #16]
   return(result);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f043 0320 	orr.w	r3, r3, #32
 8008666:	67bb      	str	r3, [r7, #120]	; 0x78
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	6a3a      	ldr	r2, [r7, #32]
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	61bb      	str	r3, [r7, #24]
   return(result);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	378c      	adds	r7, #140	; 0x8c
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	08008ed1 	.word	0x08008ed1
 8008698:	08008b6d 	.word	0x08008b6d
 800869c:	080089b1 	.word	0x080089b1
 80086a0:	080087f5 	.word	0x080087f5

080086a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b095      	sub	sp, #84	; 0x54
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ca:	643b      	str	r3, [r7, #64]	; 0x40
 80086cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e6      	bne.n	80086ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e3      	bne.n	80086de <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d118      	bne.n	8008750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60bb      	str	r3, [r7, #8]
   return(result);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	647b      	str	r3, [r7, #68]	; 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008764:	bf00      	nop
 8008766:	3754      	adds	r7, #84	; 0x54
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff f9a0 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6979      	ldr	r1, [r7, #20]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	613b      	str	r3, [r7, #16]
   return(result);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e6      	bne.n	80087a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff f96b 	bl	8007ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ea:	bf00      	nop
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b09c      	sub	sp, #112	; 0x70
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008802:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880c:	2b22      	cmp	r3, #34	; 0x22
 800880e:	f040 80be 	bne.w	800898e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008818:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800881c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008820:	b2d9      	uxtb	r1, r3
 8008822:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008826:	b2da      	uxtb	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882c:	400a      	ands	r2, r1
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 80a3 	bne.w	80089a2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008870:	66bb      	str	r3, [r7, #104]	; 0x68
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800887a:	65bb      	str	r3, [r7, #88]	; 0x58
 800887c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e6      	bne.n	800885c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	667b      	str	r3, [r7, #100]	; 0x64
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088ae:	647a      	str	r2, [r7, #68]	; 0x44
 80088b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e5      	bne.n	800888e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a34      	ldr	r2, [pc, #208]	; (80089ac <UART_RxISR_8BIT+0x1b8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d01f      	beq.n	8008920 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d018      	beq.n	8008920 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	623b      	str	r3, [r7, #32]
   return(result);
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008902:	663b      	str	r3, [r7, #96]	; 0x60
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800890c:	633b      	str	r3, [r7, #48]	; 0x30
 800890e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e6      	bne.n	80088ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008924:	2b01      	cmp	r3, #1
 8008926:	d12e      	bne.n	8008986 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	60fb      	str	r3, [r7, #12]
   return(result);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0310 	bic.w	r3, r3, #16
 8008942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	617b      	str	r3, [r7, #20]
   return(result);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f003 0310 	and.w	r3, r3, #16
 800896a:	2b10      	cmp	r3, #16
 800896c:	d103      	bne.n	8008976 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2210      	movs	r2, #16
 8008974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff f8b2 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008984:	e00d      	b.n	80089a2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7f8 f998 	bl	8000cbc <HAL_UART_RxCpltCallback>
}
 800898c:	e009      	b.n	80089a2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	8b1b      	ldrh	r3, [r3, #24]
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	b292      	uxth	r2, r2
 80089a0:	831a      	strh	r2, [r3, #24]
}
 80089a2:	bf00      	nop
 80089a4:	3770      	adds	r7, #112	; 0x70
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40008000 	.word	0x40008000

080089b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b09c      	sub	sp, #112	; 0x70
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c8:	2b22      	cmp	r3, #34	; 0x22
 80089ca:	f040 80be 	bne.w	8008b4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80089e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80089e6:	4013      	ands	r3, r2
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f2:	1c9a      	adds	r2, r3, #2
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 80a3 	bne.w	8008b5e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a36:	657b      	str	r3, [r7, #84]	; 0x54
 8008a38:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e6      	bne.n	8008a18 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	663b      	str	r3, [r7, #96]	; 0x60
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a6a:	643a      	str	r2, [r7, #64]	; 0x40
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e5      	bne.n	8008a4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a34      	ldr	r2, [pc, #208]	; (8008b68 <UART_RxISR_16BIT+0x1b8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d01f      	beq.n	8008adc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d018      	beq.n	8008adc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d12e      	bne.n	8008b42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f023 0310 	bic.w	r3, r3, #16
 8008afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b08:	61bb      	str	r3, [r7, #24]
 8008b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6979      	ldr	r1, [r7, #20]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	613b      	str	r3, [r7, #16]
   return(result);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d103      	bne.n	8008b32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2210      	movs	r2, #16
 8008b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fe ffd4 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b40:	e00d      	b.n	8008b5e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7f8 f8ba 	bl	8000cbc <HAL_UART_RxCpltCallback>
}
 8008b48:	e009      	b.n	8008b5e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	8b1b      	ldrh	r3, [r3, #24]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0208 	orr.w	r2, r2, #8
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	831a      	strh	r2, [r3, #24]
}
 8008b5e:	bf00      	nop
 8008b60:	3770      	adds	r7, #112	; 0x70
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	40008000 	.word	0x40008000

08008b6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b0ac      	sub	sp, #176	; 0xb0
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba2:	2b22      	cmp	r3, #34	; 0x22
 8008ba4:	f040 8182 	bne.w	8008eac <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bb2:	e125      	b.n	8008e00 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008bc2:	b2d9      	uxtb	r1, r3
 8008bc4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bce:	400a      	ands	r2, r1
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d053      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d011      	beq.n	8008c36 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00b      	beq.n	8008c36 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2201      	movs	r2, #1
 8008c24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2c:	f043 0201 	orr.w	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d011      	beq.n	8008c66 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2202      	movs	r2, #2
 8008c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5c:	f043 0204 	orr.w	r2, r3, #4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d011      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8c:	f043 0202 	orr.w	r2, r3, #2
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fe ff17 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f040 80a2 	bne.w	8008e00 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ce0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008ce4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e4      	bne.n	8008cbc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d08:	f023 0301 	bic.w	r3, r3, #1
 8008d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d1a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d1c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e1      	bne.n	8008cf2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a60      	ldr	r2, [pc, #384]	; (8008ec8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d021      	beq.n	8008d90 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01a      	beq.n	8008d90 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8008d7e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d130      	bne.n	8008dfa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	f023 0310 	bic.w	r3, r3, #16
 8008db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e4      	bne.n	8008d9e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f003 0310 	and.w	r3, r3, #16
 8008dde:	2b10      	cmp	r3, #16
 8008de0:	d103      	bne.n	8008dea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2210      	movs	r2, #16
 8008de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fe fe78 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
 8008df8:	e002      	b.n	8008e00 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7f7 ff5e 	bl	8000cbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f47f aecf 	bne.w	8008bb4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d04b      	beq.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e2e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d244      	bcs.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3308      	adds	r3, #8
 8008e56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e3      	bne.n	8008e36 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a16      	ldr	r2, [pc, #88]	; (8008ecc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008e72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e96:	61bb      	str	r3, [r7, #24]
 8008e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e4      	bne.n	8008e74 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eaa:	e009      	b.n	8008ec0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	8b1b      	ldrh	r3, [r3, #24]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0208 	orr.w	r2, r2, #8
 8008ebc:	b292      	uxth	r2, r2
 8008ebe:	831a      	strh	r2, [r3, #24]
}
 8008ec0:	bf00      	nop
 8008ec2:	37b0      	adds	r7, #176	; 0xb0
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40008000 	.word	0x40008000
 8008ecc:	080087f5 	.word	0x080087f5

08008ed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b0ae      	sub	sp, #184	; 0xb8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ede:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f06:	2b22      	cmp	r3, #34	; 0x22
 8008f08:	f040 8186 	bne.w	8009218 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f12:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f16:	e129      	b.n	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008f2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008f32:	4013      	ands	r3, r2
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d053      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d011      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d011      	beq.n	8008fce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc4:	f043 0204 	orr.w	r2, r3, #4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2204      	movs	r2, #4
 8008fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff4:	f043 0202 	orr.w	r2, r3, #2
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fe fd63 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 80a4 	bne.w	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800904a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800904e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e2      	bne.n	8009024 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800906e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800908c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e1      	bne.n	800905e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a60      	ldr	r2, [pc, #384]	; (8009234 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d021      	beq.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01a      	beq.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80090ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e4      	bne.n	80090c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d130      	bne.n	8009166 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911a:	f023 0310 	bic.w	r3, r3, #16
 800911e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800912c:	647b      	str	r3, [r7, #68]	; 0x44
 800912e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f003 0310 	and.w	r3, r3, #16
 800914a:	2b10      	cmp	r3, #16
 800914c:	d103      	bne.n	8009156 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7fe fcc2 	bl	8007ae8 <HAL_UARTEx_RxEventCallback>
 8009164:	e002      	b.n	800916c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7f7 fda8 	bl	8000cbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800916c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	f47f aecb 	bne.w	8008f18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009188:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800918c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009190:	2b00      	cmp	r3, #0
 8009192:	d04b      	beq.n	800922c <UART_RxISR_16BIT_FIFOEN+0x35c>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800919a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800919e:	429a      	cmp	r2, r3
 80091a0:	d244      	bcs.n	800922c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	623b      	str	r3, [r7, #32]
   return(result);
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80091c6:	633a      	str	r2, [r7, #48]	; 0x30
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e3      	bne.n	80091a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a16      	ldr	r2, [pc, #88]	; (8009238 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80091de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f043 0320 	orr.w	r3, r3, #32
 80091f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	617b      	str	r3, [r7, #20]
   return(result);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e4      	bne.n	80091e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009216:	e009      	b.n	800922c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	8b1b      	ldrh	r3, [r3, #24]
 800921e:	b29a      	uxth	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0208 	orr.w	r2, r2, #8
 8009228:	b292      	uxth	r2, r2
 800922a:	831a      	strh	r2, [r3, #24]
}
 800922c:	bf00      	nop
 800922e:	37b8      	adds	r7, #184	; 0xb8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40008000 	.word	0x40008000
 8009238:	080089b1 	.word	0x080089b1

0800923c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_UARTEx_EnableFifoMode+0x16>
 800928a:	2302      	movs	r3, #2
 800928c:	e02b      	b.n	80092e6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2224      	movs	r2, #36	; 0x24
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0201 	bic.w	r2, r2, #1
 80092b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80092c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8c2 	bl	8009458 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b085      	sub	sp, #20
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_UARTEx_DisableFifoMode+0x16>
 8009300:	2302      	movs	r3, #2
 8009302:	e027      	b.n	8009354 <HAL_UARTEx_DisableFifoMode+0x66>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2224      	movs	r2, #36	; 0x24
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0201 	bic.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009374:	2302      	movs	r3, #2
 8009376:	e02d      	b.n	80093d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2224      	movs	r2, #36	; 0x24
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f84f 	bl	8009458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e02d      	b.n	8009450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2224      	movs	r2, #36	; 0x24
 8009400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f811 	bl	8009458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009464:	2b00      	cmp	r3, #0
 8009466:	d108      	bne.n	800947a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009478:	e031      	b.n	80094de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800947a:	2308      	movs	r3, #8
 800947c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800947e:	2308      	movs	r3, #8
 8009480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	0e5b      	lsrs	r3, r3, #25
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	0f5b      	lsrs	r3, r3, #29
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f003 0307 	and.w	r3, r3, #7
 80094a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	7b3a      	ldrb	r2, [r7, #12]
 80094a6:	4911      	ldr	r1, [pc, #68]	; (80094ec <UARTEx_SetNbDataToProcess+0x94>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ae:	7b3a      	ldrb	r2, [r7, #12]
 80094b0:	490f      	ldr	r1, [pc, #60]	; (80094f0 <UARTEx_SetNbDataToProcess+0x98>)
 80094b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	7b7a      	ldrb	r2, [r7, #13]
 80094c4:	4909      	ldr	r1, [pc, #36]	; (80094ec <UARTEx_SetNbDataToProcess+0x94>)
 80094c6:	5c8a      	ldrb	r2, [r1, r2]
 80094c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094cc:	7b7a      	ldrb	r2, [r7, #13]
 80094ce:	4908      	ldr	r1, [pc, #32]	; (80094f0 <UARTEx_SetNbDataToProcess+0x98>)
 80094d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	0800cb6c 	.word	0x0800cb6c
 80094f0:	0800cb74 	.word	0x0800cb74

080094f4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
    {
 80094fc:	4a04      	ldr	r2, [pc, #16]	; (8009510 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	601a      	str	r2, [r3, #0]
    }
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	0800cbe4 	.word	0x0800cbe4

08009514 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    }
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ffe9 	bl	80094f4 <_ZN8touchgfx4FontD1Ev>
 8009522:	2114      	movs	r1, #20
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fa5f 	bl	800a9e8 <_ZdlPvj>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009534:	b590      	push	{r4, r7, lr}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8009540:	887b      	ldrh	r3, [r7, #2]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8009546:	2300      	movs	r3, #0
 8009548:	e010      	b.n	800956c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	681c      	ldr	r4, [r3, #0]
 800955a:	f107 030f 	add.w	r3, r7, #15
 800955e:	f107 0210 	add.w	r2, r7, #16
 8009562:	8879      	ldrh	r1, [r7, #2]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	47a0      	blx	r4
 8009568:	6178      	str	r0, [r7, #20]
        return glyph;
 800956a:	697b      	ldr	r3, [r7, #20]
    }
 800956c:	4618      	mov	r0, r3
 800956e:	371c      	adds	r7, #28
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}

08009574 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	89db      	ldrh	r3, [r3, #14]
    }
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8a1b      	ldrh	r3, [r3, #16]
    }
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	88db      	ldrh	r3, [r3, #6]
    }
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	889b      	ldrh	r3, [r3, #4]
    }
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7a9b      	ldrb	r3, [r3, #10]
 80095e0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80095e4:	b2db      	uxtb	r3, r3
    }
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7a9b      	ldrb	r3, [r3, #10]
 80095fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009602:	b2db      	uxtb	r3, r3
    }
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	4a05      	ldr	r2, [pc, #20]	; (8009630 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff ff67 	bl	80094f4 <_ZN8touchgfx4FontD1Ev>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	0800cc40 	.word	0x0800cc40

08009634 <_ZN8touchgfx9ConstFontD0Ev>:
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ffe7 	bl	8009610 <_ZN8touchgfx9ConstFontD1Ev>
 8009642:	211c      	movs	r1, #28
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f9cf 	bl	800a9e8 <_ZdlPvj>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4a05      	ldr	r2, [pc, #20]	; (8009674 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff ffd3 	bl	8009610 <_ZN8touchgfx9ConstFontD1Ev>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	0800cb84 	.word	0x0800cb84

08009678 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ffe7 	bl	8009654 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009686:	212c      	movs	r1, #44	; 0x2c
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f9ad 	bl	800a9e8 <_ZdlPvj>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af0a      	add	r7, sp, #40	; 0x28
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	460b      	mov	r3, r1
 80096d8:	80fb      	strh	r3, [r7, #6]
 80096da:	4613      	mov	r3, r2
 80096dc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	88b9      	ldrh	r1, [r7, #4]
 80096e2:	88fa      	ldrh	r2, [r7, #6]
 80096e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096e8:	9308      	str	r3, [sp, #32]
 80096ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80096f2:	9306      	str	r3, [sp, #24]
 80096f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009704:	9303      	str	r3, [sp, #12]
 8009706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	7f3b      	ldrb	r3, [r7, #28]
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	8b3b      	ldrh	r3, [r7, #24]
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	460b      	mov	r3, r1
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	f000 fbf2 	bl	8009f00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800971c:	4a09      	ldr	r2, [pc, #36]	; (8009744 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009726:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800972c:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009738:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	0800cb84 	.word	0x0800cb84

08009748 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	889b      	ldrh	r3, [r3, #4]
 800975c:	0adb      	lsrs	r3, r3, #11
 800975e:	b29b      	uxth	r3, r3
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4413      	add	r3, r2
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800977a:	b480      	push	{r7}
 800977c:	b089      	sub	sp, #36	; 0x24
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	460b      	mov	r3, r1
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7b1b      	ldrb	r3, [r3, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009796:	2300      	movs	r3, #0
 8009798:	e031      	b.n	80097fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	7b5b      	ldrb	r3, [r3, #13]
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	b21b      	sxth	r3, r3
 80097aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ae:	b219      	sxth	r1, r3
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	7adb      	ldrb	r3, [r3, #11]
 80097b4:	b21b      	sxth	r3, r3
 80097b6:	430b      	orrs	r3, r1
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7b1b      	ldrb	r3, [r3, #12]
 80097c6:	837b      	strh	r3, [r7, #26]
 80097c8:	e013      	b.n	80097f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	897a      	ldrh	r2, [r7, #10]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d103      	bne.n	80097dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80097da:	e010      	b.n	80097fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	897a      	ldrh	r2, [r7, #10]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d309      	bcc.n	80097fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80097e6:	8b7b      	ldrh	r3, [r7, #26]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	837b      	strh	r3, [r7, #26]
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	3304      	adds	r3, #4
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	8b7b      	ldrh	r3, [r7, #26]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e8      	bne.n	80097ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80097f8:	e000      	b.n	80097fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80097fa:	bf00      	nop
        }
    }
    return 0;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3724      	adds	r7, #36	; 0x24
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__tcf_0+0xc>)
 8009812:	f7ff ff1f 	bl	8009654 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20000454 	.word	0x20000454

0800981c <_Z23getFont_verdana_10_4bppv>:
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009822:	4b21      	ldr	r3, [pc, #132]	; (80098a8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f3bf 8f5b 	dmb	ish
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	bf0c      	ite	eq
 8009832:	2301      	moveq	r3, #1
 8009834:	2300      	movne	r3, #0
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d030      	beq.n	800989e <_Z23getFont_verdana_10_4bppv+0x82>
 800983c:	481a      	ldr	r0, [pc, #104]	; (80098a8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800983e:	f001 f8d5 	bl	800a9ec <__cxa_guard_acquire>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf14      	ite	ne
 8009848:	2301      	movne	r3, #1
 800984a:	2300      	moveq	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d025      	beq.n	800989e <_Z23getFont_verdana_10_4bppv+0x82>
 8009852:	2300      	movs	r3, #0
 8009854:	930c      	str	r3, [sp, #48]	; 0x30
 8009856:	2300      	movs	r3, #0
 8009858:	930b      	str	r3, [sp, #44]	; 0x2c
 800985a:	2300      	movs	r3, #0
 800985c:	930a      	str	r3, [sp, #40]	; 0x28
 800985e:	233f      	movs	r3, #63	; 0x3f
 8009860:	9309      	str	r3, [sp, #36]	; 0x24
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <_Z23getFont_verdana_10_4bppv+0x90>)
 8009864:	9308      	str	r3, [sp, #32]
 8009866:	4b12      	ldr	r3, [pc, #72]	; (80098b0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	2300      	movs	r3, #0
 800986c:	9306      	str	r3, [sp, #24]
 800986e:	2300      	movs	r3, #0
 8009870:	9305      	str	r3, [sp, #20]
 8009872:	2301      	movs	r3, #1
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	2304      	movs	r3, #4
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	2300      	movs	r3, #0
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	2300      	movs	r3, #0
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	230a      	movs	r3, #10
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	230a      	movs	r3, #10
 8009888:	2201      	movs	r2, #1
 800988a:	490a      	ldr	r1, [pc, #40]	; (80098b4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800988c:	480a      	ldr	r0, [pc, #40]	; (80098b8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800988e:	f7ff ff1b 	bl	80096c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009892:	480a      	ldr	r0, [pc, #40]	; (80098bc <_Z23getFont_verdana_10_4bppv+0xa0>)
 8009894:	f001 f8f4 	bl	800aa80 <atexit>
 8009898:	4803      	ldr	r0, [pc, #12]	; (80098a8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800989a:	f001 f8b3 	bl	800aa04 <__cxa_guard_release>
    return verdana_10_4bpp;
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000480 	.word	0x20000480
 80098ac:	0800ee70 	.word	0x0800ee70
 80098b0:	0800f01c 	.word	0x0800f01c
 80098b4:	0800e91c 	.word	0x0800e91c
 80098b8:	20000454 	.word	0x20000454
 80098bc:	0800980d 	.word	0x0800980d

080098c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <__tcf_0+0xc>)
 80098c6:	f7ff fec5 	bl	8009654 <_ZN8touchgfx13GeneratedFontD1Ev>
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000484 	.word	0x20000484

080098d0 <_Z23getFont_verdana_20_4bppv>:
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08e      	sub	sp, #56	; 0x38
 80098d4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f3bf 8f5b 	dmb	ish
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf0c      	ite	eq
 80098e6:	2301      	moveq	r3, #1
 80098e8:	2300      	movne	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d030      	beq.n	8009952 <_Z23getFont_verdana_20_4bppv+0x82>
 80098f0:	481a      	ldr	r0, [pc, #104]	; (800995c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098f2:	f001 f87b 	bl	800a9ec <__cxa_guard_acquire>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bf14      	ite	ne
 80098fc:	2301      	movne	r3, #1
 80098fe:	2300      	moveq	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d025      	beq.n	8009952 <_Z23getFont_verdana_20_4bppv+0x82>
 8009906:	2300      	movs	r3, #0
 8009908:	930c      	str	r3, [sp, #48]	; 0x30
 800990a:	2300      	movs	r3, #0
 800990c:	930b      	str	r3, [sp, #44]	; 0x2c
 800990e:	2300      	movs	r3, #0
 8009910:	930a      	str	r3, [sp, #40]	; 0x28
 8009912:	233f      	movs	r3, #63	; 0x3f
 8009914:	9309      	str	r3, [sp, #36]	; 0x24
 8009916:	4b12      	ldr	r3, [pc, #72]	; (8009960 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009918:	9308      	str	r3, [sp, #32]
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <_Z23getFont_verdana_20_4bppv+0x94>)
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	2301      	movs	r3, #1
 8009920:	9306      	str	r3, [sp, #24]
 8009922:	2301      	movs	r3, #1
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	2301      	movs	r3, #1
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	2304      	movs	r3, #4
 800992c:	9303      	str	r3, [sp, #12]
 800992e:	2300      	movs	r3, #0
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	2300      	movs	r3, #0
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	2314      	movs	r3, #20
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	2318      	movs	r3, #24
 800993c:	225f      	movs	r2, #95	; 0x5f
 800993e:	490a      	ldr	r1, [pc, #40]	; (8009968 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009940:	480a      	ldr	r0, [pc, #40]	; (800996c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8009942:	f7ff fec1 	bl	80096c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009946:	480a      	ldr	r0, [pc, #40]	; (8009970 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009948:	f001 f89a 	bl	800aa80 <atexit>
 800994c:	4803      	ldr	r0, [pc, #12]	; (800995c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800994e:	f001 f859 	bl	800aa04 <__cxa_guard_release>
    return verdana_20_4bpp;
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009954:	4618      	mov	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	200004b0 	.word	0x200004b0
 8009960:	0800ee74 	.word	0x0800ee74
 8009964:	0800f020 	.word	0x0800f020
 8009968:	0800e92c 	.word	0x0800e92c
 800996c:	20000484 	.word	0x20000484
 8009970:	080098c1 	.word	0x080098c1

08009974 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
 8009978:	4801      	ldr	r0, [pc, #4]	; (8009980 <__tcf_0+0xc>)
 800997a:	f7ff fe6b 	bl	8009654 <_ZN8touchgfx13GeneratedFontD1Ev>
 800997e:	bd80      	pop	{r7, pc}
 8009980:	200004b4 	.word	0x200004b4

08009984 <_Z23getFont_verdana_40_4bppv>:
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08e      	sub	sp, #56	; 0x38
 8009988:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800998a:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f3bf 8f5b 	dmb	ish
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d030      	beq.n	8009a06 <_Z23getFont_verdana_40_4bppv+0x82>
 80099a4:	481a      	ldr	r0, [pc, #104]	; (8009a10 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80099a6:	f001 f821 	bl	800a9ec <__cxa_guard_acquire>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bf14      	ite	ne
 80099b0:	2301      	movne	r3, #1
 80099b2:	2300      	moveq	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d025      	beq.n	8009a06 <_Z23getFont_verdana_40_4bppv+0x82>
 80099ba:	2300      	movs	r3, #0
 80099bc:	930c      	str	r3, [sp, #48]	; 0x30
 80099be:	2300      	movs	r3, #0
 80099c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099c2:	2300      	movs	r3, #0
 80099c4:	930a      	str	r3, [sp, #40]	; 0x28
 80099c6:	233f      	movs	r3, #63	; 0x3f
 80099c8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <_Z23getFont_verdana_40_4bppv+0x90>)
 80099cc:	9308      	str	r3, [sp, #32]
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <_Z23getFont_verdana_40_4bppv+0x94>)
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	2300      	movs	r3, #0
 80099d4:	9306      	str	r3, [sp, #24]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	2301      	movs	r3, #1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	2304      	movs	r3, #4
 80099e0:	9303      	str	r3, [sp, #12]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9302      	str	r3, [sp, #8]
 80099e6:	2300      	movs	r3, #0
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	2328      	movs	r3, #40	; 0x28
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	2328      	movs	r3, #40	; 0x28
 80099f0:	2201      	movs	r2, #1
 80099f2:	490a      	ldr	r1, [pc, #40]	; (8009a1c <_Z23getFont_verdana_40_4bppv+0x98>)
 80099f4:	480a      	ldr	r0, [pc, #40]	; (8009a20 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80099f6:	f7ff fe67 	bl	80096c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80099fa:	480a      	ldr	r0, [pc, #40]	; (8009a24 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80099fc:	f001 f840 	bl	800aa80 <atexit>
 8009a00:	4803      	ldr	r0, [pc, #12]	; (8009a10 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009a02:	f000 ffff 	bl	800aa04 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009a06:	4b06      	ldr	r3, [pc, #24]	; (8009a20 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	200004e0 	.word	0x200004e0
 8009a14:	0800f018 	.word	0x0800f018
 8009a18:	0800f024 	.word	0x0800f024
 8009a1c:	0800ee60 	.word	0x0800ee60
 8009a20:	200004b4 	.word	0x200004b4
 8009a24:	08009975 	.word	0x08009975

08009a28 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	460b      	mov	r3, r1
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8009a36:	2300      	movs	r3, #0
    }
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009a4c:	2300      	movs	r3, #0
    }
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009a62:	2300      	movs	r3, #0
    }
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009a70:	b40e      	push	{r1, r2, r3}
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009a7a:	f107 0320 	add.w	r3, r7, #32
 8009a7e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	2100      	movs	r1, #0
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f910 	bl	8009cac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009a90:	89fb      	ldrh	r3, [r7, #14]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a9c:	b003      	add	sp, #12
 8009a9e:	4770      	bx	lr

08009aa0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009aa0:	b40c      	push	{r2, r3}
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009aae:	f107 031c 	add.w	r3, r7, #28
 8009ab2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009ab4:	78f9      	ldrb	r1, [r7, #3]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f8f6 	bl	8009cac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ad0:	b002      	add	sp, #8
 8009ad2:	4770      	bx	lr

08009ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d016      	beq.n	8009b16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3322      	adds	r3, #34	; 0x22
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	8adb      	ldrh	r3, [r3, #22]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d105      	bne.n	8009b02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009af6:	4b43      	ldr	r3, [pc, #268]	; (8009c04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009af8:	4a43      	ldr	r2, [pc, #268]	; (8009c08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009afa:	21c5      	movs	r1, #197	; 0xc5
 8009afc:	4843      	ldr	r0, [pc, #268]	; (8009c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009afe:	f000 ffa1 	bl	800aa44 <__assert_func>
            return buffer[pos];
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	8a9b      	ldrh	r3, [r3, #20]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d06a      	beq.n	8009bf2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ff44 	bl	800a9aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3322      	adds	r3, #34	; 0x22
 8009b26:	623b      	str	r3, [r7, #32]
 8009b28:	2301      	movs	r3, #1
 8009b2a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	8adb      	ldrh	r3, [r3, #22]
 8009b30:	8bfa      	ldrh	r2, [r7, #30]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d305      	bcc.n	8009b42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009b36:	4b36      	ldr	r3, [pc, #216]	; (8009c10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009b38:	4a36      	ldr	r2, [pc, #216]	; (8009c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009b3a:	21cb      	movs	r1, #203	; 0xcb
 8009b3c:	4833      	ldr	r0, [pc, #204]	; (8009c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b3e:	f000 ff81 	bl	800aa44 <__assert_func>
            const uint16_t index = pos + offset;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	8a9a      	ldrh	r2, [r3, #20]
 8009b46:	8bfb      	ldrh	r3, [r7, #30]
 8009b48:	4413      	add	r3, r2
 8009b4a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009b4c:	8bbb      	ldrh	r3, [r7, #28]
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d801      	bhi.n	8009b56 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009b52:	8bbb      	ldrh	r3, [r7, #28]
 8009b54:	e001      	b.n	8009b5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009b56:	8bbb      	ldrh	r3, [r7, #28]
 8009b58:	3b0a      	subs	r3, #10
 8009b5a:	6a3a      	ldr	r2, [r7, #32]
 8009b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b60:	f640 123f 	movw	r2, #2367	; 0x93f
 8009b64:	4293      	cmp	r3, r2
 8009b66:	bf0c      	ite	eq
 8009b68:	2301      	moveq	r3, #1
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d03f      	beq.n	8009bf2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3322      	adds	r3, #34	; 0x22
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	3222      	adds	r2, #34	; 0x22
 8009b7a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	8ad2      	ldrh	r2, [r2, #22]
 8009b80:	2a00      	cmp	r2, #0
 8009b82:	d105      	bne.n	8009b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009b84:	4b1f      	ldr	r3, [pc, #124]	; (8009c04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009b86:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009b88:	21c5      	movs	r1, #197	; 0xc5
 8009b8a:	4820      	ldr	r0, [pc, #128]	; (8009c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009b8c:	f000 ff5a 	bl	800aa44 <__assert_func>
            return buffer[pos];
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	8a92      	ldrh	r2, [r2, #20]
 8009b94:	4611      	mov	r1, r2
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	8adb      	ldrh	r3, [r3, #22]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d806      	bhi.n	8009bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009baa:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009bae:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8009bb2:	4816      	ldr	r0, [pc, #88]	; (8009c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009bb4:	f000 ff46 	bl	800aa44 <__assert_func>
            const uint16_t index = pos + 1;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	8a9b      	ldrh	r3, [r3, #20]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009bc0:	89bb      	ldrh	r3, [r7, #12]
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d801      	bhi.n	8009bca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009bc6:	89bb      	ldrh	r3, [r7, #12]
 8009bc8:	e000      	b.n	8009bcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	89f9      	ldrh	r1, [r7, #14]
 8009bd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009bd4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3322      	adds	r3, #34	; 0x22
 8009bda:	61bb      	str	r3, [r7, #24]
 8009bdc:	f640 133f 	movw	r3, #2367	; 0x93f
 8009be0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	8a9b      	ldrh	r3, [r3, #20]
 8009be6:	4619      	mov	r1, r3
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	8afa      	ldrh	r2, [r7, #22]
 8009bec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009bf0:	bf00      	nop
        }
    }
    return getNextChar();
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fddc 	bl	800a7b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3728      	adds	r7, #40	; 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	0800bb0c 	.word	0x0800bb0c
 8009c08:	0800bb18 	.word	0x0800bb18
 8009c0c:	0800bbc4 	.word	0x0800bbc4
 8009c10:	0800bc0c 	.word	0x0800bc0c
 8009c14:	0800bc1c 	.word	0x0800bc1c
 8009c18:	0800bcf0 	.word	0x0800bcf0
 8009c1c:	0800bcfc 	.word	0x0800bcfc

08009c20 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fd88 	bl	800a73e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
	...

08009c38 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d113      	bne.n	8009c70 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d10e      	bne.n	8009c70 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8009c52:	f7ff fe3d 	bl	80098d0 <_Z23getFont_verdana_20_4bppv>
 8009c56:	4603      	mov	r3, r0
};
 8009c58:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009c5a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009c5c:	f7ff fe92 	bl	8009984 <_Z23getFont_verdana_40_4bppv>
 8009c60:	4603      	mov	r3, r0
};
 8009c62:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009c64:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8009c66:	f7ff fdd9 	bl	800981c <_Z23getFont_verdana_10_4bppv>
 8009c6a:	4603      	mov	r3, r0
};
 8009c6c:	4a02      	ldr	r2, [pc, #8]	; (8009c78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009c6e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	200004e4 	.word	0x200004e4

08009c7c <_GLOBAL__sub_I_touchgfx_fonts>:
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c84:	2001      	movs	r0, #1
 8009c86:	f7ff ffd7 	bl	8009c38 <_Z41__static_initialization_and_destruction_0ii>
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	4770      	bx	lr
 8009c94:	200004f0 	.word	0x200004f0

08009c98 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8009c98:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	801a      	strh	r2, [r3, #0]
 8009c9e:	805a      	strh	r2, [r3, #2]
 8009ca0:	809a      	strh	r2, [r3, #4]
 8009ca2:	80da      	strh	r2, [r3, #6]
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	200004f4 	.word	0x200004f4

08009cac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	b09d      	sub	sp, #116	; 0x74
 8009cb4:	a803      	add	r0, sp, #12
 8009cb6:	4614      	mov	r4, r2
 8009cb8:	468a      	mov	sl, r1
 8009cba:	461d      	mov	r5, r3
 8009cbc:	f000 f9b2 	bl	800a024 <_ZN8touchgfx12TextProviderC1Ev>
 8009cc0:	6833      	ldr	r3, [r6, #0]
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc6:	4798      	blx	r3
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	4607      	mov	r7, r0
 8009ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4798      	blx	r3
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	9000      	str	r0, [sp, #0]
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	463b      	mov	r3, r7
 8009cda:	a803      	add	r0, sp, #12
 8009cdc:	f000 f9f5 	bl	800a0ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8009ce0:	2500      	movs	r5, #0
 8009ce2:	462c      	mov	r4, r5
 8009ce4:	46a9      	mov	r9, r5
 8009ce6:	46a8      	mov	r8, r5
 8009ce8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8009cec:	2300      	movs	r3, #0
 8009cee:	9302      	str	r3, [sp, #8]
 8009cf0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d002      	beq.n	8009cfe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8009cf8:	455c      	cmp	r4, fp
 8009cfa:	bf18      	it	ne
 8009cfc:	4625      	movne	r5, r4
 8009cfe:	ab02      	add	r3, sp, #8
 8009d00:	4632      	mov	r2, r6
 8009d02:	4651      	mov	r1, sl
 8009d04:	a803      	add	r0, sp, #12
 8009d06:	f000 fcd1 	bl	800a6ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	b108      	cbz	r0, 8009d12 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8009d0e:	280a      	cmp	r0, #10
 8009d10:	d10a      	bne.n	8009d28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8009d12:	45c1      	cmp	r9, r8
 8009d14:	bf38      	it	cc
 8009d16:	46c1      	movcc	r9, r8
 8009d18:	f04f 0800 	mov.w	r8, #0
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	d1e5      	bne.n	8009cec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8009d20:	4648      	mov	r0, r9
 8009d22:	b01d      	add	sp, #116	; 0x74
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	9a02      	ldr	r2, [sp, #8]
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	d0de      	beq.n	8009cec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8009d2e:	7b57      	ldrb	r7, [r2, #13]
 8009d30:	6833      	ldr	r3, [r6, #0]
 8009d32:	8894      	ldrh	r4, [r2, #4]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d36:	007f      	lsls	r7, r7, #1
 8009d38:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8009d3c:	7a97      	ldrb	r7, [r2, #10]
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4307      	orrs	r7, r0
 8009d42:	4630      	mov	r0, r6
 8009d44:	4798      	blx	r3
 8009d46:	4438      	add	r0, r7
 8009d48:	4480      	add	r8, r0
 8009d4a:	fa1f f888 	uxth.w	r8, r8
 8009d4e:	e7e5      	b.n	8009d1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08009d50 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8009d50:	b508      	push	{r3, lr}
 8009d52:	6803      	ldr	r3, [r0, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	4798      	blx	r3
 8009d58:	b128      	cbz	r0, 8009d66 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8009d5a:	7b43      	ldrb	r3, [r0, #13]
 8009d5c:	7a80      	ldrb	r0, [r0, #10]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d64:	4318      	orrs	r0, r3
 8009d66:	bd08      	pop	{r3, pc}

08009d68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8009d68:	b40e      	push	{r1, r2, r3}
 8009d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6c:	b09e      	sub	sp, #120	; 0x78
 8009d6e:	ab23      	add	r3, sp, #140	; 0x8c
 8009d70:	4605      	mov	r5, r0
 8009d72:	f853 4b04 	ldr.w	r4, [r3], #4
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	a805      	add	r0, sp, #20
 8009d7a:	f000 f953 	bl	800a024 <_ZN8touchgfx12TextProviderC1Ev>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	4628      	mov	r0, r5
 8009d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d84:	4798      	blx	r3
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	4606      	mov	r6, r0
 8009d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	4798      	blx	r3
 8009d90:	4633      	mov	r3, r6
 8009d92:	ae1e      	add	r6, sp, #120	; 0x78
 8009d94:	4621      	mov	r1, r4
 8009d96:	9000      	str	r0, [sp, #0]
 8009d98:	9a03      	ldr	r2, [sp, #12]
 8009d9a:	2400      	movs	r4, #0
 8009d9c:	a805      	add	r0, sp, #20
 8009d9e:	f000 f994 	bl	800a0ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8009da2:	f846 4d68 	str.w	r4, [r6, #-104]!
 8009da6:	462a      	mov	r2, r5
 8009da8:	4633      	mov	r3, r6
 8009daa:	4621      	mov	r1, r4
 8009dac:	a805      	add	r0, sp, #20
 8009dae:	f000 fc7d 	bl	800a6ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8009db2:	b1f0      	cbz	r0, 8009df2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8009db4:	280a      	cmp	r0, #10
 8009db6:	d018      	beq.n	8009dea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8009db8:	9f04      	ldr	r7, [sp, #16]
 8009dba:	b1b7      	cbz	r7, 8009dea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8009dbc:	7b78      	ldrb	r0, [r7, #13]
 8009dbe:	7a3b      	ldrb	r3, [r7, #8]
 8009dc0:	88ea      	ldrh	r2, [r5, #6]
 8009dc2:	00c1      	lsls	r1, r0, #3
 8009dc4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8009dc8:	4319      	orrs	r1, r3
 8009dca:	0643      	lsls	r3, r0, #25
 8009dcc:	bf44      	itt	mi
 8009dce:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8009dd2:	b219      	sxthmi	r1, r3
 8009dd4:	0100      	lsls	r0, r0, #4
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8009ddc:	4303      	orrs	r3, r0
 8009dde:	4413      	add	r3, r2
 8009de0:	1a5b      	subs	r3, r3, r1
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	429c      	cmp	r4, r3
 8009de6:	bfb8      	it	lt
 8009de8:	461c      	movlt	r4, r3
 8009dea:	4633      	mov	r3, r6
 8009dec:	462a      	mov	r2, r5
 8009dee:	2100      	movs	r1, #0
 8009df0:	e7dc      	b.n	8009dac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8009df2:	b2a0      	uxth	r0, r4
 8009df4:	b01e      	add	sp, #120	; 0x78
 8009df6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009dfa:	b003      	add	sp, #12
 8009dfc:	4770      	bx	lr

08009dfe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8009dfe:	7a43      	ldrb	r3, [r0, #9]
 8009e00:	8880      	ldrh	r0, [r0, #4]
 8009e02:	4418      	add	r0, r3
 8009e04:	b280      	uxth	r0, r0
 8009e06:	4770      	bx	lr

08009e08 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8009e08:	6803      	ldr	r3, [r0, #0]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0c:	4718      	bx	r3

08009e0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8009e0e:	b40e      	push	{r1, r2, r3}
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	ab21      	add	r3, sp, #132	; 0x84
 8009e16:	4604      	mov	r4, r0
 8009e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	a803      	add	r0, sp, #12
 8009e20:	f000 f900 	bl	800a024 <_ZN8touchgfx12TextProviderC1Ev>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	4620      	mov	r0, r4
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	4798      	blx	r3
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	4606      	mov	r6, r0
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	4620      	mov	r0, r4
 8009e34:	4798      	blx	r3
 8009e36:	4633      	mov	r3, r6
 8009e38:	9000      	str	r0, [sp, #0]
 8009e3a:	9a02      	ldr	r2, [sp, #8]
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	a803      	add	r0, sp, #12
 8009e40:	f000 f943 	bl	800a0ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8009e44:	a803      	add	r0, sp, #12
 8009e46:	f000 fcb3 	bl	800a7b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009e4a:	2401      	movs	r4, #1
 8009e4c:	b2a3      	uxth	r3, r4
 8009e4e:	b140      	cbz	r0, 8009e62 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8009e50:	280a      	cmp	r0, #10
 8009e52:	bf08      	it	eq
 8009e54:	3301      	addeq	r3, #1
 8009e56:	a803      	add	r0, sp, #12
 8009e58:	bf08      	it	eq
 8009e5a:	b21c      	sxtheq	r4, r3
 8009e5c:	f000 fca8 	bl	800a7b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009e60:	e7f4      	b.n	8009e4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8009e62:	4618      	mov	r0, r3
 8009e64:	b01d      	add	sp, #116	; 0x74
 8009e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e6a:	b003      	add	sp, #12
 8009e6c:	4770      	bx	lr

08009e6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8009e6e:	b40e      	push	{r1, r2, r3}
 8009e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e72:	b09e      	sub	sp, #120	; 0x78
 8009e74:	ab23      	add	r3, sp, #140	; 0x8c
 8009e76:	4604      	mov	r4, r0
 8009e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	a805      	add	r0, sp, #20
 8009e80:	f000 f8d0 	bl	800a024 <_ZN8touchgfx12TextProviderC1Ev>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	4620      	mov	r0, r4
 8009e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8a:	4798      	blx	r3
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	4606      	mov	r6, r0
 8009e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e92:	4620      	mov	r0, r4
 8009e94:	4798      	blx	r3
 8009e96:	4633      	mov	r3, r6
 8009e98:	4629      	mov	r1, r5
 8009e9a:	9000      	str	r0, [sp, #0]
 8009e9c:	9a03      	ldr	r2, [sp, #12]
 8009e9e:	a805      	add	r0, sp, #20
 8009ea0:	ad1e      	add	r5, sp, #120	; 0x78
 8009ea2:	f000 f912 	bl	800a0ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	f845 1d68 	str.w	r1, [r5, #-104]!
 8009eac:	4622      	mov	r2, r4
 8009eae:	462b      	mov	r3, r5
 8009eb0:	a805      	add	r0, sp, #20
 8009eb2:	f000 fbfb 	bl	800a6ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8009eb6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8009eba:	b1d8      	cbz	r0, 8009ef4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8009ebc:	280a      	cmp	r0, #10
 8009ebe:	d012      	beq.n	8009ee6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8009ec0:	9804      	ldr	r0, [sp, #16]
 8009ec2:	b180      	cbz	r0, 8009ee6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8009ec4:	7b47      	ldrb	r7, [r0, #13]
 8009ec6:	88e2      	ldrh	r2, [r4, #6]
 8009ec8:	00fb      	lsls	r3, r7, #3
 8009eca:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8009ece:	7a03      	ldrb	r3, [r0, #8]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	0679      	lsls	r1, r7, #25
 8009ed4:	bf44      	itt	mi
 8009ed6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8009eda:	b21b      	sxthmi	r3, r3
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	429e      	cmp	r6, r3
 8009ee2:	bfa8      	it	ge
 8009ee4:	461e      	movge	r6, r3
 8009ee6:	462b      	mov	r3, r5
 8009ee8:	4622      	mov	r2, r4
 8009eea:	2100      	movs	r1, #0
 8009eec:	a805      	add	r0, sp, #20
 8009eee:	f000 fbdd 	bl	800a6ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8009ef2:	e7e2      	b.n	8009eba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	b01e      	add	sp, #120	; 0x78
 8009ef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009efc:	b003      	add	sp, #12
 8009efe:	4770      	bx	lr

08009f00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8009f00:	b530      	push	{r4, r5, lr}
 8009f02:	8083      	strh	r3, [r0, #4]
 8009f04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009f08:	80c3      	strh	r3, [r0, #6]
 8009f0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f0e:	7203      	strb	r3, [r0, #8]
 8009f10:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009f14:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8009f18:	7243      	strb	r3, [r0, #9]
 8009f1a:	7a83      	ldrb	r3, [r0, #10]
 8009f1c:	6141      	str	r1, [r0, #20]
 8009f1e:	f365 0306 	bfi	r3, r5, #0, #7
 8009f22:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8009f26:	8302      	strh	r2, [r0, #24]
 8009f28:	f365 13c7 	bfi	r3, r5, #7, #1
 8009f2c:	7283      	strb	r3, [r0, #10]
 8009f2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009f32:	72c3      	strb	r3, [r0, #11]
 8009f34:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f38:	7303      	strb	r3, [r0, #12]
 8009f3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8009f3e:	81c3      	strh	r3, [r0, #14]
 8009f40:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8009f44:	8203      	strh	r3, [r0, #16]
 8009f46:	4b01      	ldr	r3, [pc, #4]	; (8009f4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8009f48:	6003      	str	r3, [r0, #0]
 8009f4a:	bd30      	pop	{r4, r5, pc}
 8009f4c:	0800cc40 	.word	0x0800cc40

08009f50 <_ZNK8touchgfx9ConstFont4findEt>:
 8009f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f52:	6944      	ldr	r4, [r0, #20]
 8009f54:	b3bc      	cbz	r4, 8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009f56:	88a3      	ldrh	r3, [r4, #4]
 8009f58:	8b02      	ldrh	r2, [r0, #24]
 8009f5a:	1acb      	subs	r3, r1, r3
 8009f5c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009f60:	d431      	bmi.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009f62:	4293      	cmp	r3, r2
 8009f64:	dd0c      	ble.n	8009f80 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8009f66:	230e      	movs	r3, #14
 8009f68:	fb03 4302 	mla	r3, r3, r2, r4
 8009f6c:	889b      	ldrh	r3, [r3, #4]
 8009f6e:	1a5b      	subs	r3, r3, r1
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	429a      	cmp	r2, r3
 8009f74:	db27      	blt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfbc      	itt	lt
 8009f7a:	2302      	movlt	r3, #2
 8009f7c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8009f80:	2500      	movs	r5, #0
 8009f82:	260e      	movs	r6, #14
 8009f84:	4295      	cmp	r5, r2
 8009f86:	dc1e      	bgt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009f88:	fb06 4003 	mla	r0, r6, r3, r4
 8009f8c:	8887      	ldrh	r7, [r0, #4]
 8009f8e:	42b9      	cmp	r1, r7
 8009f90:	d01a      	beq.n	8009fc8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8009f92:	d20d      	bcs.n	8009fb0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	4295      	cmp	r5, r2
 8009f98:	dc15      	bgt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009f9a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8009f9e:	1a5b      	subs	r3, r3, r1
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	db0f      	blt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	ddec      	ble.n	8009f84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8009faa:	1953      	adds	r3, r2, r5
 8009fac:	105b      	asrs	r3, r3, #1
 8009fae:	e7e9      	b.n	8009f84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8009fb0:	1c5d      	adds	r5, r3, #1
 8009fb2:	42aa      	cmp	r2, r5
 8009fb4:	db07      	blt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009fb6:	8a43      	ldrh	r3, [r0, #18]
 8009fb8:	1acb      	subs	r3, r1, r3
 8009fba:	442b      	add	r3, r5
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	dc02      	bgt.n	8009fc6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	dadf      	bge.n	8009f84 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8009fc4:	e7f1      	b.n	8009faa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8009fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4617      	mov	r7, r2
 8009fd0:	461e      	mov	r6, r3
 8009fd2:	b911      	cbnz	r1, 8009fda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8009fd4:	2500      	movs	r5, #0
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fda:	290a      	cmp	r1, #10
 8009fdc:	d0fa      	beq.n	8009fd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8009fde:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	d0f6      	beq.n	8009fd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8009fe6:	f242 020b 	movw	r2, #8203	; 0x200b
 8009fea:	4291      	cmp	r1, r2
 8009fec:	d0f2      	beq.n	8009fd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8009fee:	f7ff ffaf 	bl	8009f50 <_ZNK8touchgfx9ConstFont4findEt>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	b950      	cbnz	r0, 800a00c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	4798      	blx	r3
 8009ffe:	4601      	mov	r1, r0
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff ffa5 	bl	8009f50 <_ZNK8touchgfx9ConstFont4findEt>
 800a006:	4605      	mov	r5, r0
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0e3      	beq.n	8009fd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	4629      	mov	r1, r5
 800a010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a012:	4620      	mov	r0, r4
 800a014:	4798      	blx	r3
 800a016:	6038      	str	r0, [r7, #0]
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	4620      	mov	r0, r4
 800a01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01e:	4798      	blx	r3
 800a020:	7030      	strb	r0, [r6, #0]
 800a022:	e7d8      	b.n	8009fd6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800a024 <_ZN8touchgfx12TextProviderC1Ev>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	2500      	movs	r5, #0
 800a028:	2302      	movs	r3, #2
 800a02a:	4604      	mov	r4, r0
 800a02c:	e9c0 5500 	strd	r5, r5, [r0]
 800a030:	7403      	strb	r3, [r0, #16]
 800a032:	6145      	str	r5, [r0, #20]
 800a034:	7605      	strb	r5, [r0, #24]
 800a036:	83c5      	strh	r5, [r0, #30]
 800a038:	8405      	strh	r5, [r0, #32]
 800a03a:	86c5      	strh	r5, [r0, #54]	; 0x36
 800a03c:	8705      	strh	r5, [r0, #56]	; 0x38
 800a03e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800a040:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800a044:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800a048:	220e      	movs	r2, #14
 800a04a:	4629      	mov	r1, r5
 800a04c:	304c      	adds	r0, #76	; 0x4c
 800a04e:	f000 fef0 	bl	800ae32 <memset>
 800a052:	2301      	movs	r3, #1
 800a054:	4620      	mov	r0, r4
 800a056:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800a05a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a05e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800a062:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800a066:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a06a:	f7ff fdd9 	bl	8009c20 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800a06e:	4620      	mov	r0, r4
 800a070:	bd38      	pop	{r3, r4, r5, pc}

0800a072 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800a072:	b530      	push	{r4, r5, lr}
 800a074:	2500      	movs	r5, #0
 800a076:	2401      	movs	r4, #1
 800a078:	6843      	ldr	r3, [r0, #4]
 800a07a:	b913      	cbnz	r3, 800a082 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800a07c:	6803      	ldr	r3, [r0, #0]
 800a07e:	b313      	cbz	r3, 800a0c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800a080:	6043      	str	r3, [r0, #4]
 800a082:	7e03      	ldrb	r3, [r0, #24]
 800a084:	b143      	cbz	r3, 800a098 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800a086:	6943      	ldr	r3, [r0, #20]
 800a088:	b12b      	cbz	r3, 800a096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800a08a:	881a      	ldrh	r2, [r3, #0]
 800a08c:	b11a      	cbz	r2, 800a096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800a08e:	1c9a      	adds	r2, r3, #2
 800a090:	6142      	str	r2, [r0, #20]
 800a092:	8818      	ldrh	r0, [r3, #0]
 800a094:	bd30      	pop	{r4, r5, pc}
 800a096:	7605      	strb	r5, [r0, #24]
 800a098:	6843      	ldr	r3, [r0, #4]
 800a09a:	8819      	ldrh	r1, [r3, #0]
 800a09c:	b199      	cbz	r1, 800a0c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800a09e:	1c9a      	adds	r2, r3, #2
 800a0a0:	2902      	cmp	r1, #2
 800a0a2:	6042      	str	r2, [r0, #4]
 800a0a4:	d1f5      	bne.n	800a092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800a0a6:	7c03      	ldrb	r3, [r0, #16]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d8e5      	bhi.n	800a078 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	7402      	strb	r2, [r0, #16]
 800a0b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a0b6:	6143      	str	r3, [r0, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0dd      	beq.n	800a078 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0da      	beq.n	800a078 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a0c2:	7604      	strb	r4, [r0, #24]
 800a0c4:	e7d8      	b.n	800a078 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e7e4      	b.n	800a094 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800a0ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800a0ca:	b430      	push	{r4, r5}
 800a0cc:	6001      	str	r1, [r0, #0]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	6041      	str	r1, [r0, #4]
 800a0d2:	6815      	ldr	r5, [r2, #0]
 800a0d4:	6085      	str	r5, [r0, #8]
 800a0d6:	6852      	ldr	r2, [r2, #4]
 800a0d8:	6443      	str	r3, [r0, #68]	; 0x44
 800a0da:	9b02      	ldr	r3, [sp, #8]
 800a0dc:	60c2      	str	r2, [r0, #12]
 800a0de:	7401      	strb	r1, [r0, #16]
 800a0e0:	6141      	str	r1, [r0, #20]
 800a0e2:	7601      	strb	r1, [r0, #24]
 800a0e4:	8701      	strh	r1, [r0, #56]	; 0x38
 800a0e6:	8401      	strh	r1, [r0, #32]
 800a0e8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800a0ec:	6483      	str	r3, [r0, #72]	; 0x48
 800a0ee:	bc30      	pop	{r4, r5}
 800a0f0:	f7ff bd96 	b.w	8009c20 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800a0f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	b1e9      	cbz	r1, 800a138 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800a0fc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800a100:	460b      	mov	r3, r1
 800a102:	f101 0708 	add.w	r7, r1, #8
 800a106:	4622      	mov	r2, r4
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	4626      	mov	r6, r4
 800a10e:	c603      	stmia	r6!, {r0, r1}
 800a110:	3308      	adds	r3, #8
 800a112:	42bb      	cmp	r3, r7
 800a114:	4634      	mov	r4, r6
 800a116:	d1f7      	bne.n	800a108 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	6030      	str	r0, [r6, #0]
 800a11c:	889b      	ldrh	r3, [r3, #4]
 800a11e:	80b3      	strh	r3, [r6, #4]
 800a120:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800a124:	015b      	lsls	r3, r3, #5
 800a126:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800a12a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800a12e:	430b      	orrs	r3, r1
 800a130:	425b      	negs	r3, r3
 800a132:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800a136:	4610      	mov	r0, r2
 800a138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a13a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800a13a:	b538      	push	{r3, r4, r5, lr}
 800a13c:	460c      	mov	r4, r1
 800a13e:	6811      	ldr	r1, [r2, #0]
 800a140:	4610      	mov	r0, r2
 800a142:	68cd      	ldr	r5, [r1, #12]
 800a144:	4619      	mov	r1, r3
 800a146:	47a8      	blx	r5
 800a148:	2800      	cmp	r0, #0
 800a14a:	bf08      	it	eq
 800a14c:	4620      	moveq	r0, r4
 800a14e:	bd38      	pop	{r3, r4, r5, pc}

0800a150 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	4615      	mov	r5, r2
 800a156:	4608      	mov	r0, r1
 800a158:	b93a      	cbnz	r2, 800a16a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800a15a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800a15e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800a162:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800a166:	4628      	mov	r0, r5
 800a168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800a16e:	8893      	ldrh	r3, [r2, #4]
 800a170:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800a174:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800a178:	79ee      	ldrb	r6, [r5, #7]
 800a17a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800a17e:	4316      	orrs	r6, r2
 800a180:	19da      	adds	r2, r3, r7
 800a182:	b291      	uxth	r1, r2
 800a184:	291d      	cmp	r1, #29
 800a186:	b2b7      	uxth	r7, r6
 800a188:	d87a      	bhi.n	800a280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800a18a:	2201      	movs	r2, #1
 800a18c:	408a      	lsls	r2, r1
 800a18e:	4975      	ldr	r1, [pc, #468]	; (800a364 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800a190:	420a      	tst	r2, r1
 800a192:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800a196:	d12d      	bne.n	800a1f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800a198:	f412 7f60 	tst.w	r2, #896	; 0x380
 800a19c:	d070      	beq.n	800a280 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 800a19e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800a1a2:	462b      	mov	r3, r5
 800a1a4:	f105 0e08 	add.w	lr, r5, #8
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	6859      	ldr	r1, [r3, #4]
 800a1ae:	4694      	mov	ip, r2
 800a1b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	4573      	cmp	r3, lr
 800a1b8:	4662      	mov	r2, ip
 800a1ba:	d1f6      	bne.n	800a1aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f8cc 0000 	str.w	r0, [ip]
 800a1c2:	889b      	ldrh	r3, [r3, #4]
 800a1c4:	f8ac 3004 	strh.w	r3, [ip, #4]
 800a1c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a1cc:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800a1d0:	b2b3      	uxth	r3, r6
 800a1d2:	1aca      	subs	r2, r1, r3
 800a1d4:	b292      	uxth	r2, r2
 800a1d6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800a1da:	10d2      	asrs	r2, r2, #3
 800a1dc:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800a1e0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800a1e4:	4302      	orrs	r2, r0
 800a1e6:	1bcf      	subs	r7, r1, r7
 800a1e8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800a1ec:	1afb      	subs	r3, r7, r3
 800a1ee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a1f2:	e7b8      	b.n	800a166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800a1f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a1f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a1fa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a1fc:	f640 6333 	movw	r3, #3635	; 0xe33
 800a200:	4299      	cmp	r1, r3
 800a202:	d110      	bne.n	800a226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800a204:	6803      	ldr	r3, [r0, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	4798      	blx	r3
 800a20a:	7b41      	ldrb	r1, [r0, #13]
 800a20c:	00cb      	lsls	r3, r1, #3
 800a20e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a212:	7a03      	ldrb	r3, [r0, #8]
 800a214:	0648      	lsls	r0, r1, #25
 800a216:	ea43 0302 	orr.w	r3, r3, r2
 800a21a:	bf44      	itt	mi
 800a21c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a220:	b21b      	sxthmi	r3, r3
 800a222:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a226:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a22a:	443b      	add	r3, r7
 800a22c:	4433      	add	r3, r6
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800a234:	462a      	mov	r2, r5
 800a236:	f105 0c08 	add.w	ip, r5, #8
 800a23a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a23e:	4635      	mov	r5, r6
 800a240:	6810      	ldr	r0, [r2, #0]
 800a242:	6851      	ldr	r1, [r2, #4]
 800a244:	4637      	mov	r7, r6
 800a246:	c703      	stmia	r7!, {r0, r1}
 800a248:	3208      	adds	r2, #8
 800a24a:	4562      	cmp	r2, ip
 800a24c:	463e      	mov	r6, r7
 800a24e:	d1f7      	bne.n	800a240 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800a250:	6810      	ldr	r0, [r2, #0]
 800a252:	6038      	str	r0, [r7, #0]
 800a254:	8892      	ldrh	r2, [r2, #4]
 800a256:	80ba      	strh	r2, [r7, #4]
 800a258:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a25c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a260:	10db      	asrs	r3, r3, #3
 800a262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a26a:	4313      	orrs	r3, r2
 800a26c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800a270:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800a274:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800a27e:	e772      	b.n	800a166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800a280:	f023 0204 	bic.w	r2, r3, #4
 800a284:	f640 611b 	movw	r1, #3611	; 0xe1b
 800a288:	428a      	cmp	r2, r1
 800a28a:	d003      	beq.n	800a294 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800a28c:	f640 621d 	movw	r2, #3613	; 0xe1d
 800a290:	4293      	cmp	r3, r2
 800a292:	d120      	bne.n	800a2d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 800a294:	3b01      	subs	r3, #1
 800a296:	4602      	mov	r2, r0
 800a298:	b29b      	uxth	r3, r3
 800a29a:	4629      	mov	r1, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff ff4c 	bl	800a13a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800a2a2:	7b41      	ldrb	r1, [r0, #13]
 800a2a4:	00cb      	lsls	r3, r1, #3
 800a2a6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a2aa:	7a03      	ldrb	r3, [r0, #8]
 800a2ac:	0649      	lsls	r1, r1, #25
 800a2ae:	ea43 0302 	orr.w	r3, r3, r2
 800a2b2:	bf44      	itt	mi
 800a2b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a2b8:	b21b      	sxthmi	r3, r3
 800a2ba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a2be:	7b6b      	ldrb	r3, [r5, #13]
 800a2c0:	7aaa      	ldrb	r2, [r5, #10]
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	115a      	asrs	r2, r3, #5
 800a2cc:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800a2d0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800a2d4:	e036      	b.n	800a344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800a2d6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800a2da:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800a2de:	7a2a      	ldrb	r2, [r5, #8]
 800a2e0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800a2e4:	ea42 0201 	orr.w	r2, r2, r1
 800a2e8:	bf1c      	itt	ne
 800a2ea:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800a2ee:	b212      	sxthne	r2, r2
 800a2f0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800a2f4:	f640 6109 	movw	r1, #3593	; 0xe09
 800a2f8:	f023 0210 	bic.w	r2, r3, #16
 800a2fc:	428a      	cmp	r2, r1
 800a2fe:	d003      	beq.n	800a308 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 800a300:	f640 6213 	movw	r2, #3603	; 0xe13
 800a304:	4293      	cmp	r3, r2
 800a306:	d12a      	bne.n	800a35e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800a308:	7b6e      	ldrb	r6, [r5, #13]
 800a30a:	0076      	lsls	r6, r6, #1
 800a30c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800a310:	7aae      	ldrb	r6, [r5, #10]
 800a312:	4316      	orrs	r6, r2
 800a314:	f640 6213 	movw	r2, #3603	; 0xe13
 800a318:	4293      	cmp	r3, r2
 800a31a:	bf18      	it	ne
 800a31c:	f103 33ff 	addne.w	r3, r3, #4294967295
 800a320:	4602      	mov	r2, r0
 800a322:	bf14      	ite	ne
 800a324:	b29b      	uxthne	r3, r3
 800a326:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800a32a:	4629      	mov	r1, r5
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7ff ff04 	bl	800a13a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800a332:	7b43      	ldrb	r3, [r0, #13]
 800a334:	7a82      	ldrb	r2, [r0, #10]
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33c:	4313      	orrs	r3, r2
 800a33e:	1af6      	subs	r6, r6, r3
 800a340:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800a344:	7b69      	ldrb	r1, [r5, #13]
 800a346:	00cb      	lsls	r3, r1, #3
 800a348:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a34c:	7a2b      	ldrb	r3, [r5, #8]
 800a34e:	4313      	orrs	r3, r2
 800a350:	064a      	lsls	r2, r1, #25
 800a352:	bf44      	itt	mi
 800a354:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a358:	b21b      	sxthmi	r3, r3
 800a35a:	1bdb      	subs	r3, r3, r7
 800a35c:	e747      	b.n	800a1ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800a35e:	2300      	movs	r3, #0
 800a360:	e7b6      	b.n	800a2d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 800a362:	bf00      	nop
 800a364:	3fc00079 	.word	0x3fc00079

0800a368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800a368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4604      	mov	r4, r0
 800a36e:	b942      	cbnz	r2, 800a382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800a370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a374:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800a378:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800a37c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800a380:	e047      	b.n	800a412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800a382:	7b51      	ldrb	r1, [r2, #13]
 800a384:	8893      	ldrh	r3, [r2, #4]
 800a386:	010d      	lsls	r5, r1, #4
 800a388:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800a38c:	79d5      	ldrb	r5, [r2, #7]
 800a38e:	4305      	orrs	r5, r0
 800a390:	2d04      	cmp	r5, #4
 800a392:	bfcc      	ite	gt
 800a394:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800a398:	f04f 0e01 	movle.w	lr, #1
 800a39c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800a3a0:	f200 80ab 	bhi.w	800a4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800a3a4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	d216      	bcs.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a3ac:	f240 605b 	movw	r0, #1627	; 0x65b
 800a3b0:	4283      	cmp	r3, r0
 800a3b2:	d859      	bhi.n	800a468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800a3b4:	f240 6057 	movw	r0, #1623	; 0x657
 800a3b8:	4283      	cmp	r3, r0
 800a3ba:	d20e      	bcs.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a3bc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800a3c0:	d24a      	bcs.n	800a458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800a3c2:	f240 604e 	movw	r0, #1614	; 0x64e
 800a3c6:	4283      	cmp	r3, r0
 800a3c8:	d207      	bcs.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a3ca:	f240 601a 	movw	r0, #1562	; 0x61a
 800a3ce:	4283      	cmp	r3, r0
 800a3d0:	d02a      	beq.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a3d2:	d821      	bhi.n	800a418 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800a3d4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800a3d8:	d35b      	bcc.n	800a492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a3da:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800a3de:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a3e2:	f040 80d0 	bne.w	800a586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800a3e6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800a3ea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a3ee:	f040 80ca 	bne.w	800a586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800a3f2:	00cb      	lsls	r3, r1, #3
 800a3f4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a3f8:	7a13      	ldrb	r3, [r2, #8]
 800a3fa:	0649      	lsls	r1, r1, #25
 800a3fc:	ea43 0300 	orr.w	r3, r3, r0
 800a400:	bf44      	itt	mi
 800a402:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a406:	b21b      	sxthmi	r3, r3
 800a408:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a40c:	1b5d      	subs	r5, r3, r5
 800a40e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a412:	4610      	mov	r0, r2
 800a414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a418:	f240 604b 	movw	r0, #1611	; 0x64b
 800a41c:	4283      	cmp	r3, r0
 800a41e:	d338      	bcc.n	800a492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a420:	f240 604c 	movw	r0, #1612	; 0x64c
 800a424:	4283      	cmp	r3, r0
 800a426:	d9d8      	bls.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a428:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800a42c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800a430:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a434:	f040 80f2 	bne.w	800a61c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800a438:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a43c:	f040 80ee 	bne.w	800a61c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800a440:	00cb      	lsls	r3, r1, #3
 800a442:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a446:	7a13      	ldrb	r3, [r2, #8]
 800a448:	064e      	lsls	r6, r1, #25
 800a44a:	ea43 0300 	orr.w	r3, r3, r0
 800a44e:	bf44      	itt	mi
 800a450:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a454:	b21b      	sxthmi	r3, r3
 800a456:	e7d9      	b.n	800a40c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800a458:	f240 6054 	movw	r0, #1620	; 0x654
 800a45c:	4283      	cmp	r3, r0
 800a45e:	d8e3      	bhi.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a460:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800a464:	d9e0      	bls.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a466:	e7b8      	b.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a468:	f240 6074 	movw	r0, #1652	; 0x674
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d0b4      	beq.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a470:	d82d      	bhi.n	800a4ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800a472:	f240 605e 	movw	r0, #1630	; 0x65e
 800a476:	4283      	cmp	r3, r0
 800a478:	d804      	bhi.n	800a484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800a47a:	f240 605d 	movw	r0, #1629	; 0x65d
 800a47e:	4283      	cmp	r3, r0
 800a480:	d3d2      	bcc.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a482:	e7aa      	b.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a484:	f240 605f 	movw	r0, #1631	; 0x65f
 800a488:	4283      	cmp	r3, r0
 800a48a:	d0cd      	beq.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a48c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800a490:	d0a3      	beq.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a492:	00cb      	lsls	r3, r1, #3
 800a494:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800a498:	7a13      	ldrb	r3, [r2, #8]
 800a49a:	0649      	lsls	r1, r1, #25
 800a49c:	ea43 0300 	orr.w	r3, r3, r0
 800a4a0:	bf44      	itt	mi
 800a4a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a4a6:	b21b      	sxthmi	r3, r3
 800a4a8:	1b5d      	subs	r5, r3, r5
 800a4aa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a4ae:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a4b2:	7b53      	ldrb	r3, [r2, #13]
 800a4b4:	015b      	lsls	r3, r3, #5
 800a4b6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800a4ba:	7993      	ldrb	r3, [r2, #6]
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	2105      	movs	r1, #5
 800a4c2:	fb93 f3f1 	sdiv	r3, r3, r1
 800a4c6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800a4ca:	440b      	add	r3, r1
 800a4cc:	e756      	b.n	800a37c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800a4ce:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800a4d2:	4283      	cmp	r3, r0
 800a4d4:	d809      	bhi.n	800a4ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800a4d6:	f240 60df 	movw	r0, #1759	; 0x6df
 800a4da:	4283      	cmp	r3, r0
 800a4dc:	f4bf af7d 	bcs.w	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a4e0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800a4e4:	2b05      	cmp	r3, #5
 800a4e6:	d8d4      	bhi.n	800a492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a4e8:	e777      	b.n	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a4ea:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800a4ee:	4283      	cmp	r3, r0
 800a4f0:	d09a      	beq.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a4f2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	e7ca      	b.n	800a490 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800a4fa:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800a4fe:	d22b      	bcs.n	800a558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800a500:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800a504:	4283      	cmp	r3, r0
 800a506:	d28f      	bcs.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a508:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a50c:	4283      	cmp	r3, r0
 800a50e:	d816      	bhi.n	800a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800a510:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800a514:	4283      	cmp	r3, r0
 800a516:	f4bf af60 	bcs.w	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a51a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800a51e:	4283      	cmp	r3, r0
 800a520:	d80a      	bhi.n	800a538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800a522:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800a526:	4283      	cmp	r3, r0
 800a528:	f4bf af57 	bcs.w	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a52c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800a530:	4283      	cmp	r3, r0
 800a532:	f43f af79 	beq.w	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a536:	e7ac      	b.n	800a492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800a538:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800a53c:	e7f8      	b.n	800a530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800a53e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800a542:	4283      	cmp	r3, r0
 800a544:	d802      	bhi.n	800a54c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800a546:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a54a:	e798      	b.n	800a47e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800a54c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800a550:	4283      	cmp	r3, r0
 800a552:	f47f af42 	bne.w	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a556:	e767      	b.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a558:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800a55c:	4283      	cmp	r3, r0
 800a55e:	f43f af63 	beq.w	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a562:	d802      	bhi.n	800a56a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800a564:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800a568:	e7f2      	b.n	800a550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800a56a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800a56e:	4283      	cmp	r3, r0
 800a570:	d805      	bhi.n	800a57e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800a572:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800a576:	4283      	cmp	r3, r0
 800a578:	f4ff af2f 	bcc.w	800a3da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800a57c:	e754      	b.n	800a428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800a57e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800a582:	4283      	cmp	r3, r0
 800a584:	e7af      	b.n	800a4e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800a586:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800a58a:	4617      	mov	r7, r2
 800a58c:	f102 0808 	add.w	r8, r2, #8
 800a590:	4666      	mov	r6, ip
 800a592:	6838      	ldr	r0, [r7, #0]
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	46e6      	mov	lr, ip
 800a598:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800a59c:	3708      	adds	r7, #8
 800a59e:	4547      	cmp	r7, r8
 800a5a0:	46f4      	mov	ip, lr
 800a5a2:	d1f6      	bne.n	800a592 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800a5a4:	6838      	ldr	r0, [r7, #0]
 800a5a6:	f8ce 0000 	str.w	r0, [lr]
 800a5aa:	88b9      	ldrh	r1, [r7, #4]
 800a5ac:	f8ae 1004 	strh.w	r1, [lr, #4]
 800a5b0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800a5b4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a5b8:	d009      	beq.n	800a5ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800a5ba:	7b51      	ldrb	r1, [r2, #13]
 800a5bc:	7992      	ldrb	r2, [r2, #6]
 800a5be:	0149      	lsls	r1, r1, #5
 800a5c0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800a5c4:	4311      	orrs	r1, r2
 800a5c6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800a5ca:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800a5ce:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a5d2:	b2ad      	uxth	r5, r5
 800a5d4:	d00d      	beq.n	800a5f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800a5d6:	442b      	add	r3, r5
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a5de:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a5e2:	10db      	asrs	r3, r3, #3
 800a5e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800a5f2:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800a5f6:	00cb      	lsls	r3, r1, #3
 800a5f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a5fc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a600:	064f      	lsls	r7, r1, #25
 800a602:	ea43 0302 	orr.w	r3, r3, r2
 800a606:	bf44      	itt	mi
 800a608:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a60c:	b21b      	sxthmi	r3, r3
 800a60e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800a612:	1b5b      	subs	r3, r3, r5
 800a614:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800a618:	4632      	mov	r2, r6
 800a61a:	e6fa      	b.n	800a412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800a61c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800a620:	4617      	mov	r7, r2
 800a622:	f102 0908 	add.w	r9, r2, #8
 800a626:	4666      	mov	r6, ip
 800a628:	6838      	ldr	r0, [r7, #0]
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	46e0      	mov	r8, ip
 800a62e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800a632:	3708      	adds	r7, #8
 800a634:	454f      	cmp	r7, r9
 800a636:	46c4      	mov	ip, r8
 800a638:	d1f6      	bne.n	800a628 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800a63a:	6838      	ldr	r0, [r7, #0]
 800a63c:	f8c8 0000 	str.w	r0, [r8]
 800a640:	88b9      	ldrh	r1, [r7, #4]
 800a642:	f8a8 1004 	strh.w	r1, [r8, #4]
 800a646:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800a64a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800a64e:	d009      	beq.n	800a664 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800a650:	7b51      	ldrb	r1, [r2, #13]
 800a652:	7992      	ldrb	r2, [r2, #6]
 800a654:	0149      	lsls	r1, r1, #5
 800a656:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800a65a:	4311      	orrs	r1, r2
 800a65c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800a660:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800a664:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800a668:	d00e      	beq.n	800a688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800a66a:	eba3 030e 	sub.w	r3, r3, lr
 800a66e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800a672:	b29b      	uxth	r3, r3
 800a674:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800a678:	10db      	asrs	r3, r3, #3
 800a67a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a67e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a682:	4313      	orrs	r3, r2
 800a684:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800a688:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800a68c:	00cb      	lsls	r3, r1, #3
 800a68e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800a692:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a696:	0648      	lsls	r0, r1, #25
 800a698:	ea43 0302 	orr.w	r3, r3, r2
 800a69c:	bf44      	itt	mi
 800a69e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800a6a2:	b21b      	sxthmi	r3, r3
 800a6a4:	1b5d      	subs	r5, r3, r5
 800a6a6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800a6aa:	e7b5      	b.n	800a618 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800a6ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	461e      	mov	r6, r3
 800a6b2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a6b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4617      	mov	r7, r2
 800a6bc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800a6c0:	f7ff fa08 	bl	8009ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b918      	cbnz	r0, 800a6d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800a6c8:	6030      	str	r0, [r6, #0]
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	4798      	blx	r3
 800a6da:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800a6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	6030      	str	r0, [r6, #0]
 800a6e6:	d213      	bcs.n	800a710 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800a6e8:	4643      	mov	r3, r8
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fe3b 	bl	800a368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800a6f2:	6030      	str	r0, [r6, #0]
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	b143      	cbz	r3, 800a70a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800a6f8:	7b5a      	ldrb	r2, [r3, #13]
 800a6fa:	7a9b      	ldrb	r3, [r3, #10]
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800a702:	4313      	orrs	r3, r2
 800a704:	bf0c      	ite	eq
 800a706:	2301      	moveq	r3, #1
 800a708:	2300      	movne	r3, #0
 800a70a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800a70e:	e7dc      	b.n	800a6ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800a710:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800a714:	b29b      	uxth	r3, r3
 800a716:	2b7f      	cmp	r3, #127	; 0x7f
 800a718:	d804      	bhi.n	800a724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800a71a:	4639      	mov	r1, r7
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7ff fd17 	bl	800a150 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800a722:	e7e6      	b.n	800a6f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800a724:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0e3      	beq.n	800a6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800a72c:	f640 1302 	movw	r3, #2306	; 0x902
 800a730:	429d      	cmp	r5, r3
 800a732:	d1df      	bne.n	800a6f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800a734:	4601      	mov	r1, r0
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fcdc 	bl	800a0f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800a73c:	e7d9      	b.n	800a6f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800a73e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800a73e:	b510      	push	{r4, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800a746:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a748:	b1f1      	cbz	r1, 800a788 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800a74a:	2b0a      	cmp	r3, #10
 800a74c:	d02f      	beq.n	800a7ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800a74e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a750:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800a754:	3901      	subs	r1, #1
 800a756:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800a758:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800a75c:	1c51      	adds	r1, r2, #1
 800a75e:	b289      	uxth	r1, r1
 800a760:	2901      	cmp	r1, #1
 800a762:	bf84      	itt	hi
 800a764:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a768:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800a76a:	f103 0201 	add.w	r2, r3, #1
 800a76e:	8722      	strh	r2, [r4, #56]	; 0x38
 800a770:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a772:	bf98      	it	ls
 800a774:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800a776:	4413      	add	r3, r2
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b09      	cmp	r3, #9
 800a77c:	bf88      	it	hi
 800a77e:	3b0a      	subhi	r3, #10
 800a780:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a784:	8458      	strh	r0, [r3, #34]	; 0x22
 800a786:	e7dc      	b.n	800a742 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800a788:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a78a:	2b0a      	cmp	r3, #10
 800a78c:	d00f      	beq.n	800a7ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff fc6f 	bl	800a072 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800a794:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	8722      	strh	r2, [r4, #56]	; 0x38
 800a79a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a79c:	4413      	add	r3, r2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	2b09      	cmp	r3, #9
 800a7a2:	bf88      	it	hi
 800a7a4:	3b0a      	subhi	r3, #10
 800a7a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a7aa:	8458      	strh	r0, [r3, #34]	; 0x22
 800a7ac:	e7ec      	b.n	800a788 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800a7ae:	bd10      	pop	{r4, pc}

0800a7b0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a7b4:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800a7bc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800a7be:	3a01      	subs	r2, #1
 800a7c0:	8702      	strh	r2, [r0, #56]	; 0x38
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	b292      	uxth	r2, r2
 800a7c6:	2a09      	cmp	r2, #9
 800a7c8:	bf86      	itte	hi
 800a7ca:	3b09      	subhi	r3, #9
 800a7cc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800a7ce:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800a7d0:	f7ff ffb5 	bl	800a73e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800a7d4:	8c23      	ldrh	r3, [r4, #32]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	bf9c      	itt	ls
 800a7da:	3301      	addls	r3, #1
 800a7dc:	8423      	strhls	r3, [r4, #32]
 800a7de:	8be3      	ldrh	r3, [r4, #30]
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	83e3      	strh	r3, [r4, #30]
 800a7e6:	8be3      	ldrh	r3, [r4, #30]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	83e3      	strh	r3, [r4, #30]
 800a7ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	8365      	strh	r5, [r4, #26]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}

0800a7f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800a7f8:	428a      	cmp	r2, r1
 800a7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fe:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800a800:	d931      	bls.n	800a866 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800a802:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800a804:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800a808:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800a80c:	19ee      	adds	r6, r5, r7
 800a80e:	1a54      	subs	r4, r2, r1
 800a810:	3e01      	subs	r6, #1
 800a812:	fa1f fe84 	uxth.w	lr, r4
 800a816:	b2b4      	uxth	r4, r6
 800a818:	eba4 090e 	sub.w	r9, r4, lr
 800a81c:	fa1f f989 	uxth.w	r9, r9
 800a820:	2c09      	cmp	r4, #9
 800a822:	4626      	mov	r6, r4
 800a824:	bf88      	it	hi
 800a826:	f1a4 060a 	subhi.w	r6, r4, #10
 800a82a:	f1bc 0f00 	cmp.w	ip, #0
 800a82e:	bf08      	it	eq
 800a830:	f04f 0c02 	moveq.w	ip, #2
 800a834:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800a838:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a83c:	fa1f fc8c 	uxth.w	ip, ip
 800a840:	3c01      	subs	r4, #1
 800a842:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800a846:	b2a4      	uxth	r4, r4
 800a848:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800a84c:	454c      	cmp	r4, r9
 800a84e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800a852:	d1e5      	bne.n	800a820 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800a854:	eba5 050e 	sub.w	r5, r5, lr
 800a858:	eb0e 0408 	add.w	r4, lr, r8
 800a85c:	8705      	strh	r5, [r0, #56]	; 0x38
 800a85e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800a862:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800a866:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800a868:	1a64      	subs	r4, r4, r1
 800a86a:	4439      	add	r1, r7
 800a86c:	b289      	uxth	r1, r1
 800a86e:	2909      	cmp	r1, #9
 800a870:	bf88      	it	hi
 800a872:	390a      	subhi	r1, #10
 800a874:	8704      	strh	r4, [r0, #56]	; 0x38
 800a876:	86c1      	strh	r1, [r0, #54]	; 0x36
 800a878:	250a      	movs	r5, #10
 800a87a:	b18a      	cbz	r2, 800a8a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800a87c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800a87e:	3a01      	subs	r2, #1
 800a880:	b292      	uxth	r2, r2
 800a882:	3101      	adds	r1, #1
 800a884:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800a888:	8701      	strh	r1, [r0, #56]	; 0x38
 800a88a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800a88c:	b901      	cbnz	r1, 800a890 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800a88e:	86c5      	strh	r5, [r0, #54]	; 0x36
 800a890:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800a892:	3901      	subs	r1, #1
 800a894:	b289      	uxth	r1, r1
 800a896:	86c1      	strh	r1, [r0, #54]	; 0x36
 800a898:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800a89c:	844c      	strh	r4, [r1, #34]	; 0x22
 800a89e:	e7ec      	b.n	800a87a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800a8a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a4:	f7ff bf4b 	b.w	800a73e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800a8a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	4295      	cmp	r5, r2
 800a8ae:	d011      	beq.n	800a8d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800a8b0:	8bc4      	ldrh	r4, [r0, #30]
 800a8b2:	f831 6b02 	ldrh.w	r6, [r1], #2
 800a8b6:	4414      	add	r4, r2
 800a8b8:	3c01      	subs	r4, #1
 800a8ba:	1b64      	subs	r4, r4, r5
 800a8bc:	b2a4      	uxth	r4, r4
 800a8be:	2c01      	cmp	r4, #1
 800a8c0:	bf88      	it	hi
 800a8c2:	3c02      	subhi	r4, #2
 800a8c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800a8c8:	8b64      	ldrh	r4, [r4, #26]
 800a8ca:	42b4      	cmp	r4, r6
 800a8cc:	d117      	bne.n	800a8fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	b2ad      	uxth	r5, r5
 800a8d2:	e7eb      	b.n	800a8ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800a8d4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800a8d8:	2400      	movs	r4, #0
 800a8da:	4413      	add	r3, r2
 800a8dc:	b2a2      	uxth	r2, r4
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	da0f      	bge.n	800a902 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800a8e2:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800a8e4:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800a8e8:	4432      	add	r2, r6
 800a8ea:	b292      	uxth	r2, r2
 800a8ec:	2a09      	cmp	r2, #9
 800a8ee:	bf88      	it	hi
 800a8f0:	3a0a      	subhi	r2, #10
 800a8f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a8f6:	3401      	adds	r4, #1
 800a8f8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800a8fa:	42aa      	cmp	r2, r5
 800a8fc:	d0ee      	beq.n	800a8dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800a8fe:	2000      	movs	r0, #0
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	2001      	movs	r0, #1
 800a904:	e7fc      	b.n	800a900 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800a906 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800a906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	4605      	mov	r5, r0
 800a90c:	4616      	mov	r6, r2
 800a90e:	1c8c      	adds	r4, r1, #2
 800a910:	8809      	ldrh	r1, [r1, #0]
 800a912:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800a916:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800a91a:	42b3      	cmp	r3, r6
 800a91c:	d124      	bne.n	800a968 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800a91e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800a922:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800a926:	f001 070f 	and.w	r7, r1, #15
 800a92a:	f8cd 8000 	str.w	r8, [sp]
 800a92e:	464b      	mov	r3, r9
 800a930:	4652      	mov	r2, sl
 800a932:	4621      	mov	r1, r4
 800a934:	4628      	mov	r0, r5
 800a936:	f7ff ffb7 	bl	800a8a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800a93a:	4683      	mov	fp, r0
 800a93c:	b168      	cbz	r0, 800a95a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800a93e:	eb0a 0109 	add.w	r1, sl, r9
 800a942:	4441      	add	r1, r8
 800a944:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800a948:	463a      	mov	r2, r7
 800a94a:	4649      	mov	r1, r9
 800a94c:	4628      	mov	r0, r5
 800a94e:	f7ff ff53 	bl	800a7f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800a952:	4658      	mov	r0, fp
 800a954:	b003      	add	sp, #12
 800a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95a:	eb07 010a 	add.w	r1, r7, sl
 800a95e:	4449      	add	r1, r9
 800a960:	4441      	add	r1, r8
 800a962:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800a966:	e7d2      	b.n	800a90e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800a968:	f04f 0b00 	mov.w	fp, #0
 800a96c:	e7f1      	b.n	800a952 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800a96e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800a96e:	b570      	push	{r4, r5, r6, lr}
 800a970:	8810      	ldrh	r0, [r2, #0]
 800a972:	4298      	cmp	r0, r3
 800a974:	d817      	bhi.n	800a9a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800a976:	1e48      	subs	r0, r1, #1
 800a978:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800a97c:	4298      	cmp	r0, r3
 800a97e:	d312      	bcc.n	800a9a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800a980:	2400      	movs	r4, #0
 800a982:	428c      	cmp	r4, r1
 800a984:	d20f      	bcs.n	800a9a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800a986:	1860      	adds	r0, r4, r1
 800a988:	1040      	asrs	r0, r0, #1
 800a98a:	0085      	lsls	r5, r0, #2
 800a98c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800a990:	42b3      	cmp	r3, r6
 800a992:	d902      	bls.n	800a99a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800a994:	3001      	adds	r0, #1
 800a996:	b284      	uxth	r4, r0
 800a998:	e7f3      	b.n	800a982 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800a99a:	d201      	bcs.n	800a9a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800a99c:	b281      	uxth	r1, r0
 800a99e:	e7f0      	b.n	800a982 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800a9a0:	442a      	add	r2, r5
 800a9a2:	8850      	ldrh	r0, [r2, #2]
 800a9a4:	bd70      	pop	{r4, r5, r6, pc}
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e7fc      	b.n	800a9a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800a9aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800a9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ae:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800a9b0:	886f      	ldrh	r7, [r5, #2]
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	087f      	lsrs	r7, r7, #1
 800a9b6:	260b      	movs	r6, #11
 800a9b8:	3e01      	subs	r6, #1
 800a9ba:	d013      	beq.n	800a9e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800a9bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a9be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4643      	mov	r3, r8
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7ff ffce 	bl	800a96e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800a9d2:	b138      	cbz	r0, 800a9e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800a9d4:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800a9d8:	4642      	mov	r2, r8
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff ff93 	bl	800a906 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1e9      	bne.n	800a9b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800a9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9e8 <_ZdlPvj>:
 800a9e8:	f000 b812 	b.w	800aa10 <_ZdlPv>

0800a9ec <__cxa_guard_acquire>:
 800a9ec:	6803      	ldr	r3, [r0, #0]
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d406      	bmi.n	800aa00 <__cxa_guard_acquire+0x14>
 800a9f2:	7843      	ldrb	r3, [r0, #1]
 800a9f4:	b103      	cbz	r3, 800a9f8 <__cxa_guard_acquire+0xc>
 800a9f6:	deff      	udf	#255	; 0xff
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	7043      	strb	r3, [r0, #1]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	4770      	bx	lr
 800aa00:	2000      	movs	r0, #0
 800aa02:	4770      	bx	lr

0800aa04 <__cxa_guard_release>:
 800aa04:	2301      	movs	r3, #1
 800aa06:	6003      	str	r3, [r0, #0]
 800aa08:	4770      	bx	lr

0800aa0a <__cxa_pure_virtual>:
 800aa0a:	b508      	push	{r3, lr}
 800aa0c:	f000 f80e 	bl	800aa2c <_ZSt9terminatev>

0800aa10 <_ZdlPv>:
 800aa10:	f000 b844 	b.w	800aa9c <free>

0800aa14 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800aa14:	b508      	push	{r3, lr}
 800aa16:	4780      	blx	r0
 800aa18:	f000 f80d 	bl	800aa36 <abort>

0800aa1c <_ZSt13get_terminatev>:
 800aa1c:	4b02      	ldr	r3, [pc, #8]	; (800aa28 <_ZSt13get_terminatev+0xc>)
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	f3bf 8f5b 	dmb	ish
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	20000018 	.word	0x20000018

0800aa2c <_ZSt9terminatev>:
 800aa2c:	b508      	push	{r3, lr}
 800aa2e:	f7ff fff5 	bl	800aa1c <_ZSt13get_terminatev>
 800aa32:	f7ff ffef 	bl	800aa14 <_ZN10__cxxabiv111__terminateEPFvvE>

0800aa36 <abort>:
 800aa36:	b508      	push	{r3, lr}
 800aa38:	2006      	movs	r0, #6
 800aa3a:	f000 fa2b 	bl	800ae94 <raise>
 800aa3e:	2001      	movs	r0, #1
 800aa40:	f7f7 fa48 	bl	8001ed4 <_exit>

0800aa44 <__assert_func>:
 800aa44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa46:	4614      	mov	r4, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <__assert_func+0x2c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4605      	mov	r5, r0
 800aa50:	68d8      	ldr	r0, [r3, #12]
 800aa52:	b14c      	cbz	r4, 800aa68 <__assert_func+0x24>
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <__assert_func+0x30>)
 800aa56:	9100      	str	r1, [sp, #0]
 800aa58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa5c:	4906      	ldr	r1, [pc, #24]	; (800aa78 <__assert_func+0x34>)
 800aa5e:	462b      	mov	r3, r5
 800aa60:	f000 f974 	bl	800ad4c <fiprintf>
 800aa64:	f7ff ffe7 	bl	800aa36 <abort>
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <__assert_func+0x38>)
 800aa6a:	461c      	mov	r4, r3
 800aa6c:	e7f3      	b.n	800aa56 <__assert_func+0x12>
 800aa6e:	bf00      	nop
 800aa70:	20000074 	.word	0x20000074
 800aa74:	0800cc98 	.word	0x0800cc98
 800aa78:	0800cca5 	.word	0x0800cca5
 800aa7c:	0800ccd3 	.word	0x0800ccd3

0800aa80 <atexit>:
 800aa80:	2300      	movs	r3, #0
 800aa82:	4601      	mov	r1, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 baa4 	b.w	800afd4 <__register_exitproc>

0800aa8c <malloc>:
 800aa8c:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <malloc+0xc>)
 800aa8e:	4601      	mov	r1, r0
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f000 b82b 	b.w	800aaec <_malloc_r>
 800aa96:	bf00      	nop
 800aa98:	20000074 	.word	0x20000074

0800aa9c <free>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <free+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 baf5 	b.w	800b090 <_free_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000074 	.word	0x20000074

0800aaac <sbrk_aligned>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4e0e      	ldr	r6, [pc, #56]	; (800aae8 <sbrk_aligned+0x3c>)
 800aab0:	460c      	mov	r4, r1
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	4605      	mov	r5, r0
 800aab6:	b911      	cbnz	r1, 800aabe <sbrk_aligned+0x12>
 800aab8:	f000 fa3c 	bl	800af34 <_sbrk_r>
 800aabc:	6030      	str	r0, [r6, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 fa37 	bl	800af34 <_sbrk_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d00a      	beq.n	800aae0 <sbrk_aligned+0x34>
 800aaca:	1cc4      	adds	r4, r0, #3
 800aacc:	f024 0403 	bic.w	r4, r4, #3
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	d007      	beq.n	800aae4 <sbrk_aligned+0x38>
 800aad4:	1a21      	subs	r1, r4, r0
 800aad6:	4628      	mov	r0, r5
 800aad8:	f000 fa2c 	bl	800af34 <_sbrk_r>
 800aadc:	3001      	adds	r0, #1
 800aade:	d101      	bne.n	800aae4 <sbrk_aligned+0x38>
 800aae0:	f04f 34ff 	mov.w	r4, #4294967295
 800aae4:	4620      	mov	r0, r4
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	20000500 	.word	0x20000500

0800aaec <_malloc_r>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	1ccd      	adds	r5, r1, #3
 800aaf2:	f025 0503 	bic.w	r5, r5, #3
 800aaf6:	3508      	adds	r5, #8
 800aaf8:	2d0c      	cmp	r5, #12
 800aafa:	bf38      	it	cc
 800aafc:	250c      	movcc	r5, #12
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	4607      	mov	r7, r0
 800ab02:	db01      	blt.n	800ab08 <_malloc_r+0x1c>
 800ab04:	42a9      	cmp	r1, r5
 800ab06:	d905      	bls.n	800ab14 <_malloc_r+0x28>
 800ab08:	230c      	movs	r3, #12
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800abe8 <_malloc_r+0xfc>
 800ab18:	f000 f868 	bl	800abec <__malloc_lock>
 800ab1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab20:	461c      	mov	r4, r3
 800ab22:	bb5c      	cbnz	r4, 800ab7c <_malloc_r+0x90>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7ff ffc0 	bl	800aaac <sbrk_aligned>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	4604      	mov	r4, r0
 800ab30:	d155      	bne.n	800abde <_malloc_r+0xf2>
 800ab32:	f8d8 4000 	ldr.w	r4, [r8]
 800ab36:	4626      	mov	r6, r4
 800ab38:	2e00      	cmp	r6, #0
 800ab3a:	d145      	bne.n	800abc8 <_malloc_r+0xdc>
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	d048      	beq.n	800abd2 <_malloc_r+0xe6>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	4631      	mov	r1, r6
 800ab44:	4638      	mov	r0, r7
 800ab46:	eb04 0903 	add.w	r9, r4, r3
 800ab4a:	f000 f9f3 	bl	800af34 <_sbrk_r>
 800ab4e:	4581      	cmp	r9, r0
 800ab50:	d13f      	bne.n	800abd2 <_malloc_r+0xe6>
 800ab52:	6821      	ldr	r1, [r4, #0]
 800ab54:	1a6d      	subs	r5, r5, r1
 800ab56:	4629      	mov	r1, r5
 800ab58:	4638      	mov	r0, r7
 800ab5a:	f7ff ffa7 	bl	800aaac <sbrk_aligned>
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d037      	beq.n	800abd2 <_malloc_r+0xe6>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	442b      	add	r3, r5
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d038      	beq.n	800abe2 <_malloc_r+0xf6>
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	42a2      	cmp	r2, r4
 800ab74:	d12b      	bne.n	800abce <_malloc_r+0xe2>
 800ab76:	2200      	movs	r2, #0
 800ab78:	605a      	str	r2, [r3, #4]
 800ab7a:	e00f      	b.n	800ab9c <_malloc_r+0xb0>
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	1b52      	subs	r2, r2, r5
 800ab80:	d41f      	bmi.n	800abc2 <_malloc_r+0xd6>
 800ab82:	2a0b      	cmp	r2, #11
 800ab84:	d917      	bls.n	800abb6 <_malloc_r+0xca>
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	6025      	str	r5, [r4, #0]
 800ab8c:	bf18      	it	ne
 800ab8e:	6059      	strne	r1, [r3, #4]
 800ab90:	6863      	ldr	r3, [r4, #4]
 800ab92:	bf08      	it	eq
 800ab94:	f8c8 1000 	streq.w	r1, [r8]
 800ab98:	5162      	str	r2, [r4, r5]
 800ab9a:	604b      	str	r3, [r1, #4]
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	f104 060b 	add.w	r6, r4, #11
 800aba2:	f000 f829 	bl	800abf8 <__malloc_unlock>
 800aba6:	f026 0607 	bic.w	r6, r6, #7
 800abaa:	1d23      	adds	r3, r4, #4
 800abac:	1af2      	subs	r2, r6, r3
 800abae:	d0ae      	beq.n	800ab0e <_malloc_r+0x22>
 800abb0:	1b9b      	subs	r3, r3, r6
 800abb2:	50a3      	str	r3, [r4, r2]
 800abb4:	e7ab      	b.n	800ab0e <_malloc_r+0x22>
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	d1dd      	bne.n	800ab78 <_malloc_r+0x8c>
 800abbc:	f8c8 2000 	str.w	r2, [r8]
 800abc0:	e7ec      	b.n	800ab9c <_malloc_r+0xb0>
 800abc2:	4623      	mov	r3, r4
 800abc4:	6864      	ldr	r4, [r4, #4]
 800abc6:	e7ac      	b.n	800ab22 <_malloc_r+0x36>
 800abc8:	4634      	mov	r4, r6
 800abca:	6876      	ldr	r6, [r6, #4]
 800abcc:	e7b4      	b.n	800ab38 <_malloc_r+0x4c>
 800abce:	4613      	mov	r3, r2
 800abd0:	e7cc      	b.n	800ab6c <_malloc_r+0x80>
 800abd2:	230c      	movs	r3, #12
 800abd4:	603b      	str	r3, [r7, #0]
 800abd6:	4638      	mov	r0, r7
 800abd8:	f000 f80e 	bl	800abf8 <__malloc_unlock>
 800abdc:	e797      	b.n	800ab0e <_malloc_r+0x22>
 800abde:	6025      	str	r5, [r4, #0]
 800abe0:	e7dc      	b.n	800ab9c <_malloc_r+0xb0>
 800abe2:	605b      	str	r3, [r3, #4]
 800abe4:	deff      	udf	#255	; 0xff
 800abe6:	bf00      	nop
 800abe8:	200004fc 	.word	0x200004fc

0800abec <__malloc_lock>:
 800abec:	4801      	ldr	r0, [pc, #4]	; (800abf4 <__malloc_lock+0x8>)
 800abee:	f000 b9ee 	b.w	800afce <__retarget_lock_acquire_recursive>
 800abf2:	bf00      	nop
 800abf4:	20000645 	.word	0x20000645

0800abf8 <__malloc_unlock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_unlock+0x8>)
 800abfa:	f000 b9e9 	b.w	800afd0 <__retarget_lock_release_recursive>
 800abfe:	bf00      	nop
 800ac00:	20000645 	.word	0x20000645

0800ac04 <std>:
 800ac04:	2300      	movs	r3, #0
 800ac06:	b510      	push	{r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac12:	6083      	str	r3, [r0, #8]
 800ac14:	8181      	strh	r1, [r0, #12]
 800ac16:	6643      	str	r3, [r0, #100]	; 0x64
 800ac18:	81c2      	strh	r2, [r0, #14]
 800ac1a:	6183      	str	r3, [r0, #24]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	2208      	movs	r2, #8
 800ac20:	305c      	adds	r0, #92	; 0x5c
 800ac22:	f000 f906 	bl	800ae32 <memset>
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <std+0x58>)
 800ac28:	6263      	str	r3, [r4, #36]	; 0x24
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <std+0x5c>)
 800ac2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <std+0x60>)
 800ac30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <std+0x64>)
 800ac34:	6323      	str	r3, [r4, #48]	; 0x30
 800ac36:	4b0d      	ldr	r3, [pc, #52]	; (800ac6c <std+0x68>)
 800ac38:	6224      	str	r4, [r4, #32]
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d006      	beq.n	800ac4c <std+0x48>
 800ac3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac42:	4294      	cmp	r4, r2
 800ac44:	d002      	beq.n	800ac4c <std+0x48>
 800ac46:	33d0      	adds	r3, #208	; 0xd0
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d105      	bne.n	800ac58 <std+0x54>
 800ac4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac54:	f000 b9ba 	b.w	800afcc <__retarget_lock_init_recursive>
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	bf00      	nop
 800ac5c:	0800adad 	.word	0x0800adad
 800ac60:	0800adcf 	.word	0x0800adcf
 800ac64:	0800ae07 	.word	0x0800ae07
 800ac68:	0800ae2b 	.word	0x0800ae2b
 800ac6c:	20000504 	.word	0x20000504

0800ac70 <stdio_exit_handler>:
 800ac70:	4a02      	ldr	r2, [pc, #8]	; (800ac7c <stdio_exit_handler+0xc>)
 800ac72:	4903      	ldr	r1, [pc, #12]	; (800ac80 <stdio_exit_handler+0x10>)
 800ac74:	4803      	ldr	r0, [pc, #12]	; (800ac84 <stdio_exit_handler+0x14>)
 800ac76:	f000 b87b 	b.w	800ad70 <_fwalk_sglue>
 800ac7a:	bf00      	nop
 800ac7c:	2000001c 	.word	0x2000001c
 800ac80:	0800b7dd 	.word	0x0800b7dd
 800ac84:	20000028 	.word	0x20000028

0800ac88 <cleanup_stdio>:
 800ac88:	6841      	ldr	r1, [r0, #4]
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <cleanup_stdio+0x34>)
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	4604      	mov	r4, r0
 800ac92:	d001      	beq.n	800ac98 <cleanup_stdio+0x10>
 800ac94:	f000 fda2 	bl	800b7dc <_fflush_r>
 800ac98:	68a1      	ldr	r1, [r4, #8]
 800ac9a:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <cleanup_stdio+0x38>)
 800ac9c:	4299      	cmp	r1, r3
 800ac9e:	d002      	beq.n	800aca6 <cleanup_stdio+0x1e>
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fd9b 	bl	800b7dc <_fflush_r>
 800aca6:	68e1      	ldr	r1, [r4, #12]
 800aca8:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <cleanup_stdio+0x3c>)
 800acaa:	4299      	cmp	r1, r3
 800acac:	d004      	beq.n	800acb8 <cleanup_stdio+0x30>
 800acae:	4620      	mov	r0, r4
 800acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb4:	f000 bd92 	b.w	800b7dc <_fflush_r>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	20000504 	.word	0x20000504
 800acc0:	2000056c 	.word	0x2000056c
 800acc4:	200005d4 	.word	0x200005d4

0800acc8 <global_stdio_init.part.0>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <global_stdio_init.part.0+0x30>)
 800accc:	4c0b      	ldr	r4, [pc, #44]	; (800acfc <global_stdio_init.part.0+0x34>)
 800acce:	4a0c      	ldr	r2, [pc, #48]	; (800ad00 <global_stdio_init.part.0+0x38>)
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	4620      	mov	r0, r4
 800acd4:	2200      	movs	r2, #0
 800acd6:	2104      	movs	r1, #4
 800acd8:	f7ff ff94 	bl	800ac04 <std>
 800acdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ace0:	2201      	movs	r2, #1
 800ace2:	2109      	movs	r1, #9
 800ace4:	f7ff ff8e 	bl	800ac04 <std>
 800ace8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800acec:	2202      	movs	r2, #2
 800acee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf2:	2112      	movs	r1, #18
 800acf4:	f7ff bf86 	b.w	800ac04 <std>
 800acf8:	2000063c 	.word	0x2000063c
 800acfc:	20000504 	.word	0x20000504
 800ad00:	0800ac71 	.word	0x0800ac71

0800ad04 <__sfp_lock_acquire>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sfp_lock_acquire+0x8>)
 800ad06:	f000 b962 	b.w	800afce <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20000646 	.word	0x20000646

0800ad10 <__sfp_lock_release>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__sfp_lock_release+0x8>)
 800ad12:	f000 b95d 	b.w	800afd0 <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20000646 	.word	0x20000646

0800ad1c <__sinit>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	f7ff fff0 	bl	800ad04 <__sfp_lock_acquire>
 800ad24:	6a23      	ldr	r3, [r4, #32]
 800ad26:	b11b      	cbz	r3, 800ad30 <__sinit+0x14>
 800ad28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2c:	f7ff bff0 	b.w	800ad10 <__sfp_lock_release>
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <__sinit+0x28>)
 800ad32:	6223      	str	r3, [r4, #32]
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <__sinit+0x2c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1f5      	bne.n	800ad28 <__sinit+0xc>
 800ad3c:	f7ff ffc4 	bl	800acc8 <global_stdio_init.part.0>
 800ad40:	e7f2      	b.n	800ad28 <__sinit+0xc>
 800ad42:	bf00      	nop
 800ad44:	0800ac89 	.word	0x0800ac89
 800ad48:	2000063c 	.word	0x2000063c

0800ad4c <fiprintf>:
 800ad4c:	b40e      	push	{r1, r2, r3}
 800ad4e:	b503      	push	{r0, r1, lr}
 800ad50:	4601      	mov	r1, r0
 800ad52:	ab03      	add	r3, sp, #12
 800ad54:	4805      	ldr	r0, [pc, #20]	; (800ad6c <fiprintf+0x20>)
 800ad56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	f000 fa0d 	bl	800b17c <_vfiprintf_r>
 800ad62:	b002      	add	sp, #8
 800ad64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad68:	b003      	add	sp, #12
 800ad6a:	4770      	bx	lr
 800ad6c:	20000074 	.word	0x20000074

0800ad70 <_fwalk_sglue>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	4607      	mov	r7, r0
 800ad76:	4688      	mov	r8, r1
 800ad78:	4614      	mov	r4, r2
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad80:	f1b9 0901 	subs.w	r9, r9, #1
 800ad84:	d505      	bpl.n	800ad92 <_fwalk_sglue+0x22>
 800ad86:	6824      	ldr	r4, [r4, #0]
 800ad88:	2c00      	cmp	r4, #0
 800ad8a:	d1f7      	bne.n	800ad7c <_fwalk_sglue+0xc>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d907      	bls.n	800ada8 <_fwalk_sglue+0x38>
 800ad98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	d003      	beq.n	800ada8 <_fwalk_sglue+0x38>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4638      	mov	r0, r7
 800ada4:	47c0      	blx	r8
 800ada6:	4306      	orrs	r6, r0
 800ada8:	3568      	adds	r5, #104	; 0x68
 800adaa:	e7e9      	b.n	800ad80 <_fwalk_sglue+0x10>

0800adac <__sread>:
 800adac:	b510      	push	{r4, lr}
 800adae:	460c      	mov	r4, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	f000 f898 	bl	800aee8 <_read_r>
 800adb8:	2800      	cmp	r0, #0
 800adba:	bfab      	itete	ge
 800adbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adbe:	89a3      	ldrhlt	r3, [r4, #12]
 800adc0:	181b      	addge	r3, r3, r0
 800adc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adc6:	bfac      	ite	ge
 800adc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800adca:	81a3      	strhlt	r3, [r4, #12]
 800adcc:	bd10      	pop	{r4, pc}

0800adce <__swrite>:
 800adce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	461f      	mov	r7, r3
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	05db      	lsls	r3, r3, #23
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4616      	mov	r6, r2
 800adde:	d505      	bpl.n	800adec <__swrite+0x1e>
 800ade0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade4:	2302      	movs	r3, #2
 800ade6:	2200      	movs	r2, #0
 800ade8:	f000 f86c 	bl	800aec4 <_lseek_r>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	4632      	mov	r2, r6
 800adfa:	463b      	mov	r3, r7
 800adfc:	4628      	mov	r0, r5
 800adfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae02:	f000 b8a7 	b.w	800af54 <_write_r>

0800ae06 <__sseek>:
 800ae06:	b510      	push	{r4, lr}
 800ae08:	460c      	mov	r4, r1
 800ae0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0e:	f000 f859 	bl	800aec4 <_lseek_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	bf15      	itete	ne
 800ae18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae22:	81a3      	strheq	r3, [r4, #12]
 800ae24:	bf18      	it	ne
 800ae26:	81a3      	strhne	r3, [r4, #12]
 800ae28:	bd10      	pop	{r4, pc}

0800ae2a <__sclose>:
 800ae2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2e:	f000 b839 	b.w	800aea4 <_close_r>

0800ae32 <memset>:
 800ae32:	4402      	add	r2, r0
 800ae34:	4603      	mov	r3, r0
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d100      	bne.n	800ae3c <memset+0xa>
 800ae3a:	4770      	bx	lr
 800ae3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae40:	e7f9      	b.n	800ae36 <memset+0x4>

0800ae42 <_raise_r>:
 800ae42:	291f      	cmp	r1, #31
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	d904      	bls.n	800ae56 <_raise_r+0x14>
 800ae4c:	2316      	movs	r3, #22
 800ae4e:	6003      	str	r3, [r0, #0]
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ae58:	b112      	cbz	r2, 800ae60 <_raise_r+0x1e>
 800ae5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae5e:	b94b      	cbnz	r3, 800ae74 <_raise_r+0x32>
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 f865 	bl	800af30 <_getpid_r>
 800ae66:	462a      	mov	r2, r5
 800ae68:	4601      	mov	r1, r0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae70:	f000 b84c 	b.w	800af0c <_kill_r>
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d00a      	beq.n	800ae8e <_raise_r+0x4c>
 800ae78:	1c59      	adds	r1, r3, #1
 800ae7a:	d103      	bne.n	800ae84 <_raise_r+0x42>
 800ae7c:	2316      	movs	r3, #22
 800ae7e:	6003      	str	r3, [r0, #0]
 800ae80:	2001      	movs	r0, #1
 800ae82:	e7e7      	b.n	800ae54 <_raise_r+0x12>
 800ae84:	2400      	movs	r4, #0
 800ae86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	4798      	blx	r3
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e7e0      	b.n	800ae54 <_raise_r+0x12>
	...

0800ae94 <raise>:
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <raise+0xc>)
 800ae96:	4601      	mov	r1, r0
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	f7ff bfd2 	b.w	800ae42 <_raise_r>
 800ae9e:	bf00      	nop
 800aea0:	20000074 	.word	0x20000074

0800aea4 <_close_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d06      	ldr	r5, [pc, #24]	; (800aec0 <_close_r+0x1c>)
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4608      	mov	r0, r1
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	f7f7 f853 	bl	8001f5a <_close>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d102      	bne.n	800aebe <_close_r+0x1a>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	b103      	cbz	r3, 800aebe <_close_r+0x1a>
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	20000640 	.word	0x20000640

0800aec4 <_lseek_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_lseek_r+0x20>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	602a      	str	r2, [r5, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f7f7 f868 	bl	8001fa8 <_lseek>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_lseek_r+0x1e>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_lseek_r+0x1e>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20000640 	.word	0x20000640

0800aee8 <_read_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	; (800af08 <_read_r+0x20>)
 800aeec:	4604      	mov	r4, r0
 800aeee:	4608      	mov	r0, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	2200      	movs	r2, #0
 800aef4:	602a      	str	r2, [r5, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	f7f6 fff6 	bl	8001ee8 <_read>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_read_r+0x1e>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_read_r+0x1e>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20000640 	.word	0x20000640

0800af0c <_kill_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d07      	ldr	r5, [pc, #28]	; (800af2c <_kill_r+0x20>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	4611      	mov	r1, r2
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	f7f6 ffcb 	bl	8001eb4 <_kill>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d102      	bne.n	800af28 <_kill_r+0x1c>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	b103      	cbz	r3, 800af28 <_kill_r+0x1c>
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	bf00      	nop
 800af2c:	20000640 	.word	0x20000640

0800af30 <_getpid_r>:
 800af30:	f7f6 bfb8 	b.w	8001ea4 <_getpid>

0800af34 <_sbrk_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_sbrk_r+0x1c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	602b      	str	r3, [r5, #0]
 800af40:	f7f7 f840 	bl	8001fc4 <_sbrk>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_sbrk_r+0x1a>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_sbrk_r+0x1a>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20000640 	.word	0x20000640

0800af54 <_write_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_write_r+0x20>)
 800af58:	4604      	mov	r4, r0
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	602a      	str	r2, [r5, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f7f6 ffdd 	bl	8001f22 <_write>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_write_r+0x1e>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_write_r+0x1e>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	20000640 	.word	0x20000640

0800af78 <__errno>:
 800af78:	4b01      	ldr	r3, [pc, #4]	; (800af80 <__errno+0x8>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000074 	.word	0x20000074

0800af84 <__libc_init_array>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4d0d      	ldr	r5, [pc, #52]	; (800afbc <__libc_init_array+0x38>)
 800af88:	4c0d      	ldr	r4, [pc, #52]	; (800afc0 <__libc_init_array+0x3c>)
 800af8a:	1b64      	subs	r4, r4, r5
 800af8c:	10a4      	asrs	r4, r4, #2
 800af8e:	2600      	movs	r6, #0
 800af90:	42a6      	cmp	r6, r4
 800af92:	d109      	bne.n	800afa8 <__libc_init_array+0x24>
 800af94:	4d0b      	ldr	r5, [pc, #44]	; (800afc4 <__libc_init_array+0x40>)
 800af96:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <__libc_init_array+0x44>)
 800af98:	f000 fd62 	bl	800ba60 <_init>
 800af9c:	1b64      	subs	r4, r4, r5
 800af9e:	10a4      	asrs	r4, r4, #2
 800afa0:	2600      	movs	r6, #0
 800afa2:	42a6      	cmp	r6, r4
 800afa4:	d105      	bne.n	800afb2 <__libc_init_array+0x2e>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afac:	4798      	blx	r3
 800afae:	3601      	adds	r6, #1
 800afb0:	e7ee      	b.n	800af90 <__libc_init_array+0xc>
 800afb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb6:	4798      	blx	r3
 800afb8:	3601      	adds	r6, #1
 800afba:	e7f2      	b.n	800afa2 <__libc_init_array+0x1e>
 800afbc:	0800f030 	.word	0x0800f030
 800afc0:	0800f030 	.word	0x0800f030
 800afc4:	0800f030 	.word	0x0800f030
 800afc8:	0800f040 	.word	0x0800f040

0800afcc <__retarget_lock_init_recursive>:
 800afcc:	4770      	bx	lr

0800afce <__retarget_lock_acquire_recursive>:
 800afce:	4770      	bx	lr

0800afd0 <__retarget_lock_release_recursive>:
 800afd0:	4770      	bx	lr
	...

0800afd4 <__register_exitproc>:
 800afd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800b08c <__register_exitproc+0xb8>
 800afdc:	4606      	mov	r6, r0
 800afde:	f8d8 0000 	ldr.w	r0, [r8]
 800afe2:	461f      	mov	r7, r3
 800afe4:	460d      	mov	r5, r1
 800afe6:	4691      	mov	r9, r2
 800afe8:	f7ff fff1 	bl	800afce <__retarget_lock_acquire_recursive>
 800afec:	4b23      	ldr	r3, [pc, #140]	; (800b07c <__register_exitproc+0xa8>)
 800afee:	681c      	ldr	r4, [r3, #0]
 800aff0:	b934      	cbnz	r4, 800b000 <__register_exitproc+0x2c>
 800aff2:	4c23      	ldr	r4, [pc, #140]	; (800b080 <__register_exitproc+0xac>)
 800aff4:	601c      	str	r4, [r3, #0]
 800aff6:	4b23      	ldr	r3, [pc, #140]	; (800b084 <__register_exitproc+0xb0>)
 800aff8:	b113      	cbz	r3, 800b000 <__register_exitproc+0x2c>
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	2b1f      	cmp	r3, #31
 800b004:	dd07      	ble.n	800b016 <__register_exitproc+0x42>
 800b006:	f8d8 0000 	ldr.w	r0, [r8]
 800b00a:	f7ff ffe1 	bl	800afd0 <__retarget_lock_release_recursive>
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	b32e      	cbz	r6, 800b064 <__register_exitproc+0x90>
 800b018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800b01c:	b968      	cbnz	r0, 800b03a <__register_exitproc+0x66>
 800b01e:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <__register_exitproc+0xb4>)
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0f0      	beq.n	800b006 <__register_exitproc+0x32>
 800b024:	f44f 7084 	mov.w	r0, #264	; 0x108
 800b028:	f7ff fd30 	bl	800aa8c <malloc>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d0ea      	beq.n	800b006 <__register_exitproc+0x32>
 800b030:	2300      	movs	r3, #0
 800b032:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800b036:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800b03a:	6863      	ldr	r3, [r4, #4]
 800b03c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800b040:	2201      	movs	r2, #1
 800b042:	409a      	lsls	r2, r3
 800b044:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800b048:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800b04c:	4313      	orrs	r3, r2
 800b04e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800b052:	2e02      	cmp	r6, #2
 800b054:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800b058:	bf02      	ittt	eq
 800b05a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800b05e:	4313      	orreq	r3, r2
 800b060:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	f8d8 0000 	ldr.w	r0, [r8]
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	3302      	adds	r3, #2
 800b06e:	6062      	str	r2, [r4, #4]
 800b070:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800b074:	f7ff ffac 	bl	800afd0 <__retarget_lock_release_recursive>
 800b078:	2000      	movs	r0, #0
 800b07a:	e7ca      	b.n	800b012 <__register_exitproc+0x3e>
 800b07c:	200006d4 	.word	0x200006d4
 800b080:	20000648 	.word	0x20000648
 800b084:	0800ccd4 	.word	0x0800ccd4
 800b088:	0800aa8d 	.word	0x0800aa8d
 800b08c:	20000078 	.word	0x20000078

0800b090 <_free_r>:
 800b090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b092:	2900      	cmp	r1, #0
 800b094:	d044      	beq.n	800b120 <_free_r+0x90>
 800b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09a:	9001      	str	r0, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a2:	bfb8      	it	lt
 800b0a4:	18e4      	addlt	r4, r4, r3
 800b0a6:	f7ff fda1 	bl	800abec <__malloc_lock>
 800b0aa:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <_free_r+0x94>)
 800b0ac:	9801      	ldr	r0, [sp, #4]
 800b0ae:	6813      	ldr	r3, [r2, #0]
 800b0b0:	b933      	cbnz	r3, 800b0c0 <_free_r+0x30>
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	6014      	str	r4, [r2, #0]
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0bc:	f7ff bd9c 	b.w	800abf8 <__malloc_unlock>
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d908      	bls.n	800b0d6 <_free_r+0x46>
 800b0c4:	6825      	ldr	r5, [r4, #0]
 800b0c6:	1961      	adds	r1, r4, r5
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf01      	itttt	eq
 800b0cc:	6819      	ldreq	r1, [r3, #0]
 800b0ce:	685b      	ldreq	r3, [r3, #4]
 800b0d0:	1949      	addeq	r1, r1, r5
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	e7ed      	b.n	800b0b2 <_free_r+0x22>
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b10b      	cbz	r3, 800b0e0 <_free_r+0x50>
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d9fa      	bls.n	800b0d6 <_free_r+0x46>
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	1855      	adds	r5, r2, r1
 800b0e4:	42a5      	cmp	r5, r4
 800b0e6:	d10b      	bne.n	800b100 <_free_r+0x70>
 800b0e8:	6824      	ldr	r4, [r4, #0]
 800b0ea:	4421      	add	r1, r4
 800b0ec:	1854      	adds	r4, r2, r1
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	d1e0      	bne.n	800b0b6 <_free_r+0x26>
 800b0f4:	681c      	ldr	r4, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	6053      	str	r3, [r2, #4]
 800b0fa:	440c      	add	r4, r1
 800b0fc:	6014      	str	r4, [r2, #0]
 800b0fe:	e7da      	b.n	800b0b6 <_free_r+0x26>
 800b100:	d902      	bls.n	800b108 <_free_r+0x78>
 800b102:	230c      	movs	r3, #12
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	e7d6      	b.n	800b0b6 <_free_r+0x26>
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf04      	itt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	6063      	str	r3, [r4, #4]
 800b116:	bf04      	itt	eq
 800b118:	1949      	addeq	r1, r1, r5
 800b11a:	6021      	streq	r1, [r4, #0]
 800b11c:	6054      	str	r4, [r2, #4]
 800b11e:	e7ca      	b.n	800b0b6 <_free_r+0x26>
 800b120:	b003      	add	sp, #12
 800b122:	bd30      	pop	{r4, r5, pc}
 800b124:	200004fc 	.word	0x200004fc

0800b128 <__sfputc_r>:
 800b128:	6893      	ldr	r3, [r2, #8]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	b410      	push	{r4}
 800b130:	6093      	str	r3, [r2, #8]
 800b132:	da08      	bge.n	800b146 <__sfputc_r+0x1e>
 800b134:	6994      	ldr	r4, [r2, #24]
 800b136:	42a3      	cmp	r3, r4
 800b138:	db01      	blt.n	800b13e <__sfputc_r+0x16>
 800b13a:	290a      	cmp	r1, #10
 800b13c:	d103      	bne.n	800b146 <__sfputc_r+0x1e>
 800b13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b142:	f000 bb73 	b.w	800b82c <__swbuf_r>
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	1c58      	adds	r0, r3, #1
 800b14a:	6010      	str	r0, [r2, #0]
 800b14c:	7019      	strb	r1, [r3, #0]
 800b14e:	4608      	mov	r0, r1
 800b150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <__sfputs_r>:
 800b156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	4614      	mov	r4, r2
 800b15e:	18d5      	adds	r5, r2, r3
 800b160:	42ac      	cmp	r4, r5
 800b162:	d101      	bne.n	800b168 <__sfputs_r+0x12>
 800b164:	2000      	movs	r0, #0
 800b166:	e007      	b.n	800b178 <__sfputs_r+0x22>
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	463a      	mov	r2, r7
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffda 	bl	800b128 <__sfputc_r>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d1f3      	bne.n	800b160 <__sfputs_r+0xa>
 800b178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b17c <_vfiprintf_r>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	460d      	mov	r5, r1
 800b182:	b09d      	sub	sp, #116	; 0x74
 800b184:	4614      	mov	r4, r2
 800b186:	4698      	mov	r8, r3
 800b188:	4606      	mov	r6, r0
 800b18a:	b118      	cbz	r0, 800b194 <_vfiprintf_r+0x18>
 800b18c:	6a03      	ldr	r3, [r0, #32]
 800b18e:	b90b      	cbnz	r3, 800b194 <_vfiprintf_r+0x18>
 800b190:	f7ff fdc4 	bl	800ad1c <__sinit>
 800b194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b196:	07d9      	lsls	r1, r3, #31
 800b198:	d405      	bmi.n	800b1a6 <_vfiprintf_r+0x2a>
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	059a      	lsls	r2, r3, #22
 800b19e:	d402      	bmi.n	800b1a6 <_vfiprintf_r+0x2a>
 800b1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a2:	f7ff ff14 	bl	800afce <__retarget_lock_acquire_recursive>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	071b      	lsls	r3, r3, #28
 800b1aa:	d501      	bpl.n	800b1b0 <_vfiprintf_r+0x34>
 800b1ac:	692b      	ldr	r3, [r5, #16]
 800b1ae:	b99b      	cbnz	r3, 800b1d8 <_vfiprintf_r+0x5c>
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 fb78 	bl	800b8a8 <__swsetup_r>
 800b1b8:	b170      	cbz	r0, 800b1d8 <_vfiprintf_r+0x5c>
 800b1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1bc:	07dc      	lsls	r4, r3, #31
 800b1be:	d504      	bpl.n	800b1ca <_vfiprintf_r+0x4e>
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	b01d      	add	sp, #116	; 0x74
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	0598      	lsls	r0, r3, #22
 800b1ce:	d4f7      	bmi.n	800b1c0 <_vfiprintf_r+0x44>
 800b1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d2:	f7ff fefd 	bl	800afd0 <__retarget_lock_release_recursive>
 800b1d6:	e7f3      	b.n	800b1c0 <_vfiprintf_r+0x44>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9309      	str	r3, [sp, #36]	; 0x24
 800b1dc:	2320      	movs	r3, #32
 800b1de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1e6:	2330      	movs	r3, #48	; 0x30
 800b1e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b39c <_vfiprintf_r+0x220>
 800b1ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f0:	f04f 0901 	mov.w	r9, #1
 800b1f4:	4623      	mov	r3, r4
 800b1f6:	469a      	mov	sl, r3
 800b1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1fc:	b10a      	cbz	r2, 800b202 <_vfiprintf_r+0x86>
 800b1fe:	2a25      	cmp	r2, #37	; 0x25
 800b200:	d1f9      	bne.n	800b1f6 <_vfiprintf_r+0x7a>
 800b202:	ebba 0b04 	subs.w	fp, sl, r4
 800b206:	d00b      	beq.n	800b220 <_vfiprintf_r+0xa4>
 800b208:	465b      	mov	r3, fp
 800b20a:	4622      	mov	r2, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	4630      	mov	r0, r6
 800b210:	f7ff ffa1 	bl	800b156 <__sfputs_r>
 800b214:	3001      	adds	r0, #1
 800b216:	f000 80a9 	beq.w	800b36c <_vfiprintf_r+0x1f0>
 800b21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b21c:	445a      	add	r2, fp
 800b21e:	9209      	str	r2, [sp, #36]	; 0x24
 800b220:	f89a 3000 	ldrb.w	r3, [sl]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80a1 	beq.w	800b36c <_vfiprintf_r+0x1f0>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b234:	f10a 0a01 	add.w	sl, sl, #1
 800b238:	9304      	str	r3, [sp, #16]
 800b23a:	9307      	str	r3, [sp, #28]
 800b23c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b240:	931a      	str	r3, [sp, #104]	; 0x68
 800b242:	4654      	mov	r4, sl
 800b244:	2205      	movs	r2, #5
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	4854      	ldr	r0, [pc, #336]	; (800b39c <_vfiprintf_r+0x220>)
 800b24c:	f7f4 ffe8 	bl	8000220 <memchr>
 800b250:	9a04      	ldr	r2, [sp, #16]
 800b252:	b9d8      	cbnz	r0, 800b28c <_vfiprintf_r+0x110>
 800b254:	06d1      	lsls	r1, r2, #27
 800b256:	bf44      	itt	mi
 800b258:	2320      	movmi	r3, #32
 800b25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b25e:	0713      	lsls	r3, r2, #28
 800b260:	bf44      	itt	mi
 800b262:	232b      	movmi	r3, #43	; 0x2b
 800b264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b268:	f89a 3000 	ldrb.w	r3, [sl]
 800b26c:	2b2a      	cmp	r3, #42	; 0x2a
 800b26e:	d015      	beq.n	800b29c <_vfiprintf_r+0x120>
 800b270:	9a07      	ldr	r2, [sp, #28]
 800b272:	4654      	mov	r4, sl
 800b274:	2000      	movs	r0, #0
 800b276:	f04f 0c0a 	mov.w	ip, #10
 800b27a:	4621      	mov	r1, r4
 800b27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b280:	3b30      	subs	r3, #48	; 0x30
 800b282:	2b09      	cmp	r3, #9
 800b284:	d94d      	bls.n	800b322 <_vfiprintf_r+0x1a6>
 800b286:	b1b0      	cbz	r0, 800b2b6 <_vfiprintf_r+0x13a>
 800b288:	9207      	str	r2, [sp, #28]
 800b28a:	e014      	b.n	800b2b6 <_vfiprintf_r+0x13a>
 800b28c:	eba0 0308 	sub.w	r3, r0, r8
 800b290:	fa09 f303 	lsl.w	r3, r9, r3
 800b294:	4313      	orrs	r3, r2
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	46a2      	mov	sl, r4
 800b29a:	e7d2      	b.n	800b242 <_vfiprintf_r+0xc6>
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	1d19      	adds	r1, r3, #4
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	9103      	str	r1, [sp, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfbb      	ittet	lt
 800b2a8:	425b      	neglt	r3, r3
 800b2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ae:	9307      	strge	r3, [sp, #28]
 800b2b0:	9307      	strlt	r3, [sp, #28]
 800b2b2:	bfb8      	it	lt
 800b2b4:	9204      	strlt	r2, [sp, #16]
 800b2b6:	7823      	ldrb	r3, [r4, #0]
 800b2b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ba:	d10c      	bne.n	800b2d6 <_vfiprintf_r+0x15a>
 800b2bc:	7863      	ldrb	r3, [r4, #1]
 800b2be:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c0:	d134      	bne.n	800b32c <_vfiprintf_r+0x1b0>
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	1d1a      	adds	r2, r3, #4
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	9203      	str	r2, [sp, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	bfb8      	it	lt
 800b2ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d2:	3402      	adds	r4, #2
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b3ac <_vfiprintf_r+0x230>
 800b2da:	7821      	ldrb	r1, [r4, #0]
 800b2dc:	2203      	movs	r2, #3
 800b2de:	4650      	mov	r0, sl
 800b2e0:	f7f4 ff9e 	bl	8000220 <memchr>
 800b2e4:	b138      	cbz	r0, 800b2f6 <_vfiprintf_r+0x17a>
 800b2e6:	9b04      	ldr	r3, [sp, #16]
 800b2e8:	eba0 000a 	sub.w	r0, r0, sl
 800b2ec:	2240      	movs	r2, #64	; 0x40
 800b2ee:	4082      	lsls	r2, r0
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	9304      	str	r3, [sp, #16]
 800b2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fa:	4829      	ldr	r0, [pc, #164]	; (800b3a0 <_vfiprintf_r+0x224>)
 800b2fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b300:	2206      	movs	r2, #6
 800b302:	f7f4 ff8d 	bl	8000220 <memchr>
 800b306:	2800      	cmp	r0, #0
 800b308:	d03f      	beq.n	800b38a <_vfiprintf_r+0x20e>
 800b30a:	4b26      	ldr	r3, [pc, #152]	; (800b3a4 <_vfiprintf_r+0x228>)
 800b30c:	bb1b      	cbnz	r3, 800b356 <_vfiprintf_r+0x1da>
 800b30e:	9b03      	ldr	r3, [sp, #12]
 800b310:	3307      	adds	r3, #7
 800b312:	f023 0307 	bic.w	r3, r3, #7
 800b316:	3308      	adds	r3, #8
 800b318:	9303      	str	r3, [sp, #12]
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	443b      	add	r3, r7
 800b31e:	9309      	str	r3, [sp, #36]	; 0x24
 800b320:	e768      	b.n	800b1f4 <_vfiprintf_r+0x78>
 800b322:	fb0c 3202 	mla	r2, ip, r2, r3
 800b326:	460c      	mov	r4, r1
 800b328:	2001      	movs	r0, #1
 800b32a:	e7a6      	b.n	800b27a <_vfiprintf_r+0xfe>
 800b32c:	2300      	movs	r3, #0
 800b32e:	3401      	adds	r4, #1
 800b330:	9305      	str	r3, [sp, #20]
 800b332:	4619      	mov	r1, r3
 800b334:	f04f 0c0a 	mov.w	ip, #10
 800b338:	4620      	mov	r0, r4
 800b33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b33e:	3a30      	subs	r2, #48	; 0x30
 800b340:	2a09      	cmp	r2, #9
 800b342:	d903      	bls.n	800b34c <_vfiprintf_r+0x1d0>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0c6      	beq.n	800b2d6 <_vfiprintf_r+0x15a>
 800b348:	9105      	str	r1, [sp, #20]
 800b34a:	e7c4      	b.n	800b2d6 <_vfiprintf_r+0x15a>
 800b34c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b350:	4604      	mov	r4, r0
 800b352:	2301      	movs	r3, #1
 800b354:	e7f0      	b.n	800b338 <_vfiprintf_r+0x1bc>
 800b356:	ab03      	add	r3, sp, #12
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	462a      	mov	r2, r5
 800b35c:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <_vfiprintf_r+0x22c>)
 800b35e:	a904      	add	r1, sp, #16
 800b360:	4630      	mov	r0, r6
 800b362:	f3af 8000 	nop.w
 800b366:	4607      	mov	r7, r0
 800b368:	1c78      	adds	r0, r7, #1
 800b36a:	d1d6      	bne.n	800b31a <_vfiprintf_r+0x19e>
 800b36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b36e:	07d9      	lsls	r1, r3, #31
 800b370:	d405      	bmi.n	800b37e <_vfiprintf_r+0x202>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d402      	bmi.n	800b37e <_vfiprintf_r+0x202>
 800b378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37a:	f7ff fe29 	bl	800afd0 <__retarget_lock_release_recursive>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	065b      	lsls	r3, r3, #25
 800b382:	f53f af1d 	bmi.w	800b1c0 <_vfiprintf_r+0x44>
 800b386:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b388:	e71c      	b.n	800b1c4 <_vfiprintf_r+0x48>
 800b38a:	ab03      	add	r3, sp, #12
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462a      	mov	r2, r5
 800b390:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <_vfiprintf_r+0x22c>)
 800b392:	a904      	add	r1, sp, #16
 800b394:	4630      	mov	r0, r6
 800b396:	f000 f879 	bl	800b48c <_printf_i>
 800b39a:	e7e4      	b.n	800b366 <_vfiprintf_r+0x1ea>
 800b39c:	0800ccd8 	.word	0x0800ccd8
 800b3a0:	0800cce2 	.word	0x0800cce2
 800b3a4:	00000000 	.word	0x00000000
 800b3a8:	0800b157 	.word	0x0800b157
 800b3ac:	0800ccde 	.word	0x0800ccde

0800b3b0 <_printf_common>:
 800b3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	4699      	mov	r9, r3
 800b3b8:	688a      	ldr	r2, [r1, #8]
 800b3ba:	690b      	ldr	r3, [r1, #16]
 800b3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	bfb8      	it	lt
 800b3c4:	4613      	movlt	r3, r2
 800b3c6:	6033      	str	r3, [r6, #0]
 800b3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	b10a      	cbz	r2, 800b3d6 <_printf_common+0x26>
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	6033      	str	r3, [r6, #0]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	0699      	lsls	r1, r3, #26
 800b3da:	bf42      	ittt	mi
 800b3dc:	6833      	ldrmi	r3, [r6, #0]
 800b3de:	3302      	addmi	r3, #2
 800b3e0:	6033      	strmi	r3, [r6, #0]
 800b3e2:	6825      	ldr	r5, [r4, #0]
 800b3e4:	f015 0506 	ands.w	r5, r5, #6
 800b3e8:	d106      	bne.n	800b3f8 <_printf_common+0x48>
 800b3ea:	f104 0a19 	add.w	sl, r4, #25
 800b3ee:	68e3      	ldr	r3, [r4, #12]
 800b3f0:	6832      	ldr	r2, [r6, #0]
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dc26      	bgt.n	800b446 <_printf_common+0x96>
 800b3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3fc:	1e13      	subs	r3, r2, #0
 800b3fe:	6822      	ldr	r2, [r4, #0]
 800b400:	bf18      	it	ne
 800b402:	2301      	movne	r3, #1
 800b404:	0692      	lsls	r2, r2, #26
 800b406:	d42b      	bmi.n	800b460 <_printf_common+0xb0>
 800b408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b40c:	4649      	mov	r1, r9
 800b40e:	4638      	mov	r0, r7
 800b410:	47c0      	blx	r8
 800b412:	3001      	adds	r0, #1
 800b414:	d01e      	beq.n	800b454 <_printf_common+0xa4>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	6922      	ldr	r2, [r4, #16]
 800b41a:	f003 0306 	and.w	r3, r3, #6
 800b41e:	2b04      	cmp	r3, #4
 800b420:	bf02      	ittt	eq
 800b422:	68e5      	ldreq	r5, [r4, #12]
 800b424:	6833      	ldreq	r3, [r6, #0]
 800b426:	1aed      	subeq	r5, r5, r3
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	bf0c      	ite	eq
 800b42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b430:	2500      	movne	r5, #0
 800b432:	4293      	cmp	r3, r2
 800b434:	bfc4      	itt	gt
 800b436:	1a9b      	subgt	r3, r3, r2
 800b438:	18ed      	addgt	r5, r5, r3
 800b43a:	2600      	movs	r6, #0
 800b43c:	341a      	adds	r4, #26
 800b43e:	42b5      	cmp	r5, r6
 800b440:	d11a      	bne.n	800b478 <_printf_common+0xc8>
 800b442:	2000      	movs	r0, #0
 800b444:	e008      	b.n	800b458 <_printf_common+0xa8>
 800b446:	2301      	movs	r3, #1
 800b448:	4652      	mov	r2, sl
 800b44a:	4649      	mov	r1, r9
 800b44c:	4638      	mov	r0, r7
 800b44e:	47c0      	blx	r8
 800b450:	3001      	adds	r0, #1
 800b452:	d103      	bne.n	800b45c <_printf_common+0xac>
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45c:	3501      	adds	r5, #1
 800b45e:	e7c6      	b.n	800b3ee <_printf_common+0x3e>
 800b460:	18e1      	adds	r1, r4, r3
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	2030      	movs	r0, #48	; 0x30
 800b466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b46a:	4422      	add	r2, r4
 800b46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b474:	3302      	adds	r3, #2
 800b476:	e7c7      	b.n	800b408 <_printf_common+0x58>
 800b478:	2301      	movs	r3, #1
 800b47a:	4622      	mov	r2, r4
 800b47c:	4649      	mov	r1, r9
 800b47e:	4638      	mov	r0, r7
 800b480:	47c0      	blx	r8
 800b482:	3001      	adds	r0, #1
 800b484:	d0e6      	beq.n	800b454 <_printf_common+0xa4>
 800b486:	3601      	adds	r6, #1
 800b488:	e7d9      	b.n	800b43e <_printf_common+0x8e>
	...

0800b48c <_printf_i>:
 800b48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	7e0f      	ldrb	r7, [r1, #24]
 800b492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b494:	2f78      	cmp	r7, #120	; 0x78
 800b496:	4691      	mov	r9, r2
 800b498:	4680      	mov	r8, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	469a      	mov	sl, r3
 800b49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4a2:	d807      	bhi.n	800b4b4 <_printf_i+0x28>
 800b4a4:	2f62      	cmp	r7, #98	; 0x62
 800b4a6:	d80a      	bhi.n	800b4be <_printf_i+0x32>
 800b4a8:	2f00      	cmp	r7, #0
 800b4aa:	f000 80d4 	beq.w	800b656 <_printf_i+0x1ca>
 800b4ae:	2f58      	cmp	r7, #88	; 0x58
 800b4b0:	f000 80c0 	beq.w	800b634 <_printf_i+0x1a8>
 800b4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4bc:	e03a      	b.n	800b534 <_printf_i+0xa8>
 800b4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4c2:	2b15      	cmp	r3, #21
 800b4c4:	d8f6      	bhi.n	800b4b4 <_printf_i+0x28>
 800b4c6:	a101      	add	r1, pc, #4	; (adr r1, 800b4cc <_printf_i+0x40>)
 800b4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4cc:	0800b525 	.word	0x0800b525
 800b4d0:	0800b539 	.word	0x0800b539
 800b4d4:	0800b4b5 	.word	0x0800b4b5
 800b4d8:	0800b4b5 	.word	0x0800b4b5
 800b4dc:	0800b4b5 	.word	0x0800b4b5
 800b4e0:	0800b4b5 	.word	0x0800b4b5
 800b4e4:	0800b539 	.word	0x0800b539
 800b4e8:	0800b4b5 	.word	0x0800b4b5
 800b4ec:	0800b4b5 	.word	0x0800b4b5
 800b4f0:	0800b4b5 	.word	0x0800b4b5
 800b4f4:	0800b4b5 	.word	0x0800b4b5
 800b4f8:	0800b63d 	.word	0x0800b63d
 800b4fc:	0800b565 	.word	0x0800b565
 800b500:	0800b5f7 	.word	0x0800b5f7
 800b504:	0800b4b5 	.word	0x0800b4b5
 800b508:	0800b4b5 	.word	0x0800b4b5
 800b50c:	0800b65f 	.word	0x0800b65f
 800b510:	0800b4b5 	.word	0x0800b4b5
 800b514:	0800b565 	.word	0x0800b565
 800b518:	0800b4b5 	.word	0x0800b4b5
 800b51c:	0800b4b5 	.word	0x0800b4b5
 800b520:	0800b5ff 	.word	0x0800b5ff
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	1d1a      	adds	r2, r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	602a      	str	r2, [r5, #0]
 800b52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b534:	2301      	movs	r3, #1
 800b536:	e09f      	b.n	800b678 <_printf_i+0x1ec>
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	0607      	lsls	r7, r0, #24
 800b53e:	f103 0104 	add.w	r1, r3, #4
 800b542:	6029      	str	r1, [r5, #0]
 800b544:	d501      	bpl.n	800b54a <_printf_i+0xbe>
 800b546:	681e      	ldr	r6, [r3, #0]
 800b548:	e003      	b.n	800b552 <_printf_i+0xc6>
 800b54a:	0646      	lsls	r6, r0, #25
 800b54c:	d5fb      	bpl.n	800b546 <_printf_i+0xba>
 800b54e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b552:	2e00      	cmp	r6, #0
 800b554:	da03      	bge.n	800b55e <_printf_i+0xd2>
 800b556:	232d      	movs	r3, #45	; 0x2d
 800b558:	4276      	negs	r6, r6
 800b55a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b55e:	485a      	ldr	r0, [pc, #360]	; (800b6c8 <_printf_i+0x23c>)
 800b560:	230a      	movs	r3, #10
 800b562:	e012      	b.n	800b58a <_printf_i+0xfe>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	6820      	ldr	r0, [r4, #0]
 800b568:	1d19      	adds	r1, r3, #4
 800b56a:	6029      	str	r1, [r5, #0]
 800b56c:	0605      	lsls	r5, r0, #24
 800b56e:	d501      	bpl.n	800b574 <_printf_i+0xe8>
 800b570:	681e      	ldr	r6, [r3, #0]
 800b572:	e002      	b.n	800b57a <_printf_i+0xee>
 800b574:	0641      	lsls	r1, r0, #25
 800b576:	d5fb      	bpl.n	800b570 <_printf_i+0xe4>
 800b578:	881e      	ldrh	r6, [r3, #0]
 800b57a:	4853      	ldr	r0, [pc, #332]	; (800b6c8 <_printf_i+0x23c>)
 800b57c:	2f6f      	cmp	r7, #111	; 0x6f
 800b57e:	bf0c      	ite	eq
 800b580:	2308      	moveq	r3, #8
 800b582:	230a      	movne	r3, #10
 800b584:	2100      	movs	r1, #0
 800b586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b58a:	6865      	ldr	r5, [r4, #4]
 800b58c:	60a5      	str	r5, [r4, #8]
 800b58e:	2d00      	cmp	r5, #0
 800b590:	bfa2      	ittt	ge
 800b592:	6821      	ldrge	r1, [r4, #0]
 800b594:	f021 0104 	bicge.w	r1, r1, #4
 800b598:	6021      	strge	r1, [r4, #0]
 800b59a:	b90e      	cbnz	r6, 800b5a0 <_printf_i+0x114>
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	d04b      	beq.n	800b638 <_printf_i+0x1ac>
 800b5a0:	4615      	mov	r5, r2
 800b5a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5a6:	fb03 6711 	mls	r7, r3, r1, r6
 800b5aa:	5dc7      	ldrb	r7, [r0, r7]
 800b5ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5b0:	4637      	mov	r7, r6
 800b5b2:	42bb      	cmp	r3, r7
 800b5b4:	460e      	mov	r6, r1
 800b5b6:	d9f4      	bls.n	800b5a2 <_printf_i+0x116>
 800b5b8:	2b08      	cmp	r3, #8
 800b5ba:	d10b      	bne.n	800b5d4 <_printf_i+0x148>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	07de      	lsls	r6, r3, #31
 800b5c0:	d508      	bpl.n	800b5d4 <_printf_i+0x148>
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	6861      	ldr	r1, [r4, #4]
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	bfde      	ittt	le
 800b5ca:	2330      	movle	r3, #48	; 0x30
 800b5cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5d4:	1b52      	subs	r2, r2, r5
 800b5d6:	6122      	str	r2, [r4, #16]
 800b5d8:	f8cd a000 	str.w	sl, [sp]
 800b5dc:	464b      	mov	r3, r9
 800b5de:	aa03      	add	r2, sp, #12
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	f7ff fee4 	bl	800b3b0 <_printf_common>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d14a      	bne.n	800b682 <_printf_i+0x1f6>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	b004      	add	sp, #16
 800b5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	f043 0320 	orr.w	r3, r3, #32
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	4833      	ldr	r0, [pc, #204]	; (800b6cc <_printf_i+0x240>)
 800b600:	2778      	movs	r7, #120	; 0x78
 800b602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	6829      	ldr	r1, [r5, #0]
 800b60a:	061f      	lsls	r7, r3, #24
 800b60c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b610:	d402      	bmi.n	800b618 <_printf_i+0x18c>
 800b612:	065f      	lsls	r7, r3, #25
 800b614:	bf48      	it	mi
 800b616:	b2b6      	uxthmi	r6, r6
 800b618:	07df      	lsls	r7, r3, #31
 800b61a:	bf48      	it	mi
 800b61c:	f043 0320 	orrmi.w	r3, r3, #32
 800b620:	6029      	str	r1, [r5, #0]
 800b622:	bf48      	it	mi
 800b624:	6023      	strmi	r3, [r4, #0]
 800b626:	b91e      	cbnz	r6, 800b630 <_printf_i+0x1a4>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	f023 0320 	bic.w	r3, r3, #32
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	2310      	movs	r3, #16
 800b632:	e7a7      	b.n	800b584 <_printf_i+0xf8>
 800b634:	4824      	ldr	r0, [pc, #144]	; (800b6c8 <_printf_i+0x23c>)
 800b636:	e7e4      	b.n	800b602 <_printf_i+0x176>
 800b638:	4615      	mov	r5, r2
 800b63a:	e7bd      	b.n	800b5b8 <_printf_i+0x12c>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	6826      	ldr	r6, [r4, #0]
 800b640:	6961      	ldr	r1, [r4, #20]
 800b642:	1d18      	adds	r0, r3, #4
 800b644:	6028      	str	r0, [r5, #0]
 800b646:	0635      	lsls	r5, r6, #24
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	d501      	bpl.n	800b650 <_printf_i+0x1c4>
 800b64c:	6019      	str	r1, [r3, #0]
 800b64e:	e002      	b.n	800b656 <_printf_i+0x1ca>
 800b650:	0670      	lsls	r0, r6, #25
 800b652:	d5fb      	bpl.n	800b64c <_printf_i+0x1c0>
 800b654:	8019      	strh	r1, [r3, #0]
 800b656:	2300      	movs	r3, #0
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	4615      	mov	r5, r2
 800b65c:	e7bc      	b.n	800b5d8 <_printf_i+0x14c>
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	1d1a      	adds	r2, r3, #4
 800b662:	602a      	str	r2, [r5, #0]
 800b664:	681d      	ldr	r5, [r3, #0]
 800b666:	6862      	ldr	r2, [r4, #4]
 800b668:	2100      	movs	r1, #0
 800b66a:	4628      	mov	r0, r5
 800b66c:	f7f4 fdd8 	bl	8000220 <memchr>
 800b670:	b108      	cbz	r0, 800b676 <_printf_i+0x1ea>
 800b672:	1b40      	subs	r0, r0, r5
 800b674:	6060      	str	r0, [r4, #4]
 800b676:	6863      	ldr	r3, [r4, #4]
 800b678:	6123      	str	r3, [r4, #16]
 800b67a:	2300      	movs	r3, #0
 800b67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b680:	e7aa      	b.n	800b5d8 <_printf_i+0x14c>
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	462a      	mov	r2, r5
 800b686:	4649      	mov	r1, r9
 800b688:	4640      	mov	r0, r8
 800b68a:	47d0      	blx	sl
 800b68c:	3001      	adds	r0, #1
 800b68e:	d0ad      	beq.n	800b5ec <_printf_i+0x160>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	079b      	lsls	r3, r3, #30
 800b694:	d413      	bmi.n	800b6be <_printf_i+0x232>
 800b696:	68e0      	ldr	r0, [r4, #12]
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	4298      	cmp	r0, r3
 800b69c:	bfb8      	it	lt
 800b69e:	4618      	movlt	r0, r3
 800b6a0:	e7a6      	b.n	800b5f0 <_printf_i+0x164>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	47d0      	blx	sl
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d09d      	beq.n	800b5ec <_printf_i+0x160>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	9903      	ldr	r1, [sp, #12]
 800b6b6:	1a5b      	subs	r3, r3, r1
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	dcf2      	bgt.n	800b6a2 <_printf_i+0x216>
 800b6bc:	e7eb      	b.n	800b696 <_printf_i+0x20a>
 800b6be:	2500      	movs	r5, #0
 800b6c0:	f104 0619 	add.w	r6, r4, #25
 800b6c4:	e7f5      	b.n	800b6b2 <_printf_i+0x226>
 800b6c6:	bf00      	nop
 800b6c8:	0800cce9 	.word	0x0800cce9
 800b6cc:	0800ccfa 	.word	0x0800ccfa

0800b6d0 <__sflush_r>:
 800b6d0:	898a      	ldrh	r2, [r1, #12]
 800b6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	0710      	lsls	r0, r2, #28
 800b6da:	460c      	mov	r4, r1
 800b6dc:	d458      	bmi.n	800b790 <__sflush_r+0xc0>
 800b6de:	684b      	ldr	r3, [r1, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc05      	bgt.n	800b6f0 <__sflush_r+0x20>
 800b6e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dc02      	bgt.n	800b6f0 <__sflush_r+0x20>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	d0f9      	beq.n	800b6ea <__sflush_r+0x1a>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6fc:	682f      	ldr	r7, [r5, #0]
 800b6fe:	6a21      	ldr	r1, [r4, #32]
 800b700:	602b      	str	r3, [r5, #0]
 800b702:	d032      	beq.n	800b76a <__sflush_r+0x9a>
 800b704:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	075a      	lsls	r2, r3, #29
 800b70a:	d505      	bpl.n	800b718 <__sflush_r+0x48>
 800b70c:	6863      	ldr	r3, [r4, #4]
 800b70e:	1ac0      	subs	r0, r0, r3
 800b710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b712:	b10b      	cbz	r3, 800b718 <__sflush_r+0x48>
 800b714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b716:	1ac0      	subs	r0, r0, r3
 800b718:	2300      	movs	r3, #0
 800b71a:	4602      	mov	r2, r0
 800b71c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	4628      	mov	r0, r5
 800b722:	47b0      	blx	r6
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	d106      	bne.n	800b738 <__sflush_r+0x68>
 800b72a:	6829      	ldr	r1, [r5, #0]
 800b72c:	291d      	cmp	r1, #29
 800b72e:	d82b      	bhi.n	800b788 <__sflush_r+0xb8>
 800b730:	4a29      	ldr	r2, [pc, #164]	; (800b7d8 <__sflush_r+0x108>)
 800b732:	410a      	asrs	r2, r1
 800b734:	07d6      	lsls	r6, r2, #31
 800b736:	d427      	bmi.n	800b788 <__sflush_r+0xb8>
 800b738:	2200      	movs	r2, #0
 800b73a:	6062      	str	r2, [r4, #4]
 800b73c:	04d9      	lsls	r1, r3, #19
 800b73e:	6922      	ldr	r2, [r4, #16]
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	d504      	bpl.n	800b74e <__sflush_r+0x7e>
 800b744:	1c42      	adds	r2, r0, #1
 800b746:	d101      	bne.n	800b74c <__sflush_r+0x7c>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b903      	cbnz	r3, 800b74e <__sflush_r+0x7e>
 800b74c:	6560      	str	r0, [r4, #84]	; 0x54
 800b74e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b750:	602f      	str	r7, [r5, #0]
 800b752:	2900      	cmp	r1, #0
 800b754:	d0c9      	beq.n	800b6ea <__sflush_r+0x1a>
 800b756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75a:	4299      	cmp	r1, r3
 800b75c:	d002      	beq.n	800b764 <__sflush_r+0x94>
 800b75e:	4628      	mov	r0, r5
 800b760:	f7ff fc96 	bl	800b090 <_free_r>
 800b764:	2000      	movs	r0, #0
 800b766:	6360      	str	r0, [r4, #52]	; 0x34
 800b768:	e7c0      	b.n	800b6ec <__sflush_r+0x1c>
 800b76a:	2301      	movs	r3, #1
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b0      	blx	r6
 800b770:	1c41      	adds	r1, r0, #1
 800b772:	d1c8      	bne.n	800b706 <__sflush_r+0x36>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0c5      	beq.n	800b706 <__sflush_r+0x36>
 800b77a:	2b1d      	cmp	r3, #29
 800b77c:	d001      	beq.n	800b782 <__sflush_r+0xb2>
 800b77e:	2b16      	cmp	r3, #22
 800b780:	d101      	bne.n	800b786 <__sflush_r+0xb6>
 800b782:	602f      	str	r7, [r5, #0]
 800b784:	e7b1      	b.n	800b6ea <__sflush_r+0x1a>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	e7ad      	b.n	800b6ec <__sflush_r+0x1c>
 800b790:	690f      	ldr	r7, [r1, #16]
 800b792:	2f00      	cmp	r7, #0
 800b794:	d0a9      	beq.n	800b6ea <__sflush_r+0x1a>
 800b796:	0793      	lsls	r3, r2, #30
 800b798:	680e      	ldr	r6, [r1, #0]
 800b79a:	bf08      	it	eq
 800b79c:	694b      	ldreq	r3, [r1, #20]
 800b79e:	600f      	str	r7, [r1, #0]
 800b7a0:	bf18      	it	ne
 800b7a2:	2300      	movne	r3, #0
 800b7a4:	eba6 0807 	sub.w	r8, r6, r7
 800b7a8:	608b      	str	r3, [r1, #8]
 800b7aa:	f1b8 0f00 	cmp.w	r8, #0
 800b7ae:	dd9c      	ble.n	800b6ea <__sflush_r+0x1a>
 800b7b0:	6a21      	ldr	r1, [r4, #32]
 800b7b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b4:	4643      	mov	r3, r8
 800b7b6:	463a      	mov	r2, r7
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	dc06      	bgt.n	800b7ce <__sflush_r+0xfe>
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e78e      	b.n	800b6ec <__sflush_r+0x1c>
 800b7ce:	4407      	add	r7, r0
 800b7d0:	eba8 0800 	sub.w	r8, r8, r0
 800b7d4:	e7e9      	b.n	800b7aa <__sflush_r+0xda>
 800b7d6:	bf00      	nop
 800b7d8:	dfbffffe 	.word	0xdfbffffe

0800b7dc <_fflush_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	690b      	ldr	r3, [r1, #16]
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	b913      	cbnz	r3, 800b7ec <_fflush_r+0x10>
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	b118      	cbz	r0, 800b7f6 <_fflush_r+0x1a>
 800b7ee:	6a03      	ldr	r3, [r0, #32]
 800b7f0:	b90b      	cbnz	r3, 800b7f6 <_fflush_r+0x1a>
 800b7f2:	f7ff fa93 	bl	800ad1c <__sinit>
 800b7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f3      	beq.n	800b7e6 <_fflush_r+0xa>
 800b7fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b800:	07d0      	lsls	r0, r2, #31
 800b802:	d404      	bmi.n	800b80e <_fflush_r+0x32>
 800b804:	0599      	lsls	r1, r3, #22
 800b806:	d402      	bmi.n	800b80e <_fflush_r+0x32>
 800b808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b80a:	f7ff fbe0 	bl	800afce <__retarget_lock_acquire_recursive>
 800b80e:	4628      	mov	r0, r5
 800b810:	4621      	mov	r1, r4
 800b812:	f7ff ff5d 	bl	800b6d0 <__sflush_r>
 800b816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b818:	07da      	lsls	r2, r3, #31
 800b81a:	4605      	mov	r5, r0
 800b81c:	d4e4      	bmi.n	800b7e8 <_fflush_r+0xc>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	059b      	lsls	r3, r3, #22
 800b822:	d4e1      	bmi.n	800b7e8 <_fflush_r+0xc>
 800b824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b826:	f7ff fbd3 	bl	800afd0 <__retarget_lock_release_recursive>
 800b82a:	e7dd      	b.n	800b7e8 <_fflush_r+0xc>

0800b82c <__swbuf_r>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	460e      	mov	r6, r1
 800b830:	4614      	mov	r4, r2
 800b832:	4605      	mov	r5, r0
 800b834:	b118      	cbz	r0, 800b83e <__swbuf_r+0x12>
 800b836:	6a03      	ldr	r3, [r0, #32]
 800b838:	b90b      	cbnz	r3, 800b83e <__swbuf_r+0x12>
 800b83a:	f7ff fa6f 	bl	800ad1c <__sinit>
 800b83e:	69a3      	ldr	r3, [r4, #24]
 800b840:	60a3      	str	r3, [r4, #8]
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	071a      	lsls	r2, r3, #28
 800b846:	d525      	bpl.n	800b894 <__swbuf_r+0x68>
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	b31b      	cbz	r3, 800b894 <__swbuf_r+0x68>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	6922      	ldr	r2, [r4, #16]
 800b850:	1a98      	subs	r0, r3, r2
 800b852:	6963      	ldr	r3, [r4, #20]
 800b854:	b2f6      	uxtb	r6, r6
 800b856:	4283      	cmp	r3, r0
 800b858:	4637      	mov	r7, r6
 800b85a:	dc04      	bgt.n	800b866 <__swbuf_r+0x3a>
 800b85c:	4621      	mov	r1, r4
 800b85e:	4628      	mov	r0, r5
 800b860:	f7ff ffbc 	bl	800b7dc <_fflush_r>
 800b864:	b9e0      	cbnz	r0, 800b8a0 <__swbuf_r+0x74>
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	3b01      	subs	r3, #1
 800b86a:	60a3      	str	r3, [r4, #8]
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	6022      	str	r2, [r4, #0]
 800b872:	701e      	strb	r6, [r3, #0]
 800b874:	6962      	ldr	r2, [r4, #20]
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	429a      	cmp	r2, r3
 800b87a:	d004      	beq.n	800b886 <__swbuf_r+0x5a>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	07db      	lsls	r3, r3, #31
 800b880:	d506      	bpl.n	800b890 <__swbuf_r+0x64>
 800b882:	2e0a      	cmp	r6, #10
 800b884:	d104      	bne.n	800b890 <__swbuf_r+0x64>
 800b886:	4621      	mov	r1, r4
 800b888:	4628      	mov	r0, r5
 800b88a:	f7ff ffa7 	bl	800b7dc <_fflush_r>
 800b88e:	b938      	cbnz	r0, 800b8a0 <__swbuf_r+0x74>
 800b890:	4638      	mov	r0, r7
 800b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b894:	4621      	mov	r1, r4
 800b896:	4628      	mov	r0, r5
 800b898:	f000 f806 	bl	800b8a8 <__swsetup_r>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d0d5      	beq.n	800b84c <__swbuf_r+0x20>
 800b8a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b8a4:	e7f4      	b.n	800b890 <__swbuf_r+0x64>
	...

0800b8a8 <__swsetup_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4b2a      	ldr	r3, [pc, #168]	; (800b954 <__swsetup_r+0xac>)
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	6818      	ldr	r0, [r3, #0]
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	b118      	cbz	r0, 800b8bc <__swsetup_r+0x14>
 800b8b4:	6a03      	ldr	r3, [r0, #32]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <__swsetup_r+0x14>
 800b8b8:	f7ff fa30 	bl	800ad1c <__sinit>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8c2:	0718      	lsls	r0, r3, #28
 800b8c4:	d422      	bmi.n	800b90c <__swsetup_r+0x64>
 800b8c6:	06d9      	lsls	r1, r3, #27
 800b8c8:	d407      	bmi.n	800b8da <__swsetup_r+0x32>
 800b8ca:	2309      	movs	r3, #9
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e034      	b.n	800b944 <__swsetup_r+0x9c>
 800b8da:	0758      	lsls	r0, r3, #29
 800b8dc:	d512      	bpl.n	800b904 <__swsetup_r+0x5c>
 800b8de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8e0:	b141      	cbz	r1, 800b8f4 <__swsetup_r+0x4c>
 800b8e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	d002      	beq.n	800b8f0 <__swsetup_r+0x48>
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f7ff fbd0 	bl	800b090 <_free_r>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6363      	str	r3, [r4, #52]	; 0x34
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	6063      	str	r3, [r4, #4]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f043 0308 	orr.w	r3, r3, #8
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	b94b      	cbnz	r3, 800b924 <__swsetup_r+0x7c>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b91a:	d003      	beq.n	800b924 <__swsetup_r+0x7c>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 f840 	bl	800b9a4 <__smakebuf_r>
 800b924:	89a0      	ldrh	r0, [r4, #12]
 800b926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b92a:	f010 0301 	ands.w	r3, r0, #1
 800b92e:	d00a      	beq.n	800b946 <__swsetup_r+0x9e>
 800b930:	2300      	movs	r3, #0
 800b932:	60a3      	str	r3, [r4, #8]
 800b934:	6963      	ldr	r3, [r4, #20]
 800b936:	425b      	negs	r3, r3
 800b938:	61a3      	str	r3, [r4, #24]
 800b93a:	6923      	ldr	r3, [r4, #16]
 800b93c:	b943      	cbnz	r3, 800b950 <__swsetup_r+0xa8>
 800b93e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b942:	d1c4      	bne.n	800b8ce <__swsetup_r+0x26>
 800b944:	bd38      	pop	{r3, r4, r5, pc}
 800b946:	0781      	lsls	r1, r0, #30
 800b948:	bf58      	it	pl
 800b94a:	6963      	ldrpl	r3, [r4, #20]
 800b94c:	60a3      	str	r3, [r4, #8]
 800b94e:	e7f4      	b.n	800b93a <__swsetup_r+0x92>
 800b950:	2000      	movs	r0, #0
 800b952:	e7f7      	b.n	800b944 <__swsetup_r+0x9c>
 800b954:	20000074 	.word	0x20000074

0800b958 <__swhatbuf_r>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	460c      	mov	r4, r1
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	2900      	cmp	r1, #0
 800b962:	b096      	sub	sp, #88	; 0x58
 800b964:	4615      	mov	r5, r2
 800b966:	461e      	mov	r6, r3
 800b968:	da0d      	bge.n	800b986 <__swhatbuf_r+0x2e>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b970:	f04f 0100 	mov.w	r1, #0
 800b974:	bf0c      	ite	eq
 800b976:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b97a:	2340      	movne	r3, #64	; 0x40
 800b97c:	2000      	movs	r0, #0
 800b97e:	6031      	str	r1, [r6, #0]
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	b016      	add	sp, #88	; 0x58
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	466a      	mov	r2, sp
 800b988:	f000 f848 	bl	800ba1c <_fstat_r>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dbec      	blt.n	800b96a <__swhatbuf_r+0x12>
 800b990:	9901      	ldr	r1, [sp, #4]
 800b992:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b996:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b99a:	4259      	negs	r1, r3
 800b99c:	4159      	adcs	r1, r3
 800b99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9a2:	e7eb      	b.n	800b97c <__swhatbuf_r+0x24>

0800b9a4 <__smakebuf_r>:
 800b9a4:	898b      	ldrh	r3, [r1, #12]
 800b9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9a8:	079d      	lsls	r5, r3, #30
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	d507      	bpl.n	800b9c0 <__smakebuf_r+0x1c>
 800b9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	6163      	str	r3, [r4, #20]
 800b9bc:	b002      	add	sp, #8
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	ab01      	add	r3, sp, #4
 800b9c2:	466a      	mov	r2, sp
 800b9c4:	f7ff ffc8 	bl	800b958 <__swhatbuf_r>
 800b9c8:	9900      	ldr	r1, [sp, #0]
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff f88d 	bl	800aaec <_malloc_r>
 800b9d2:	b948      	cbnz	r0, 800b9e8 <__smakebuf_r+0x44>
 800b9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d8:	059a      	lsls	r2, r3, #22
 800b9da:	d4ef      	bmi.n	800b9bc <__smakebuf_r+0x18>
 800b9dc:	f023 0303 	bic.w	r3, r3, #3
 800b9e0:	f043 0302 	orr.w	r3, r3, #2
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	e7e3      	b.n	800b9b0 <__smakebuf_r+0xc>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	6020      	str	r0, [r4, #0]
 800b9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9f0:	81a3      	strh	r3, [r4, #12]
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	6163      	str	r3, [r4, #20]
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	6120      	str	r0, [r4, #16]
 800b9fa:	b15b      	cbz	r3, 800ba14 <__smakebuf_r+0x70>
 800b9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba00:	4630      	mov	r0, r6
 800ba02:	f000 f81d 	bl	800ba40 <_isatty_r>
 800ba06:	b128      	cbz	r0, 800ba14 <__smakebuf_r+0x70>
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	f023 0303 	bic.w	r3, r3, #3
 800ba0e:	f043 0301 	orr.w	r3, r3, #1
 800ba12:	81a3      	strh	r3, [r4, #12]
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	431d      	orrs	r5, r3
 800ba18:	81a5      	strh	r5, [r4, #12]
 800ba1a:	e7cf      	b.n	800b9bc <__smakebuf_r+0x18>

0800ba1c <_fstat_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_fstat_r+0x20>)
 800ba20:	2300      	movs	r3, #0
 800ba22:	4604      	mov	r4, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	4611      	mov	r1, r2
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	f7f6 faa2 	bl	8001f72 <_fstat>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	d102      	bne.n	800ba38 <_fstat_r+0x1c>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	b103      	cbz	r3, 800ba38 <_fstat_r+0x1c>
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	bd38      	pop	{r3, r4, r5, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000640 	.word	0x20000640

0800ba40 <_isatty_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d06      	ldr	r5, [pc, #24]	; (800ba5c <_isatty_r+0x1c>)
 800ba44:	2300      	movs	r3, #0
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f6 faa1 	bl	8001f92 <_isatty>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_isatty_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_isatty_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20000640 	.word	0x20000640

0800ba60 <_init>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr

0800ba6c <_fini>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr
