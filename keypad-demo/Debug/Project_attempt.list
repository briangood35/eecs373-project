
Project_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080038b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080038b8  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2b7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af5  00000000  00000000  0002a336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ae  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cad  00000000  00000000  0002cffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca9e  00000000  00000000  00055cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9142  00000000  00000000  00062749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002854  00000000  00000000  0015b88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0015e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003808 	.word	0x08003808

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003808 	.word	0x08003808

080001fc <strcmp>:
 80001fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000204:	2a01      	cmp	r2, #1
 8000206:	bf28      	it	cs
 8000208:	429a      	cmpcs	r2, r3
 800020a:	d0f7      	beq.n	80001fc <strcmp>
 800020c:	1ad0      	subs	r0, r2, r3
 800020e:	4770      	bx	lr

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x50) // 0x40 if ignoring r/w // for small LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd) //everything needs to start with FE then the comand. Dont know why its a char
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[2];
	data_t[0] = 0xFE;
 800022a:	23fe      	movs	r3, #254	; 0xfe
 800022c:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 2, 100);
 8000232:	f107 020c 	add.w	r2, r7, #12
 8000236:	2364      	movs	r3, #100	; 0x64
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2302      	movs	r3, #2
 800023c:	2150      	movs	r1, #80	; 0x50
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <lcd_send_cmd+0x2c>)
 8000240:	f001 fa6a 	bl	8001718 <HAL_I2C_Master_Transmit>


}
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000028 	.word	0x20000028

08000250 <lcd_send_cmd_param>:

void lcd_send_cmd_param (char cmd, char param) //everything needs to start with FE then the comand. Dont know why its a char
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	460a      	mov	r2, r1
 800025a:	71fb      	strb	r3, [r7, #7]
 800025c:	4613      	mov	r3, r2
 800025e:	71bb      	strb	r3, [r7, #6]
	uint8_t data_t[3];
	data_t[0] = 0xFE;
 8000260:	23fe      	movs	r3, #254	; 0xfe
 8000262:	733b      	strb	r3, [r7, #12]
	data_t[1] = cmd;
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	737b      	strb	r3, [r7, #13]
	data_t[2] = param;
 8000268:	79bb      	ldrb	r3, [r7, #6]
 800026a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 3, 100);
 800026c:	f107 020c 	add.w	r2, r7, #12
 8000270:	2364      	movs	r3, #100	; 0x64
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2303      	movs	r3, #3
 8000276:	2150      	movs	r1, #80	; 0x50
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <lcd_send_cmd_param+0x38>)
 800027a:	f001 fa4d 	bl	8001718 <HAL_I2C_Master_Transmit>


}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028

0800028c <lcd_send_data>:

void lcd_send_data (char data_in)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af02      	add	r7, sp, #8
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[1];
	//data_t[1] = 0xFE;
	data_t[0] = data_in;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 1, 100);
 800029a:	f107 020c 	add.w	r2, r7, #12
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2301      	movs	r3, #1
 80002a4:	2150      	movs	r1, #80	; 0x50
 80002a6:	4803      	ldr	r0, [pc, #12]	; (80002b4 <lcd_send_data+0x28>)
 80002a8:	f001 fa36 	bl	8001718 <HAL_I2C_Master_Transmit>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000028 	.word	0x20000028

080002b8 <lcd_init>:


void lcd_init (void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x41); //turn on display
 80002bc:	2041      	movs	r0, #65	; 0x41
 80002be:	f7ff ffaf 	bl	8000220 <lcd_send_cmd>
	lcd_send_cmd (0x51); //clear display
 80002c2:	2051      	movs	r0, #81	; 0x51
 80002c4:	f7ff ffac 	bl	8000220 <lcd_send_cmd>
	lcd_send_cmd (0x46); //home the curser
 80002c8:	2046      	movs	r0, #70	; 0x46
 80002ca:	f7ff ffa9 	bl	8000220 <lcd_send_cmd>

	//write password
	lcd_send_string("Password: ");
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <lcd_init+0x2c>)
 80002d0:	f000 f840 	bl	8000354 <lcd_send_string>

	lcd_send_cmd (0x47); //turn on underlying cursur
 80002d4:	2047      	movs	r0, #71	; 0x47
 80002d6:	f7ff ffa3 	bl	8000220 <lcd_send_cmd>
	lcd_send_cmd (0x4B);
 80002da:	204b      	movs	r0, #75	; 0x4b
 80002dc:	f7ff ffa0 	bl	8000220 <lcd_send_cmd>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	08003820 	.word	0x08003820

080002e8 <lcd_correct_pass>:

void lcd_correct_pass (void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//write correct
	lcd_send_cmd_param(0x45, 0x40);
 80002ec:	2140      	movs	r1, #64	; 0x40
 80002ee:	2045      	movs	r0, #69	; 0x45
 80002f0:	f7ff ffae 	bl	8000250 <lcd_send_cmd_param>
	lcd_send_string("Correct$$$");
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <lcd_correct_pass+0x20>)
 80002f6:	f000 f82d 	bl	8000354 <lcd_send_string>

	//open lock funciton
	HAL_Delay(2000);
 80002fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002fe:	f000 fea3 	bl	8001048 <HAL_Delay>

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	0800382c 	.word	0x0800382c

0800030c <lcd_incorrect_pass>:

void lcd_incorrect_pass (void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	//write correct
		lcd_send_cmd_param(0x45, 0x40);
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	2045      	movs	r0, #69	; 0x45
 8000314:	f7ff ff9c 	bl	8000250 <lcd_send_cmd_param>
		lcd_send_string("Incorrect :(");
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <lcd_incorrect_pass+0x20>)
 800031a:	f000 f81b 	bl	8000354 <lcd_send_string>

		//open lock funciton
		HAL_Delay(2000);
 800031e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000322:	f000 fe91 	bl	8001048 <HAL_Delay>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08003838 	.word	0x08003838

08000330 <lcd_nice>:

void lcd_nice(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	lcd_send_cmd_param(0x45, 0x40);
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	2045      	movs	r0, #69	; 0x45
 8000338:	f7ff ff8a 	bl	8000250 <lcd_send_cmd_param>
	lcd_send_string("Nice! :D");
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <lcd_nice+0x20>)
 800033e:	f000 f809 	bl	8000354 <lcd_send_string>
	HAL_Delay(2000);
 8000342:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000346:	f000 fe7f 	bl	8001048 <HAL_Delay>


}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	08003848 	.word	0x08003848

08000354 <lcd_send_string>:

void lcd_send_string (char *str) //just going to do it manually
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800035c:	e006      	b.n	800036c <lcd_send_string+0x18>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff90 	bl	800028c <lcd_send_data>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d1f4      	bne.n	800035e <lcd_send_string+0xa>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <read_keypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t key;

char read_keypad (void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 0);  //Pull the R1 low
 8000382:	2200      	movs	r2, #0
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f001 f911 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 800038e:	2201      	movs	r2, #1
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f001 f90b 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 800039a:	2201      	movs	r2, #1
 800039c:	2120      	movs	r1, #32
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f001 f905 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 80003a6:	2201      	movs	r2, #1
 80003a8:	2110      	movs	r1, #16
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f001 f8ff 	bl	80015b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80003b2:	2108      	movs	r1, #8
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b8:	f001 f8e2 	bl	8001580 <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10d      	bne.n	80003de <read_keypad+0x60>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80003c2:	bf00      	nop
 80003c4:	2108      	movs	r1, #8
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f001 f8d9 	bl	8001580 <HAL_GPIO_ReadPin>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f7      	beq.n	80003c4 <read_keypad+0x46>
		lcd_send_data(0x31); // i
 80003d4:	2031      	movs	r0, #49	; 0x31
 80003d6:	f7ff ff59 	bl	800028c <lcd_send_data>
		return '1';
 80003da:	2331      	movs	r3, #49	; 0x31
 80003dc:	e18c      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80003de:	2104      	movs	r1, #4
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f001 f8cc 	bl	8001580 <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d10d      	bne.n	800040a <read_keypad+0x8c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80003ee:	bf00      	nop
 80003f0:	2104      	movs	r1, #4
 80003f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f6:	f001 f8c3 	bl	8001580 <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f7      	beq.n	80003f0 <read_keypad+0x72>
		lcd_send_data(0x32); // i
 8000400:	2032      	movs	r0, #50	; 0x32
 8000402:	f7ff ff43 	bl	800028c <lcd_send_data>
		return '2';
 8000406:	2332      	movs	r3, #50	; 0x32
 8000408:	e176      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800040a:	2102      	movs	r1, #2
 800040c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000410:	f001 f8b6 	bl	8001580 <HAL_GPIO_ReadPin>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d10d      	bne.n	8000436 <read_keypad+0xb8>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 800041a:	bf00      	nop
 800041c:	2102      	movs	r1, #2
 800041e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000422:	f001 f8ad 	bl	8001580 <HAL_GPIO_ReadPin>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f7      	beq.n	800041c <read_keypad+0x9e>
		lcd_send_data(0x33); // i
 800042c:	2033      	movs	r0, #51	; 0x33
 800042e:	f7ff ff2d 	bl	800028c <lcd_send_data>
		return '3';
 8000432:	2333      	movs	r3, #51	; 0x33
 8000434:	e160      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000436:	2101      	movs	r1, #1
 8000438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043c:	f001 f8a0 	bl	8001580 <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10d      	bne.n	8000462 <read_keypad+0xe4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000446:	bf00      	nop
 8000448:	2101      	movs	r1, #1
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f001 f897 	bl	8001580 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f7      	beq.n	8000448 <read_keypad+0xca>
		lcd_send_data(0x41); // i
 8000458:	2041      	movs	r0, #65	; 0x41
 800045a:	f7ff ff17 	bl	800028c <lcd_send_data>
		return 'A';
 800045e:	2341      	movs	r3, #65	; 0x41
 8000460:	e14a      	b.n	80006f8 <read_keypad+0x37a>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f001 f8a1 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 0);  // Pull the R2 High
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f001 f89b 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 800047a:	2201      	movs	r2, #1
 800047c:	2120      	movs	r1, #32
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 f895 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 8000486:	2201      	movs	r2, #1
 8000488:	2110      	movs	r1, #16
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f001 f88f 	bl	80015b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000492:	2108      	movs	r1, #8
 8000494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000498:	f001 f872 	bl	8001580 <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d10d      	bne.n	80004be <read_keypad+0x140>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80004a2:	bf00      	nop
 80004a4:	2108      	movs	r1, #8
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f001 f869 	bl	8001580 <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f7      	beq.n	80004a4 <read_keypad+0x126>
		lcd_send_data(0x34); // i
 80004b4:	2034      	movs	r0, #52	; 0x34
 80004b6:	f7ff fee9 	bl	800028c <lcd_send_data>
		return '4';
 80004ba:	2334      	movs	r3, #52	; 0x34
 80004bc:	e11c      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80004be:	2104      	movs	r1, #4
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f001 f85c 	bl	8001580 <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10d      	bne.n	80004ea <read_keypad+0x16c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80004ce:	bf00      	nop
 80004d0:	2104      	movs	r1, #4
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f001 f853 	bl	8001580 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0f7      	beq.n	80004d0 <read_keypad+0x152>
		lcd_send_data(0x35); // i
 80004e0:	2035      	movs	r0, #53	; 0x35
 80004e2:	f7ff fed3 	bl	800028c <lcd_send_data>
		return '5';
 80004e6:	2335      	movs	r3, #53	; 0x35
 80004e8:	e106      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80004ea:	2102      	movs	r1, #2
 80004ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f0:	f001 f846 	bl	8001580 <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d10d      	bne.n	8000516 <read_keypad+0x198>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80004fa:	bf00      	nop
 80004fc:	2102      	movs	r1, #2
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f001 f83d 	bl	8001580 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f7      	beq.n	80004fc <read_keypad+0x17e>
		lcd_send_data(0x36); // i
 800050c:	2036      	movs	r0, #54	; 0x36
 800050e:	f7ff febd 	bl	800028c <lcd_send_data>
		return '6';
 8000512:	2336      	movs	r3, #54	; 0x36
 8000514:	e0f0      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 8000516:	2101      	movs	r1, #1
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f001 f830 	bl	8001580 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10d      	bne.n	8000542 <read_keypad+0x1c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000526:	bf00      	nop
 8000528:	2101      	movs	r1, #1
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 f827 	bl	8001580 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f7      	beq.n	8000528 <read_keypad+0x1aa>
		lcd_send_data(0x42); // i
 8000538:	2042      	movs	r0, #66	; 0x42
 800053a:	f7ff fea7 	bl	800028c <lcd_send_data>
		return 'B';
 800053e:	2342      	movs	r3, #66	; 0x42
 8000540:	e0da      	b.n	80006f8 <read_keypad+0x37a>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 8000542:	2201      	movs	r2, #1
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 f831 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 800054e:	2201      	movs	r2, #1
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 f82b 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 0);  // Pull the R3 High
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 f825 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 1);  // Pull the R4 High
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 f81f 	bl	80015b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000572:	2108      	movs	r1, #8
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f001 f802 	bl	8001580 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10d      	bne.n	800059e <read_keypad+0x220>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000582:	bf00      	nop
 8000584:	2108      	movs	r1, #8
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f000 fff9 	bl	8001580 <HAL_GPIO_ReadPin>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0f7      	beq.n	8000584 <read_keypad+0x206>
		lcd_send_data(0x37); // i
 8000594:	2037      	movs	r0, #55	; 0x37
 8000596:	f7ff fe79 	bl	800028c <lcd_send_data>
		return '7';
 800059a:	2337      	movs	r3, #55	; 0x37
 800059c:	e0ac      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800059e:	2104      	movs	r1, #4
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 ffec 	bl	8001580 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10d      	bne.n	80005ca <read_keypad+0x24c>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80005ae:	bf00      	nop
 80005b0:	2104      	movs	r1, #4
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f000 ffe3 	bl	8001580 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f7      	beq.n	80005b0 <read_keypad+0x232>
		lcd_send_data(0x38); // i
 80005c0:	2038      	movs	r0, #56	; 0x38
 80005c2:	f7ff fe63 	bl	800028c <lcd_send_data>
		return '8';
 80005c6:	2338      	movs	r3, #56	; 0x38
 80005c8:	e096      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80005ca:	2102      	movs	r1, #2
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 ffd6 	bl	8001580 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10d      	bne.n	80005f6 <read_keypad+0x278>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80005da:	bf00      	nop
 80005dc:	2102      	movs	r1, #2
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f000 ffcd 	bl	8001580 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f7      	beq.n	80005dc <read_keypad+0x25e>
		lcd_send_data(0x39); // i
 80005ec:	2039      	movs	r0, #57	; 0x39
 80005ee:	f7ff fe4d 	bl	800028c <lcd_send_data>
		return '9';
 80005f2:	2339      	movs	r3, #57	; 0x39
 80005f4:	e080      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80005f6:	2101      	movs	r1, #1
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 ffc0 	bl	8001580 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10a      	bne.n	800061c <read_keypad+0x29e>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 8000606:	bf00      	nop
 8000608:	2101      	movs	r1, #1
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f000 ffb7 	bl	8001580 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f7      	beq.n	8000608 <read_keypad+0x28a>
		return 'C';
 8000618:	2343      	movs	r3, #67	; 0x43
 800061a:	e06d      	b.n	80006f8 <read_keypad+0x37a>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, 1);  //Pull the R1 low
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 ffc4 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, 1);  // Pull the R2 High
 8000628:	2201      	movs	r2, #1
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 ffbe 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, 1);  // Pull the R3 High
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 ffb8 	bl	80015b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, 0);  // Pull the R4 High
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 ffb2 	bl	80015b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 800064c:	2108      	movs	r1, #8
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f000 ff95 	bl	8001580 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10a      	bne.n	8000672 <read_keypad+0x2f4>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 800065c:	bf00      	nop
 800065e:	2108      	movs	r1, #8
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 ff8c 	bl	8001580 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f7      	beq.n	800065e <read_keypad+0x2e0>
		return '*';
 800066e:	232a      	movs	r3, #42	; 0x2a
 8000670:	e042      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 8000672:	2104      	movs	r1, #4
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 ff82 	bl	8001580 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10d      	bne.n	800069e <read_keypad+0x320>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000682:	bf00      	nop
 8000684:	2104      	movs	r1, #4
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f000 ff79 	bl	8001580 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f7      	beq.n	8000684 <read_keypad+0x306>
		lcd_send_data(0x30); // i
 8000694:	2030      	movs	r0, #48	; 0x30
 8000696:	f7ff fdf9 	bl	800028c <lcd_send_data>
		return '0';
 800069a:	2330      	movs	r3, #48	; 0x30
 800069c:	e02c      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800069e:	2102      	movs	r1, #2
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 ff6c 	bl	8001580 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10d      	bne.n	80006ca <read_keypad+0x34c>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80006ae:	bf00      	nop
 80006b0:	2102      	movs	r1, #2
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f000 ff63 	bl	8001580 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f7      	beq.n	80006b0 <read_keypad+0x332>
		lcd_send_data(0x23); // i
 80006c0:	2023      	movs	r0, #35	; 0x23
 80006c2:	f7ff fde3 	bl	800028c <lcd_send_data>
		return '#';
 80006c6:	2323      	movs	r3, #35	; 0x23
 80006c8:	e016      	b.n	80006f8 <read_keypad+0x37a>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80006ca:	2101      	movs	r1, #1
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 ff56 	bl	8001580 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10d      	bne.n	80006f6 <read_keypad+0x378>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80006da:	bf00      	nop
 80006dc:	2101      	movs	r1, #1
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 ff4d 	bl	8001580 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f7      	beq.n	80006dc <read_keypad+0x35e>
		lcd_send_data(0x44); // i
 80006ec:	2044      	movs	r0, #68	; 0x44
 80006ee:	f7ff fdcd 	bl	800028c <lcd_send_data>
		return 'D';
 80006f2:	2344      	movs	r3, #68	; 0x44
 80006f4:	e000      	b.n	80006f8 <read_keypad+0x37a>
	}

	return 0; // if returned, 0, we got an error
 80006f6:	2300      	movs	r3, #0

}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fc2c 	bl	8000f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f87f 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f901 	bl	8000910 <MX_GPIO_Init>
  MX_I2C1_Init();
 800070e:	f000 f8c1 	bl	8000894 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000712:	f7ff fdd1 	bl	80002b8 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char real_password[8] = "28664#D";
 8000716:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <main+0x104>)
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000720:	e883 0003 	stmia.w	r3, {r0, r1}
char nice[] = "69420";
 8000724:	4a37      	ldr	r2, [pc, #220]	; (8000804 <main+0x108>)
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072e:	6018      	str	r0, [r3, #0]
 8000730:	3304      	adds	r3, #4
 8000732:	8019      	strh	r1, [r3, #0]
char pass[11] = "\0";
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	f8c3 2003 	str.w	r2, [r3, #3]
int index = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 // Initialize an empty password of size 10 because of Null
	    char key = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 800074e:	e004      	b.n	800075a <main+0x5e>
	    	key = read_keypad ();
 8000750:	f7ff fe15 	bl	800037e <read_keypad>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    while (!key) {
 800075a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f6      	beq.n	8000750 <main+0x54>
	    }
		if (key != 'C' && key != '*' && strlen(pass) < 10) {
 8000762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000766:	2b43      	cmp	r3, #67	; 0x43
 8000768:	d018      	beq.n	800079c <main+0xa0>
 800076a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800076e:	2b2a      	cmp	r3, #42	; 0x2a
 8000770:	d014      	beq.n	800079c <main+0xa0>
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd4b 	bl	8000210 <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	2b09      	cmp	r3, #9
 800077e:	d80d      	bhi.n	800079c <main+0xa0>
		    // Append the key to the string
			pass[index++] = key;
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	627a      	str	r2, [r7, #36]	; 0x24
 8000786:	3328      	adds	r3, #40	; 0x28
 8000788:	443b      	add	r3, r7
 800078a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800078e:	f803 2c24 	strb.w	r2, [r3, #-36]
			pass[index] = '\0';
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	4413      	add	r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		}
		if (key == 'C'){
 800079c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007a0:	2b43      	cmp	r3, #67	; 0x43
 80007a2:	d105      	bne.n	80007b0 <main+0xb4>
			pass[0] = '\0';
 80007a4:	2300      	movs	r3, #0
 80007a6:	713b      	strb	r3, [r7, #4]
			index = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 80007ac:	f7ff fd84 	bl	80002b8 <lcd_init>
  	  	  }
		if (key == '*'){
 80007b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007b4:	2b2a      	cmp	r3, #42	; 0x2a
 80007b6:	d1c7      	bne.n	8000748 <main+0x4c>
			if (!strcmp(pass, nice)){
 80007b8:	f107 0210 	add.w	r2, r7, #16
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd1b 	bl	80001fc <strcmp>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <main+0xd6>
				lcd_nice();
 80007cc:	f7ff fdb0 	bl	8000330 <lcd_nice>
 80007d0:	e00e      	b.n	80007f0 <main+0xf4>
			}
			else if (!strcmp(pass, real_password)) {
 80007d2:	f107 0218 	add.w	r2, r7, #24
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd0e 	bl	80001fc <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <main+0xf0>
			     lcd_correct_pass();
 80007e6:	f7ff fd7f 	bl	80002e8 <lcd_correct_pass>
 80007ea:	e001      	b.n	80007f0 <main+0xf4>
			} else {
			     lcd_incorrect_pass();
 80007ec:	f7ff fd8e 	bl	800030c <lcd_incorrect_pass>
			}
			pass[0] = '\0';
 80007f0:	2300      	movs	r3, #0
 80007f2:	713b      	strb	r3, [r7, #4]
			index = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
			lcd_init();
 80007f8:	f7ff fd5e 	bl	80002b8 <lcd_init>
  {
 80007fc:	e7a4      	b.n	8000748 <main+0x4c>
 80007fe:	bf00      	nop
 8000800:	08003854 	.word	0x08003854
 8000804:	0800385c 	.word	0x0800385c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 ffca 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800082e:	f001 fb53 	bl	8001ed8 <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f000 faa2 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800083c:	2310      	movs	r3, #16
 800083e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fbf3 	bl	8002040 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000860:	f000 fa8e 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fff9 	bl	8002874 <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000888:	f000 fa7a 	bl	8000d80 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	; 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E50;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	f44f 6265 	mov.w	r2, #3664	; 0xe50
 80008a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d2:	f000 fe85 	bl	80015e0 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 fa50 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e4:	f001 fa40 	bl	8001d68 <HAL_I2CEx_ConfigAnalogFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ee:	f000 fa47 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f6:	f001 fa82 	bl	8001dfe <HAL_I2CEx_ConfigDigitalFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 fa3e 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000028 	.word	0x20000028
 800090c:	40005400 	.word	0x40005400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4bb3      	ldr	r3, [pc, #716]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4ab2      	ldr	r2, [pc, #712]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4bb0      	ldr	r3, [pc, #704]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4bad      	ldr	r3, [pc, #692]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4aac      	ldr	r2, [pc, #688]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4baa      	ldr	r3, [pc, #680]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000956:	4ba7      	ldr	r3, [pc, #668]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4aa6      	ldr	r2, [pc, #664]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 800095c:	f043 0320 	orr.w	r3, r3, #32
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4ba4      	ldr	r3, [pc, #656]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0320 	and.w	r3, r3, #32
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4ba1      	ldr	r3, [pc, #644]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4aa0      	ldr	r2, [pc, #640]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b9e      	ldr	r3, [pc, #632]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b9b      	ldr	r3, [pc, #620]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a9a      	ldr	r2, [pc, #616]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b98      	ldr	r3, [pc, #608]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b95      	ldr	r3, [pc, #596]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a94      	ldr	r2, [pc, #592]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b92      	ldr	r3, [pc, #584]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b8f      	ldr	r3, [pc, #572]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a8e      	ldr	r2, [pc, #568]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b8c      	ldr	r3, [pc, #560]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a88      	ldr	r2, [pc, #544]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <MX_GPIO_Init+0x2e4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009e6:	f001 fb1b 	bl	8002020 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	21f0      	movs	r1, #240	; 0xf0
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fddd 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a06:	230d      	movs	r3, #13
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4879      	ldr	r0, [pc, #484]	; (8000bf8 <MX_GPIO_Init+0x2e8>)
 8000a12:	f000 fc23 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a26:	2304      	movs	r3, #4
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4872      	ldr	r0, [pc, #456]	; (8000bfc <MX_GPIO_Init+0x2ec>)
 8000a32:	f000 fc13 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a46:	230d      	movs	r3, #13
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	486a      	ldr	r0, [pc, #424]	; (8000bfc <MX_GPIO_Init+0x2ec>)
 8000a52:	f000 fc03 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a56:	233f      	movs	r3, #63	; 0x3f
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	4865      	ldr	r0, [pc, #404]	; (8000c00 <MX_GPIO_Init+0x2f0>)
 8000a6a:	f000 fbf7 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a6e:	230f      	movs	r3, #15
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 fbea 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a88:	23f0      	movs	r3, #240	; 0xf0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fbdb 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4850      	ldr	r0, [pc, #320]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000ac2:	f000 fbcb 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aca:	230b      	movs	r3, #11
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	484a      	ldr	r0, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000ada:	f000 fbbf 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ade:	2344      	movs	r3, #68	; 0x44
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4844      	ldr	r0, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000af2:	f000 fbb3 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000af6:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4839      	ldr	r0, [pc, #228]	; (8000bf8 <MX_GPIO_Init+0x2e8>)
 8000b14:	f000 fba2 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4830      	ldr	r0, [pc, #192]	; (8000bf8 <MX_GPIO_Init+0x2e8>)
 8000b36:	f000 fb91 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	482b      	ldr	r0, [pc, #172]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000b58:	f000 fb80 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b5c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b6e:	230d      	movs	r3, #13
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000b7a:	f000 fb6f 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b90:	230e      	movs	r3, #14
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000b9c:	f000 fb5e 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000bbe:	f000 fb4d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000be0:	f000 fb3c 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000be4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e00c      	b.n	8000c0c <MX_GPIO_Init+0x2fc>
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48001000 	.word	0x48001000
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c12:	2308      	movs	r3, #8
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4853      	ldr	r0, [pc, #332]	; (8000d6c <MX_GPIO_Init+0x45c>)
 8000c1e:	f000 fb1d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c22:	2340      	movs	r3, #64	; 0x40
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c32:	230d      	movs	r3, #13
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	484c      	ldr	r0, [pc, #304]	; (8000d70 <MX_GPIO_Init+0x460>)
 8000c3e:	f000 fb0d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c52:	2302      	movs	r3, #2
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4844      	ldr	r0, [pc, #272]	; (8000d70 <MX_GPIO_Init+0x460>)
 8000c5e:	f000 fafd 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c62:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c74:	230c      	movs	r3, #12
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	483c      	ldr	r0, [pc, #240]	; (8000d70 <MX_GPIO_Init+0x460>)
 8000c80:	f000 faec 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000c84:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 fada 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 facc 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cd4:	2309      	movs	r3, #9
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4825      	ldr	r0, [pc, #148]	; (8000d74 <MX_GPIO_Init+0x464>)
 8000ce0:	f000 fabc 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <MX_GPIO_Init+0x464>)
 8000d00:	f000 faac 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d04:	2378      	movs	r3, #120	; 0x78
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d14:	2307      	movs	r3, #7
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <MX_GPIO_Init+0x464>)
 8000d20:	f000 fa9c 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d24:	2338      	movs	r3, #56	; 0x38
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <MX_GPIO_Init+0x468>)
 8000d40:	f000 fa8c 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d54:	2302      	movs	r3, #2
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	; (8000d7c <MX_GPIO_Init+0x46c>)
 8000d60:	f000 fa7c 	bl	800125c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	bf00      	nop
 8000d66:	3738      	adds	r7, #56	; 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	48001800 	.word	0x48001800
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48001000 	.word	0x48001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ae      	sub	sp, #184	; 0xb8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2294      	movs	r2, #148	; 0x94
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fcd9 	bl	80037b0 <memset>
  if(hi2c->Instance==I2C1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_I2C_MspInit+0xb0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13b      	bne.n	8000e80 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 ffb3 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e20:	f7ff ffae 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e44:	2312      	movs	r3, #18
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e56:	2304      	movs	r3, #4
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <HAL_I2C_MspInit+0xb8>)
 8000e64:	f000 f9fa 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e72:	6593      	str	r3, [r2, #88]	; 0x58
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_I2C_MspInit+0xb4>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	37b8      	adds	r7, #184	; 0xb8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000400 	.word	0x48000400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */

}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f892 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f10:	f7ff ffea 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <LoopForever+0xe>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	; (8000f58 <LoopForever+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f002 fc41 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff fbdd 	bl	80006fc <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f50:	080038ac 	.word	0x080038ac
  ldr r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f58:	20000080 	.word	0x20000080

08000f5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_IRQHandler>

08000f5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f943 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f80e 	bl	8000f90 <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	e001      	b.n	8000f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f80:	f7ff ff06 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_InitTick+0x6c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d023      	beq.n	8000fec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_InitTick+0x70>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_InitTick+0x6c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f941 	bl	8001242 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d809      	bhi.n	8000fe0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f919 	bl	800120a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_InitTick+0x74>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e007      	b.n	8000ff0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e004      	b.n	8000ff0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e001      	b.n	8000ff0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	2000007c 	.word	0x2000007c

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000007c 	.word	0x2000007c

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff47 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff5c 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffb0 	bl	80011b0 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e166      	b.n	800153a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8158 	beq.w	8001534 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d005      	beq.n	800129c <HAL_GPIO_Init+0x40>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 0201 	and.w	r2, r3, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b03      	cmp	r3, #3
 8001308:	d017      	beq.n	800133a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d123      	bne.n	800138e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2203      	movs	r2, #3
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0203 	and.w	r2, r3, #3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80b2 	beq.w	8001534 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <HAL_GPIO_Init+0x2fc>)
 80013d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d4:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x2fc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6613      	str	r3, [r2, #96]	; 0x60
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_GPIO_Init+0x2fc>)
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e8:	4a5c      	ldr	r2, [pc, #368]	; (800155c <HAL_GPIO_Init+0x300>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001412:	d02b      	beq.n	800146c <HAL_GPIO_Init+0x210>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_GPIO_Init+0x304>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d025      	beq.n	8001468 <HAL_GPIO_Init+0x20c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_GPIO_Init+0x308>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d01f      	beq.n	8001464 <HAL_GPIO_Init+0x208>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_GPIO_Init+0x30c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d019      	beq.n	8001460 <HAL_GPIO_Init+0x204>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4f      	ldr	r2, [pc, #316]	; (800156c <HAL_GPIO_Init+0x310>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_GPIO_Init+0x200>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_GPIO_Init+0x314>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00d      	beq.n	8001458 <HAL_GPIO_Init+0x1fc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <HAL_GPIO_Init+0x318>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x1f8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x31c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_Init+0x1f4>
 800144c:	2307      	movs	r3, #7
 800144e:	e00e      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001450:	2308      	movs	r3, #8
 8001452:	e00c      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001454:	2306      	movs	r3, #6
 8001456:	e00a      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001458:	2305      	movs	r3, #5
 800145a:	e008      	b.n	800146e <HAL_GPIO_Init+0x212>
 800145c:	2304      	movs	r3, #4
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001460:	2303      	movs	r3, #3
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x212>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x212>
 800146c:	2300      	movs	r3, #0
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x300>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_GPIO_Init+0x320>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b0:	4a32      	ldr	r2, [pc, #200]	; (800157c <HAL_GPIO_Init+0x320>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_GPIO_Init+0x320>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_GPIO_Init+0x320>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_Init+0x320>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_GPIO_Init+0x320>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_GPIO_Init+0x320>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_GPIO_Init+0x320>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ae91 	bne.w	800126c <HAL_GPIO_Init+0x10>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800
 8001568:	48000c00 	.word	0x48000c00
 800156c:	48001000 	.word	0x48001000
 8001570:	48001400 	.word	0x48001400
 8001574:	48001800 	.word	0x48001800
 8001578:	48001c00 	.word	0x48001c00
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08d      	b.n	800170e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fbe6 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e006      	b.n	8001668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d108      	bne.n	8001682 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	e007      	b.n	8001692 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69d9      	ldr	r1, [r3, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	460b      	mov	r3, r1
 8001726:	817b      	strh	r3, [r7, #10]
 8001728:	4613      	mov	r3, r2
 800172a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b20      	cmp	r3, #32
 8001736:	f040 80fd 	bne.w	8001934 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_I2C_Master_Transmit+0x30>
 8001744:	2302      	movs	r3, #2
 8001746:	e0f6      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001750:	f7ff fc6e 	bl	8001030 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2319      	movs	r3, #25
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f914 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0e1      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2221      	movs	r2, #33	; 0x21
 8001776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2210      	movs	r2, #16
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2bff      	cmp	r3, #255	; 0xff
 80017a2:	d906      	bls.n	80017b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80017aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e007      	b.n	80017c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d024      	beq.n	8001814 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	8979      	ldrh	r1, [r7, #10]
 8001806:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <HAL_I2C_Master_Transmit+0x228>)
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa79 	bl	8001d04 <I2C_TransferConfig>
 8001812:	e066      	b.n	80018e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	b2da      	uxtb	r2, r3
 800181a:	8979      	ldrh	r1, [r7, #10]
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_I2C_Master_Transmit+0x228>)
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fa6e 	bl	8001d04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001828:	e05b      	b.n	80018e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f8fd 	bl	8001a2e <I2C_WaitOnTXISFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07b      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d034      	beq.n	80018e2 <HAL_I2C_Master_Transmit+0x1ca>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d130      	bne.n	80018e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	2200      	movs	r2, #0
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f880 	bl	8001990 <I2C_WaitOnFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e04d      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2bff      	cmp	r3, #255	; 0xff
 80018a2:	d90e      	bls.n	80018c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fa22 	bl	8001d04 <I2C_TransferConfig>
 80018c0:	e00f      	b.n	80018e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	8979      	ldrh	r1, [r7, #10]
 80018d4:	2300      	movs	r3, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fa11 	bl	8001d04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d19e      	bne.n	800182a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	6a39      	ldr	r1, [r7, #32]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f8e3 	bl	8001abc <I2C_WaitOnSTOPFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e01a      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2220      	movs	r2, #32
 8001906:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_I2C_Master_Transmit+0x22c>)
 8001914:	400b      	ands	r3, r1
 8001916:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	80002000 	.word	0x80002000
 8001944:	fe00e800 	.word	0xfe00e800

08001948 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d103      	bne.n	8001966 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d007      	beq.n	8001984 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	619a      	str	r2, [r3, #24]
  }
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a0:	e031      	b.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d02d      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff fb41 	bl	8001030 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d122      	bne.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4013      	ands	r3, r2
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d113      	bne.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d0be      	beq.n	80019a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a3a:	e033      	b.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f87f 	bl	8001b44 <I2C_IsErrorOccurred>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e031      	b.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d025      	beq.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a58:	f7ff faea 	bl	8001030 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d302      	bcc.n	8001a6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11a      	bne.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d013      	beq.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e007      	b.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d1c4      	bne.n	8001a3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac8:	e02f      	b.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f838 	bl	8001b44 <I2C_IsErrorOccurred>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e02d      	b.n	8001b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7ff faa7 	bl	8001030 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11a      	bne.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d013      	beq.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e007      	b.n	8001b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d1c8      	bne.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d068      	beq.n	8001c42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b78:	e049      	b.n	8001c0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d045      	beq.n	8001c0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff fa55 	bl	8001030 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_IsErrorOccurred+0x54>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d13a      	bne.n	8001c0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001baa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bba:	d121      	bne.n	8001c00 <I2C_IsErrorOccurred+0xbc>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc2:	d01d      	beq.n	8001c00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bc4:	7cfb      	ldrb	r3, [r7, #19]
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d01a      	beq.n	8001c00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bda:	f7ff fa29 	bl	8001030 <HAL_GetTick>
 8001bde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be0:	e00e      	b.n	8001c00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001be2:	f7ff fa25 	bl	8001030 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b19      	cmp	r3, #25
 8001bee:	d907      	bls.n	8001c00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001bfe:	e006      	b.n	8001c0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d1e9      	bne.n	8001be2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d003      	beq.n	8001c24 <I2C_IsErrorOccurred+0xe0>
 8001c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0aa      	beq.n	8001b7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2220      	movs	r2, #32
 8001c32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01c      	beq.n	8001cf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fe45 	bl	8001948 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <I2C_IsErrorOccurred+0x1bc>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	fe00e800 	.word	0xfe00e800

08001d04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	4613      	mov	r3, r2
 8001d14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d1c:	7a7b      	ldrb	r3, [r7, #9]
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	0d5b      	lsrs	r3, r3, #21
 8001d3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <I2C_TransferConfig+0x60>)
 8001d44:	430b      	orrs	r3, r1
 8001d46:	43db      	mvns	r3, r3
 8001d48:	ea02 0103 	and.w	r1, r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	03ff63ff 	.word	0x03ff63ff

08001d68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d138      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e032      	b.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2224      	movs	r2, #36	; 0x24
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e000      	b.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d139      	bne.n	8001e88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e033      	b.n	8001e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2224      	movs	r2, #36	; 0x24
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea8:	d102      	bne.n	8001eb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eae:	e00b      	b.n	8001ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebe:	d102      	bne.n	8001ec6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	e000      	b.n	8001ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ec6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d141      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d131      	bne.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001efa:	4a46      	ldr	r2, [pc, #280]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2232      	movs	r2, #50	; 0x32
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	; (800201c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2a:	e002      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d102      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f2      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d158      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e057      	b.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f68:	e04d      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d141      	bne.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7e:	d131      	bne.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2232      	movs	r2, #50	; 0x32
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	0c9b      	lsrs	r3, r3, #18
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb6:	e002      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d102      	bne.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f2      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d112      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e011      	b.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ff4:	e007      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002004:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40007000 	.word	0x40007000
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83

08002020 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_PWREx_EnableVddIO2+0x1c>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6053      	str	r3, [r2, #4]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f000 bc08 	b.w	8002864 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205e:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80e4 	beq.w	800223e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RCC_OscConfig+0x4c>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	f040 808b 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 8087 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x64>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e3df      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x7e>
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	e005      	b.n	80020ca <HAL_RCC_OscConfig+0x8a>
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d223      	bcs.n	8002116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fd94 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e3c0      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	496d      	ldr	r1, [pc, #436]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	4968      	ldr	r1, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e025      	b.n	8002162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4960      	ldr	r1, [pc, #384]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	495b      	ldr	r1, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fd54 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e380      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002162:	f000 fcc1 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_RCC_OscConfig+0x278>)
 8002180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff02 	bl	8000f90 <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d052      	beq.n	800223c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	e364      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ae:	f7fe ff3f 	bl	8001030 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b6:	f7fe ff3b 	bl	8001030 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e34d      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4930      	ldr	r1, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	492b      	ldr	r1, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002214:	f7fe ff0c 	bl	8001030 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe ff08 	bl	8001030 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e31a      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1dc>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d073      	beq.n	8002332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x21c>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d063      	beq.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d15f      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e2f7      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x24c>
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e025      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_OscConfig+0x280>
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a02      	ldr	r2, [pc, #8]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003864 	.word	0x08003864
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004
 80022c0:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a9f      	ldr	r2, [pc, #636]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9c      	ldr	r2, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fea6 	bl	8001030 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fea2 	bl	8001030 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e2b4      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2a8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fe92 	bl	8001030 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe8e 	bl	8001030 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e2a0      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d0>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d119      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b7c      	ldr	r3, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x328>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e27d      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4973      	ldr	r1, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e040      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fe4d 	bl	8001030 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fe49 	bl	8001030 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e25b      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	495f      	ldr	r1, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fe29 	bl	8001030 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fe25 	bl	8001030 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e237      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fe04 	bl	8001030 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe fe00 	bl	8001030 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e212      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe fde7 	bl	8001030 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe fde3 	bl	8001030 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1f5      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a6 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fdaa 	bl	8001030 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fda6 	bl	8001030 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1b8      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d8>
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	e029      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x50c>
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	4b9d      	ldr	r3, [pc, #628]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a9c      	ldr	r2, [pc, #624]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a98      	ldr	r2, [pc, #608]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fd5c 	bl	8001030 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fd58 	bl	8001030 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e168      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ed      	beq.n	800257c <HAL_RCC_OscConfig+0x53c>
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe fd45 	bl	8001030 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fd41 	bl	8001030 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e151      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ed      	bne.n	80025aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03c      	beq.n	8002666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f4:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fd14 	bl	8001030 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260c:	f7fe fd10 	bl	8001030 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e122      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <HAL_RCC_OscConfig+0x5cc>
 800262c:	e01b      	b.n	8002666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fcf7 	bl	8001030 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002646:	f7fe fcf3 	bl	8001030 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e105      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800265a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ef      	bne.n	8002646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80f9 	beq.w	8002862 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 80cf 	bne.w	8002818 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	429a      	cmp	r2, r3
 800268c:	d12c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	3b01      	subs	r3, #1
 800269a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d123      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d113      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d071      	beq.n	80027cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d068      	beq.n	80027c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0ac      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002716:	f7fe fc8b 	bl	8001030 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fc87 	bl	8001030 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e099      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x788>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800274c:	3a01      	subs	r2, #1
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002756:	0212      	lsls	r2, r2, #8
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0552      	lsls	r2, r2, #21
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0652      	lsls	r2, r2, #25
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002776:	06d2      	lsls	r2, r2, #27
 8002778:	430a      	orrs	r2, r1
 800277a:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800277c:	4313      	orrs	r3, r2
 800277e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002798:	f7fe fc4a 	bl	8001030 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fc46 	bl	8001030 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e058      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCC_OscConfig+0x784>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027be:	e050      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e04f      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d144      	bne.n	8002862 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f0:	f7fe fc1e 	bl	8001030 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fc1a 	bl	8001030 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e02c      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x7b8>
 8002816:	e024      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d01f      	beq.n	800285e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fc01 	bl	8001030 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fbfd 	bl	8001030 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e00f      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4905      	ldr	r1, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x82c>)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x830>)
 8002858:	4013      	ands	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e001      	b.n	8002862 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	feeefffc 	.word	0xfeeefffc

08002874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e11d      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b90      	ldr	r3, [pc, #576]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d910      	bls.n	80028bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b8d      	ldr	r3, [pc, #564]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	498b      	ldr	r1, [pc, #556]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e105      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d908      	bls.n	80028ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	497b      	ldr	r1, [pc, #492]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d079      	beq.n	80029ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d11e      	bne.n	800293c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0dc      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800290e:	f000 f9d1 	bl	8002cb4 <RCC_GetSysClockFreqFromPLLSource>
 8002912:	4603      	mov	r3, r0
 8002914:	4a70      	ldr	r2, [pc, #448]	; (8002ad8 <HAL_RCC_ClockConfig+0x264>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d946      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800291a:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d140      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e035      	b.n	80029a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b9      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295c:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0ad      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0a5      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800297c:	f000 f8b4 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002980:	4603      	mov	r3, r0
 8002982:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <HAL_RCC_ClockConfig+0x264>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d90f      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002988:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299c:	4a4d      	ldr	r2, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 800299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 0203 	bic.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4947      	ldr	r1, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fb39 	bl	8001030 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fb35 	bl	8001030 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e077      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 020c 	and.w	r2, r3, #12
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d1eb      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d208      	bcs.n	8002a2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	492b      	ldr	r1, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d210      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 020f 	bic.w	r2, r3, #15
 8002a40:	4923      	ldr	r1, [pc, #140]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_ClockConfig+0x25c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e036      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a98:	f000 f826 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <HAL_RCC_ClockConfig+0x268>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x26c>)
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fa67 	bl	8000f90 <HAL_InitTick>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	04c4b400 	.word	0x04c4b400
 8002adc:	08003864 	.word	0x08003864
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x34>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d121      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d11e      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e005      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e004      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d134      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0xac>
 8002b8c:	e005      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b90:	617b      	str	r3, [r7, #20]
      break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b96:	617b      	str	r3, [r7, #20]
      break;
 8002b98:	e002      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	fb03 f202 	mul.w	r2, r3, r2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	0e5b      	lsrs	r3, r3, #25
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002be0:	69bb      	ldr	r3, [r7, #24]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08003874 	.word	0x08003874
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	007a1200 	.word	0x007a1200

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f93e 	bl	8001e98 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
 8002c1e:	e014      	b.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a21      	ldr	r2, [pc, #132]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f92e 	bl	8001e98 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d10b      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d913      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5c:	d902      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e00d      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e00a      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c6e:	d902      	bls.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e004      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d101      	bne.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 020f 	bic.w	r2, r3, #15
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d00b      	beq.n	8002ce2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d825      	bhi.n	8002d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d008      	beq.n	8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d11f      	bne.n	8002d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cde:	613b      	str	r3, [r7, #16]
    break;
 8002ce0:	e01f      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ce4:	613b      	str	r3, [r7, #16]
    break;
 8002ce6:	e01c      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e005      	b.n	8002d10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d10:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	613b      	str	r3, [r7, #16]
    break;
 8002d1a:	e002      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
    break;
 8002d20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	fb03 f202 	mul.w	r2, r3, r2
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d62:	683b      	ldr	r3, [r7, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200
 8002d7c:	08003874 	.word	0x08003874

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d040      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d02a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d825      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d026      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d821      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d006      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d81d      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dc0:	e018      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc2:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dce:	e015      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb02 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de0:	e00c      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3320      	adds	r3, #32
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fbed 	bl	80035c8 <RCCEx_PLLSAI2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	74fb      	strb	r3, [r7, #19]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e02:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e08:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	4975      	ldr	r1, [pc, #468]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e18:	e001      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d047      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d030      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d82a      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e3e:	d02a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e44:	d824      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d81e      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e5c:	e018      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5e:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6a:	e015      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fab4 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3320      	adds	r3, #32
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fb9f 	bl	80035c8 <RCCEx_PLLSAI2_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	74fb      	strb	r3, [r7, #19]
      break;
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9e:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	494e      	ldr	r1, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002eb4:	e001      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 809f 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe f891 	bl	8001030 <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f10:	e009      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe f88d 	bl	8001030 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	74fb      	strb	r3, [r7, #19]
        break;
 8002f24:	e005      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ef      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d15b      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01f      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d019      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe f84c 	bl	8001030 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe f848 	bl	8001030 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb2:	e006      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ec      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4ba0      	ldr	r3, [pc, #640]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a9f      	ldr	r2, [pc, #636]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b9a      	ldr	r3, [pc, #616]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	4996      	ldr	r1, [pc, #600]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b91      	ldr	r3, [pc, #580]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	498e      	ldr	r1, [pc, #568]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b89      	ldr	r3, [pc, #548]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	4985      	ldr	r1, [pc, #532]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b80      	ldr	r3, [pc, #512]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	497d      	ldr	r1, [pc, #500]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4b78      	ldr	r3, [pc, #480]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4974      	ldr	r1, [pc, #464]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	496c      	ldr	r1, [pc, #432]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ec:	4963      	ldr	r1, [pc, #396]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003100:	4b5e      	ldr	r3, [pc, #376]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310e:	495b      	ldr	r1, [pc, #364]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003122:	4b56      	ldr	r3, [pc, #344]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	4952      	ldr	r1, [pc, #328]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	494a      	ldr	r1, [pc, #296]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	4941      	ldr	r1, [pc, #260]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003188:	4b3c      	ldr	r3, [pc, #240]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	4939      	ldr	r1, [pc, #228]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d028      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	4930      	ldr	r1, [pc, #192]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c8:	d106      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a2b      	ldr	r2, [pc, #172]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d4:	60d3      	str	r3, [r2, #12]
 80031d6:	e011      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f8f9 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d04d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003210:	d108      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003222:	e012      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003230:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d106      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	60d3      	str	r3, [r2, #12]
 8003260:	e020      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a02      	ldr	r2, [pc, #8]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	60d3      	str	r3, [r2, #12]
 8003278:	e014      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8a5 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d028      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b0:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032be:	4947      	ldr	r1, [pc, #284]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d106      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a41      	ldr	r2, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
 80032dc:	e011      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e6:	d10c      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f876 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	492f      	ldr	r1, [pc, #188]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f851 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800335e:	f023 0204 	bic.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003368:	491c      	ldr	r1, [pc, #112]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003382:	f023 0218 	bic.w	r2, r3, #24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	4913      	ldr	r1, [pc, #76]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000

080033e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d103      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
       ||
 800340e:	2b00      	cmp	r3, #0
 8003410:	d142      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e03f      	b.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d018      	beq.n	8003452 <RCCEx_PLLSAI1_Config+0x72>
 8003420:	2b03      	cmp	r3, #3
 8003422:	d825      	bhi.n	8003470 <RCCEx_PLLSAI1_Config+0x90>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x4e>
 8003428:	2b02      	cmp	r3, #2
 800342a:	d009      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x60>
 800342c:	e020      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342e:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343e:	e01a      	b.n	8003476 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003440:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003450:	e013      	b.n	800347a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003452:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346e:	e006      	b.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e004      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003486:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4949      	ldr	r1, [pc, #292]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8086 	bne.w	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a0:	4b45      	ldr	r3, [pc, #276]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd fdc0 	bl	8001030 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fd fdbc 	bl	8001030 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d168      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	0211      	lsls	r1, r2, #8
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	06d2      	lsls	r2, r2, #27
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6852      	ldr	r2, [r2, #4]
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	430a      	orrs	r2, r1
 8003500:	492d      	ldr	r1, [pc, #180]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]
 8003506:	e02d      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d115      	bne.n	800353a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6852      	ldr	r2, [r2, #4]
 800352c:	3a01      	subs	r2, #1
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	430a      	orrs	r2, r1
 8003532:	4921      	ldr	r1, [pc, #132]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	610b      	str	r3, [r1, #16]
 8003538:	e014      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353a:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	0211      	lsls	r1, r2, #8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6952      	ldr	r2, [r2, #20]
 800354c:	0852      	lsrs	r2, r2, #1
 800354e:	3a01      	subs	r2, #1
 8003550:	0652      	lsls	r2, r2, #25
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	3a01      	subs	r2, #1
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	430a      	orrs	r2, r1
 800355e:	4916      	ldr	r1, [pc, #88]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fd fd5e 	bl	8001030 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003578:	f7fd fd5a 	bl	8001030 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
          break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	07ff800f 	.word	0x07ff800f
 80035c0:	ff9f800f 	.word	0xff9f800f
 80035c4:	f9ff800f 	.word	0xf9ff800f

080035c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d103      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
       ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d142      	bne.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e03f      	b.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x72>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI2_Config+0x90>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x4e>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0x60>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4949      	ldr	r1, [pc, #292]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 8086 	bne.w	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003688:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd fccc 	bl	8001030 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800369c:	f7fd fcc8 	bl	8001030 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d168      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	06d2      	lsls	r2, r2, #27
 80036dc:	4311      	orrs	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	430a      	orrs	r2, r1
 80036e8:	492d      	ldr	r1, [pc, #180]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	614b      	str	r3, [r1, #20]
 80036ee:	e02d      	b.n	800374c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d115      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6912      	ldr	r2, [r2, #16]
 8003708:	0852      	lsrs	r2, r2, #1
 800370a:	3a01      	subs	r2, #1
 800370c:	0552      	lsls	r2, r2, #21
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6852      	ldr	r2, [r2, #4]
 8003714:	3a01      	subs	r2, #1
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	430a      	orrs	r2, r1
 800371a:	4921      	ldr	r1, [pc, #132]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	614b      	str	r3, [r1, #20]
 8003720:	e014      	b.n	800374c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003722:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	4b21      	ldr	r3, [pc, #132]	; (80037ac <RCCEx_PLLSAI2_Config+0x1e4>)
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6892      	ldr	r2, [r2, #8]
 800372e:	0211      	lsls	r1, r2, #8
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6952      	ldr	r2, [r2, #20]
 8003734:	0852      	lsrs	r2, r2, #1
 8003736:	3a01      	subs	r2, #1
 8003738:	0652      	lsls	r2, r2, #25
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6852      	ldr	r2, [r2, #4]
 8003740:	3a01      	subs	r2, #1
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	4916      	ldr	r1, [pc, #88]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fd fc6a 	bl	8001030 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003760:	f7fd fc66 	bl	8001030 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
          break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	07ff800f 	.word	0x07ff800f
 80037a8:	ff9f800f 	.word	0xff9f800f
 80037ac:	f9ff800f 	.word	0xf9ff800f

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 f818 	bl	8003808 <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	080038a4 	.word	0x080038a4
 80037fc:	080038a4 	.word	0x080038a4
 8003800:	080038a4 	.word	0x080038a4
 8003804:	080038a8 	.word	0x080038a8

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
